/*************************************************************************
 *
 * VLOCITY, INC. CONFIDENTIAL
 * __________________
 *
 *  [2014] - [2020] Vlocity, Inc.
 *  All Rights Reserved.
 *
 * NOTICE:  All information contained herein is, and remains
 * the property of Vlocity, Inc. and its suppliers,
 * if any. The intellectual and technical concepts contained
 * herein are proprietary to Vlocity, Inc. and its suppliers and may be
 * covered by U.S. and Foreign Patents, patents in process, and are
 * protected by trade secret or copyright law. Dissemination of this
 * information and reproduction, modification or reverse-engineering
 * of this material, is prohibited unless prior written permission
 * is obtained from Vlocity, Inc.
 *
 * Build: v234.0.0
 */
import { createElement } from "lwc";
import Tree from "c/tree";

describe("c-tree", () => {
  afterEach(() => {
    while (document.body.firstChild) {
      document.body.removeChild(document.body.firstChild);
    }
  });

  it("renders DOM elements", () => {
    const element = createElement("c-tree", {
      is: Tree
    });
    document.body.appendChild(element);
    expect(element.shadowRoot.children).not.toHaveLength(0);
  });

  it("creates tree", () => {
    const element = createElement("c-tree", {
      is: Tree
    });
    element.items = [
      {
        label: "Go to Record 1",
        href: "#record1",
        items: [],
        expanded: true
      },
      {
        label: "Go to Record 2",
        href: "#record2",
        items: [],
        expanded: true
      },
      {
        label: "Go to Record 3",
        href: "#record3",
        items: [],
        expanded: true
      }
    ];
    document.body.appendChild(element);
    return Promise.resolve().then(() => {
      const ele = element.shadowRoot
        .querySelector("c-tree-item")
        .shadowRoot.querySelectorAll("ul");
      expect(ele).toHaveLength(element.items.length);
    });
  });
});
