/*************************************************************************
 *
 * VLOCITY, INC. CONFIDENTIAL
 * __________________
 *
 *  [2014] - [2020] Vlocity, Inc.
 *  All Rights Reserved.
 *
 * NOTICE:  All information contained herein is, and remains
 * the property of Vlocity, Inc. and its suppliers,
 * if any. The intellectual and technical concepts contained
 * herein are proprietary to Vlocity, Inc. and its suppliers and may be
 * covered by U.S. and Foreign Patents, patents in process, and are
 * protected by trade secret or copyright law. Dissemination of this
 * information and reproduction, modification or reverse-engineering
 * of this material, is prohibited unless prior written permission
 * is obtained from Vlocity, Inc.
 *
 * Build: v234.0.0
 */
import { LightningElement, api, track } from "lwc";
import pubsub from "c/pubsub";
import sldsTemplate from "./sldsHeader.html";
import ndsTemplate from "./ndsHeader.html";

import { cloneDeep, get } from "c/lodash";

/**
 * @module c/SldsHeder
 * @typicalname SldsHeader
 * @example
 * ```
 * <c-slds-header
 *  header="Sample Header"
 *  description="Sample title for the header"
 *  theme={theme}
 *  icon-name="standard:opportunity"
 *  icon-size="large"
 *  icon-color="#fcb95b"
 *  icon-bg-color="#fff"
 *  >
 * </c-slds-header>
 *
 * ```
 */

export default class SldsHeader extends LightningElement {
  /**
   * @type {String} - This sets the header
   * @scope api (public)
   */
  @api header;
  /**
   * @type {String} - This is the short description for the header
   * @scope api (public)
   */
  @api description;
  /**
   * @type {String} - Sets the theme of the component. Default is slds
   * @scope api (public)
   */
  @api theme = "slds";
  /**
   * @type {String} - to show/hide the spinner
   * @scope api (public)
   */
  @api showSpinner = false;
  /**
   * @type {String} - Name of the icon to be shown beside the header
   * @scope api (public)
   */
  @api iconName;
  /**
   * @type {String} - Size of the icon to be shown beside the header. For available values check c-icon
   * @scope api (public)
   */
  @api iconSize;
  /**
   * @type {String} - Color of the icon provided by the user when using slds icons
   * @scope api (public)
   */
  @api iconColor;
  /**
   * @type {String} - Color of the icon background provided by the user when using slds icons
   * @scope api (public)
   */
  @api iconBgColor;
  /**
   * @type {String} - When set it will use the custom img provided by user
   * @scope api (public)
   */
  @api imageRef;
  /**
   * @type {String} - Alternate text for the image
   * @scope api (public)
   */
  @api displayName;
  /**
   * @type {String} - Class provided by the user to be used as the custom img wrapper class
   * @scope api (public)
   */
  @api iconImgWrapperclass;
  /**
   * @type {String} - Array of objects containing fields data
   * @scope api (public)
   */
  @api get fields() {
    return this._fields;
  }
  set fields(val) {
    this._fields = val;
    this.formatFields();
  }
  /**
   * @type {String} - obj containing the data for the fields
   * @scope api (public)
   */
  @api get obj() {
    return this._obj;
  }
  set obj(val) {
    this._obj = val;
    this.formatFields();
  }

  @api headerWrapperClass;

  @track
  state = {
    header: null,
    description: null,
    iconName: null,
    iconSize: null,
    iconColor: null,
    iconBgColor: null,
    isBaseVersion: false,
    showFieldsSection: false,
    attachment: {
      imageRef: null,
      displayName: null,
      iconImgWrapperclass: null
    }
  };

  _firstRender = true;
  @track _fields = [];
  @track _obj;

  _iconName = "action:check";
  _iconVariant = "inverse";
  _iconBgColor = "#54698d";
  _iconSize = "x-small";

  connectedCallback() {
    pubsub.register("sldsheader", {
      edit: this.handleEdit.bind(this),
      save: this.handleSave.bind(this)
    });
  }

  render() {
    if (this.theme === "nds") {
      return ndsTemplate;
    }
    return sldsTemplate;
  }

  renderedCallback() {
    if (this._firstRender) {
      this.state.header = this.header;
      this.state.description = this.description;
      if (this.imageRef && this.displayName) {
        this.state.attachment.imageRef = this.imageRef;
        this.state.attachment.displayName = this.displayName;
        this.state.attachment.iconImgWrapperclass = this.iconImgWrapperclass;
      } else if (this.iconName) {
        this.state.iconName = this.iconName;
        this.state.iconSize = this.iconSize;
        this.state.iconColor = this.iconColor;
        this.state.iconBgColor = this.iconBgColor;
      }
      Promise.resolve().then(() => {
        let ele = this.querySelectorAll("[slot=sldsheaderfields]");
        this.state.isBaseVersion = ele.length ? false : true;
      });
    }
    this._firstRender = false;
  }

  /**
   * @function - Logic to show the fields section of the fields
   */
  get showFieldsSection() {
    return this.fields && this.fields.length > 0 && this.state.isBaseVersion;
  }

  get iconExtraClass() {
    return `${this.theme}-p-around_xxx-small ${this.theme}-icon_container--circle`;
  }

  get wrapperClass() {
    return `${this.theme}-page-header ${this.theme}-page-header_record-home ${
      this.headerWrapperClass ? this.headerWrapperClass : ""
    } ${this.theme === "nds" ? "nds-page-header_record-home" : ""}`;
  }

  get showMediaIcon() {
    return this.state.attachment.imageRef || this.state.iconName;
  }

  formatFields() {
    if (this._fields && this._obj) {
      const field = cloneDeep(this._fields);
      const obj = cloneDeep(this._obj);
      const fieldArray = field.map(item => {
        const value = get(obj, item.name);
        return {
          name: item.name,
          label: item.label,
          type: item.type,
          showIcon: item.type === "icon",
          showCheck: value === true || value === "true",
          class: item.class
            ? item.class + " slds-page-header__detail-block reset-padding"
            : "slds-page-header__detail-block reset-padding"
        };
      });
      this._fields = fieldArray;
    }
  }

  /**
   * @function - Changes the header when in editing mode
   * @param {Event} - Event is expecting params deatil.message to be set to the header when in edit mode.
   */
  handleEdit(event) {
    this.state.header =
      event.detail && event.detail.message ? event.detail.message : this.header;
  }

  /**
   * @function - Resets the header after the editing is done
   * @param {Event}
   */
  handleSave() {
    this.state.header = this.header;
  }

  disconnectedCallback() {
    pubsub.unregister("sldsheader", {
      edit: this.handleEdit.bind(this),
      save: this.handleSave.bind(this)
    });
  }
}
