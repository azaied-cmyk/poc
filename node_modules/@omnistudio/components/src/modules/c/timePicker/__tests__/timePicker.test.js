/*************************************************************************
 *
 * VLOCITY, INC. CONFIDENTIAL
 * __________________
 *
 *  [2014] - [2020] Vlocity, Inc.
 *  All Rights Reserved.
 *
 * NOTICE:  All information contained herein is, and remains
 * the property of Vlocity, Inc. and its suppliers,
 * if any. The intellectual and technical concepts contained
 * herein are proprietary to Vlocity, Inc. and its suppliers and may be
 * covered by U.S. and Foreign Patents, patents in process, and are
 * protected by trade secret or copyright law. Dissemination of this
 * information and reproduction, modification or reverse-engineering
 * of this material, is prohibited unless prior written permission
 * is obtained from Vlocity, Inc.
 *
 * Build: v234.0.0
 */
// eslint-disable-next-line eslint-comments/disable-enable-pair
/* eslint-disable no-unused-vars */
import { createElement } from "lwc";
import VlocityTimePicker from "c/timePicker";
import cmpDayJsLocaleFormats from "@salesforce/label/c.cmpDayJsLocaleFormats";
import cmpLocaleFormatsInvalid from "@salesforce/label/c.cmpLocaleFormatsInvalid";

import { elementProperties, inputFormats, expected } from "./data/testData";

jest.mock(
  "@salesforce/label/c.cmpDayJsLocaleFormats",
  () => {
    return {
      default:
        '{"name":"en","weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"months":["January","February","March","April","May","June","July","August","September","October","November","December"]}'
    };
  },
  { virtual: true }
);

jest.mock(
  "@salesforce/label/c.cmpLocaleFormatsInvalid",
  () => {
    return {
      default:
        'Unable to render due to invalid localeFormat. Please provide a valid localeFormat in the form of {"name":"en","weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"months":["January","February","March","April","May","June","July","August","September","October","November","December"]}'
    };
  },
  { virtual: true }
);

describe("c-time-picker", () => {
  afterEach(() => {
    while (document.body.firstChild) {
      document.body.removeChild(document.body.firstChild);
    }
  });
  // Check if the element is rendered in DOM
  it("Element rendered in DOM", () => {
    const element = createElement("c-time-picker", {
      is: VlocityTimePicker
    });
    element.theme = "slds";
    element.label = "Time";
    element.placeholder = "12:00";
    document.body.appendChild(element);

    const timePickerEl =
      element.shadowRoot.querySelectorAll(".slds-timepicker").length > 0
        ? true
        : false;

    expect(timePickerEl).toBe(true);
  });

  // Check if theme is set properly

  it(" Theme is  set properly ", () => {
    const element = createElement("c-time-picker", {
      is: VlocityTimePicker
    });
    element.theme = "nds";
    document.body.appendChild(element);

    return Promise.resolve().then(function() {
      expect(element.shadowRoot.querySelector("div").className).toContain(
        "nds"
      );
    });
  });

  // Check if Placeholder is working

  it(" Placeholder is set ", () => {
    const element = createElement("c-time-picker", {
      is: VlocityTimePicker
    });
    element.placeholder = "12:00";
    document.body.appendChild(element);

    return Promise.resolve().then(function() {
      expect(element.shadowRoot.querySelector("input").placeholder).toBe(
        "12:00"
      );
    });
  });

  // Check if Label is working

  it(" Label is set ", () => {
    const element = createElement("c-time-picker", {
      is: VlocityTimePicker
    });
    element.theme = "slds";
    element.label = "Time";
    document.body.appendChild(element);

    return Promise.resolve().then(function() {
      let labelEl = element.shadowRoot.querySelector("label");
      let val =
        labelEl.className.indexOf("slds-form-element__label") !== -1
          ? true
          : false;
      expect(val).toBe(true);
    });
  });

  //check value for SOQL date format
  it("checks output value for SOQL date string format input", () => {
    const element = createElement("c-time-picker", {
      is: VlocityTimePicker
    });

    Object.entries(elementProperties).forEach(([key, value]) => {
      element[key] = value;
    });

    element.value = inputFormats.soql;
    document.body.appendChild(element);

    return Promise.resolve().then(function() {
      expect(element.displayValue).toBe(expected.soql);
    });
  });

  //check value for ISO date format
  it("checks output value for ISO format date string input", () => {
    const element = createElement("c-time-picker", {
      is: VlocityTimePicker
    });

    Object.entries(elementProperties).forEach(([key, value]) => {
      element[key] = value;
    });

    element.value = inputFormats.iso;
    document.body.appendChild(element);

    return Promise.resolve().then(function() {
      expect(element.displayValue).toBe(expected.iso);
    });
  });

  //check value for string date format
  it("checks output value for Date String input", () => {
    const element = createElement("c-time-picker", {
      is: VlocityTimePicker
    });

    Object.entries(elementProperties).forEach(([key, value]) => {
      element[key] = value;
    });

    element.value = inputFormats.dateString;
    document.body.appendChild(element);

    return Promise.resolve().then(function() {
      expect(element.displayValue).toBe(expected.dateString);
    });
  });
});
