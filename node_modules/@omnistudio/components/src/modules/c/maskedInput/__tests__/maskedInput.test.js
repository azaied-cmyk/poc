/*************************************************************************
 *
 * VLOCITY, INC. CONFIDENTIAL
 * __________________
 *
 *  [2014] - [2020] Vlocity, Inc.
 *  All Rights Reserved.
 *
 * NOTICE:  All information contained herein is, and remains
 * the property of Vlocity, Inc. and its suppliers,
 * if any. The intellectual and technical concepts contained
 * herein are proprietary to Vlocity, Inc. and its suppliers and may be
 * covered by U.S. and Foreign Patents, patents in process, and are
 * protected by trade secret or copyright law. Dissemination of this
 * information and reproduction, modification or reverse-engineering
 * of this material, is prohibited unless prior written permission
 * is obtained from Vlocity, Inc.
 *
 * Build: v234.0.0
 */
import { createElement } from "lwc";
import MaskedInput from "c/maskedInput";

describe("c-masked-input", () => {
  afterEach(() => {
    while (document.body.firstChild) {
      document.body.removeChild(document.body.firstChild);
    }
  });

  it("renders DOM elements", () => {
    const element = createElement("c-masked-input", {
      is: MaskedInput
    });
    let maskAttrib = {
      mask: Number(),
      thousandsSeparator: ",",
      radix: "."
    };
    element.label = "InputMask";
    element.theme = "slds";
    element.value = "123456";
    element.type = "text";
    element.imask = maskAttrib;
    document.body.appendChild(element);
    expect(element.shadowRoot.children).not.toHaveLength(0);
  });

  /**
   * Check if the theme is applied properly
   */
  it("Has theme set", () => {
    const element = createElement("c-masked-input", {
      is: MaskedInput
    });
    let maskAttrib = {
      mask: Number(),
      thousandsSeparator: ",",
      radix: "."
    };
    element.label = "InputMask";
    element.theme = "slds";
    element.value = "123456";
    element.type = "text";
    element.imask = maskAttrib;
    document.body.appendChild(element);
    const input = element.shadowRoot.querySelector("div");
    let index = input.className.indexOf("slds") !== -1 ? true : false;
    expect(index).toBe(true);
  });

  /**
   * Check if the value is set
   */
  it("Has value is set", () => {
    const element = createElement("c-masked-input", {
      is: MaskedInput
    });
    let maskAttrib = {
      mask: Number(),
      thousandsSeparator: ",",
      radix: ".",
      numberMask: true
    };
    element.label = "InputMask";
    element.theme = "slds";
    element.value = "123456";
    element.type = "text";
    element.imask = maskAttrib;
    document.body.appendChild(element);
    const input = element.shadowRoot.querySelector("input");
    expect(element.value).toBe(123456);
    expect(element.maskedValue).toBe("123,456");
    expect(input.value).toBe("123,456");
  });

  /**
   * Check if the mask value is set with placeholderChar
   */
  it("Has mask value is set with placeholderChar", () => {
    const element = createElement("c-masked-input", {
      is: MaskedInput
    });
    let maskAttrib = {
      mask: "+{7}(000)000-00-00",
      placeholderChar: "#" // defaults to '_'
    };
    element.showMaskWhen = "ALWAYS"; // make placeholder always visible
    element.label = "InputMask";
    element.theme = "slds";
    element.value = "";
    element.type = "text";
    element.imask = maskAttrib;
    document.body.appendChild(element);
    const input = element.shadowRoot.querySelector("input");
    expect(input.value).toBe("+7(###)###-##-##");
  });

  /**
   * Check if the masked value works
   */
  it("Check if the masked value works", () => {
    const element = createElement("c-masked-input", {
      is: MaskedInput
    });
    let maskAttrib = {
      mask: "+{7}(000)000-00-00",
      lazy: false, // make placeholder always visible
      placeholderChar: "#" // defaults to '_'
    };
    element.label = "InputMask";
    element.theme = "slds";
    element.value = "1234567890";
    element.type = "text";
    element.imask = maskAttrib;
    document.body.appendChild(element);
    expect(element.maskedValue).toBe("+7(123)456-78-90");
  });

  /**
   * Check if the unmasked value works
   */
  it("Check if the unmasked value works", () => {
    const element = createElement("c-masked-input", {
      is: MaskedInput
    });
    let maskAttrib = {
      mask: "+{7}(000)000-00-00",
      lazy: false, // make placeholder always visible
      placeholderChar: "#" // defaults to '_'
    };
    element.label = "InputMask";
    element.theme = "slds";
    element.value = "1234567890";
    element.type = "text";
    element.imask = maskAttrib;
    document.body.appendChild(element);
    expect(element.value).toBe("71234567890");
  });

  /**
   * Check if the typedValue is set
   */
  it("Check if the typedValue is set", () => {
    const element = createElement("c-masked-input", {
      is: MaskedInput
    });
    let maskAttrib = {
      mask: Number(),
      thousandsSeparator: ",",
      radix: ".",
      numberMask: true
    };
    element.label = "InputMask";
    element.theme = "slds";
    element.value = 100;
    element.type = "number";
    element.imask = maskAttrib;
    document.body.appendChild(element);
    expect(element.typedValue).toBe(100);
  });

  /**
   * Check for custom required validation
   */
  it("Check if custom required validation works.", () => {
    const element = createElement("c-masked-input", { is: MaskedInput });
    const maskAttrib = {
      mask: "(aaa)"
    };

    element.label = "InputMask";
    element.theme = "slds";
    element.type = "text";
    element.required = true;
    element.imask = maskAttrib;
    document.body.appendChild(element);

    expect(element.checkValidity()).toBe(false);
    expect(element.validity.valid).toBe(false);
    element.value = "abc";
    expect(element.reportValidity()).toBe(true);
  });

  it("Check if custom is complete validation works.", () => {
    const element = createElement("c-masked-input", { is: MaskedInput });
    const maskAttrib = {
      mask: "(aaa)"
    };

    element.label = "InputMask";
    element.theme = "slds";
    element.type = "text";
    element.required = true;
    element.imask = maskAttrib;
    document.body.appendChild(element);
    element.value = "ab";
    expect(element.checkValidity()).toBe(false);
    expect(element.validity.valid).toBe(false);
    element.value = "abc";
    expect(element.reportValidity()).toBe(true);
  });

  /**
   * Check for custom required validation for number type
   */
  it("Check if custom required validation works for number type.", () => {
    const element = createElement("c-masked-input", { is: MaskedInput });
    const maskAttrib = {
      mask: Number,
      numberMask: true
    };

    element.label = "InputMask";
    element.theme = "slds";
    element.type = "number";
    element.required = true;
    element.imask = maskAttrib;
    document.body.appendChild(element);

    expect(element.checkValidity()).toBe(false);
    expect(element.validity.valid).toBe(false);
    element.value = 0;
    expect(element.reportValidity()).toBe(true);
  });

  it("Check if custom validation works number, min value.", () => {
    const element = createElement("c-masked-input", { is: MaskedInput });
    const maskAttrib = {
      mask: Number,
      numberMask: true
    };

    element.label = "InputMask";
    element.theme = "slds";
    element.type = "number";
    element.imask = maskAttrib;
    element.min = 10;
    document.body.appendChild(element);

    element.value = 1;
    expect(element.checkValidity()).toBe(false);
    expect(element.validity.valid).toBe(false);
    element.value = 10;
    expect(element.reportValidity()).toBe(true);
  });

  it("Check if custom validation works number, max value.", () => {
    const element = createElement("c-masked-input", { is: MaskedInput });
    const maskAttrib = {
      mask: Number,
      numberMask: true
    };

    element.label = "InputMask";
    element.theme = "slds";
    element.type = "number";
    element.imask = maskAttrib;
    element.max = 10;
    document.body.appendChild(element);

    element.value = 11;
    expect(element.checkValidity()).toBe(false);
    expect(element.validity.valid).toBe(false);
    element.value = 10;
    expect(element.reportValidity()).toBe(true);
  });

  it("Check if custom validation works for exceeding max safe int.", () => {
    const element = createElement("c-masked-input", { is: MaskedInput });
    const maskAttrib = {
      mask: Number,
      numberMask: true
    };

    element.label = "InputMask";
    element.theme = "slds";
    element.type = "number";
    element.imask = maskAttrib;
    document.body.appendChild(element);
    element.value = Number.MAX_SAFE_INTEGER + 1;
    expect(element.checkValidity()).toBe(false);
    expect(element.validity.valid).toBe(false);
    element.value = 0;
    expect(element.reportValidity()).toBe(true);
  });
});
