/*************************************************************************
 *
 * VLOCITY, INC. CONFIDENTIAL
 * __________________
 *
 *  [2014] - [2020] Vlocity, Inc.
 *  All Rights Reserved.
 *
 * NOTICE:  All information contained herein is, and remains
 * the property of Vlocity, Inc. and its suppliers,
 * if any. The intellectual and technical concepts contained
 * herein are proprietary to Vlocity, Inc. and its suppliers and may be
 * covered by U.S. and Foreign Patents, patents in process, and are
 * protected by trade secret or copyright law. Dissemination of this
 * information and reproduction, modification or reverse-engineering
 * of this material, is prohibited unless prior written permission
 * is obtained from Vlocity, Inc.
 *
 * Build: v234.0.0
 */
import { LightningElement, track, api } from "lwc";
import pubsub from "c/pubsub";
import sldsTemplate from "./wizard_slds.html";
import ndsTemplate from "./wizard_nds.html";
import { wizardLabels as translatedLabels } from "c/salesforceUtils";
/**
 * @module c/wizard
 * @typicalname Wizard
 * @example
 * ```
 * <c-wizard>
 * <div slot="wizarditem">
 * <c-wizard-item label="Step1"> ... </c-wizard-item>
 * <c-wizard-item label="Step2"> ... </c-wizard-item>
 * <c-wizard-item label="Step3"> ... </c-wizard-item>
 * </div>
 * </c-wizard>
 *
 * ```
 */
export default class Wizard extends LightningElement {
  _isFirstRender = true;
  idGenerator = 0;
  /**
   * @type {String} - This sets the header
   * @scope api (public)
   */
  @api header;

  /**
   * @type {String} - This sets the theme. defult is "slds"
   * @scope api (public)
   */
  @api theme;

  @track state = {
    showWizard: true,
    header: null,
    theme: "slds",
    wizardItems: [],
    items: [],
    progress: 0,
    progressStep: null,
    isProcessComplete: false,
    openStep: null,
    numberOfWizardItems: null,
    showSpinner: false,
    get backEnabled() {
      return this.openStep && this.openStep !== "wizarditem-1" ? true : false;
    },
    get saveLabel() {
      return translatedLabels ? translatedLabels.saveLabel : "Save";
    },
    get nextLabel() {
      return translatedLabels ? translatedLabels.nextLabel : "Next";
    }
  };

  get buttonValue() {
    return this.state.isProcessComplete
      ? this.state.saveLabel
      : this.state.nextLabel;
  }

  /**
   * @function - Called when modal is closed.
   * Also fires pubsub event named "close", with the header as data.
   */
  handleClose() {
    pubsub.fire(this.state.header, "close", {
      name: this.state.header
    });
    this.state.showWizard = false;
  }

  handleButtonClick(event) {
    let name = event.target.value;
    let currentStep = Number(this.state.openStep.replace("wizarditem-", ""));
    if (name === this.state.saveLabel) {
      //   do save
      this.doSave();
    } else {
      //   go to next step
      this.nextStep(currentStep);
    }
  }

  goBack() {
    let wizardItemLabel;
    let currentStep = Number(this.state.openStep.replace("wizarditem-", ""));
    let previousStepId = `wizarditem-${currentStep - 1}`;
    if (currentStep !== this.state.numberOfWizardItems - 1) {
      this.state.isProcessComplete = false;
    }
    this.state.wizardItems.forEach(item => {
      if (item.id === this.state.openStep) {
        item.progressState = 0;
      }
      if (item.id === previousStepId) {
        item.progressState = 1;
        wizardItemLabel = item.label;
        this.state.openStep = item.id;
      }
    });

    this.state.items.forEach(item => {
      if (item.label === wizardItemLabel) {
        item.classList.remove(`${this.state.theme}-hide`);
        item.classList.add(`${this.state.theme}-show`);
      } else if (item.classList.contains(`${this.state.theme}-show`)) {
        item.classList.remove(`${this.state.theme}-show`);
        item.classList.add(`${this.state.theme}-hide`);
      }
    });
    this.decrementProgress();
  }

  nextStep(currentStep) {
    let wizardItemLabel;
    let nextStepId = `wizarditem-${currentStep + 1}`;
    if (currentStep === this.state.numberOfWizardItems - 1) {
      this.state.isProcessComplete = true;
    }
    this.state.wizardItems.forEach(item => {
      if (item.id === this.state.openStep) {
        item.progressState = 2;
      }
      if (item.id === nextStepId) {
        item.progressState = 1;
        wizardItemLabel = item.label;
        this.state.openStep = item.id;
      }
    });

    this.state.items.forEach(item => {
      if (item.label === wizardItemLabel) {
        item.classList.remove(`${this.state.theme}-hide`);
        item.classList.add(`${this.state.theme}-show`);
      } else if (item.classList.contains(`${this.state.theme}-show`)) {
        item.classList.remove(`${this.state.theme}-show`);
        item.classList.add(`${this.state.theme}-hide`);
      }
    });
    this.incrementProgress();
  }

  /**
   * @function - Called when all steps are complete and user saves.
   * Also fires pubsub event named "save", with the header as data.
   */
  doSave() {
    this.state.showSpinner = true;
    pubsub.fire(this.state.header, "save", {
      name: this.state.header
    });
    this.state.showWizard = false;
  }

  incrementProgress() {
    this.state.progress = this.state.progress + this.state.progressStep;
  }

  decrementProgress() {
    this.state.progress = this.state.progress - this.state.progressStep;
  }

  translatedLabels = {};

  connectedCallback() {
    this.translatedLabels = translatedLabels;
  }

  render() {
    if (this.theme === "nds") {
      return ndsTemplate;
    }
    return sldsTemplate;
  }

  renderedCallback() {
    if (this._isFirstRender) {
      // initialize all api variables
      if (this.header) {
        this.state.header = this.header;
      }
      this.state.theme = this.theme ? this.theme : "slds";

      this.state.items = this.querySelectorAll(".vlocity-wizard-item");
      this.state.numberOfWizardItems =
        this.state.items && this.state.items.length;
      if (this.state.items && this.state.items.length) {
        try {
          this.state.items.forEach((item, index) => {
            // if label is not defined throw error
            if (!item.label)
              throw new Error(translatedLabels.wizItemLabelMissingError);
            if (index === 0) {
              item.classList.add(`${this.state.theme}-show`);
            } else {
              item.classList.add(`${this.state.theme}-hide`);
            }
            this.state.wizardItems.push({
              id: "wizarditem-" + ++this.idGenerator,
              label: item.label,
              wizardItemId: item.wizardItemId,
              showStep: item.showStep,
              progressState: 0, //0 = not started, 1= active, 2= completed
              that: this,
              get isComplete() {
                return this.progressState === 2 ? true : false;
              },
              get progressClass() {
                let classList;
                if (this.progressState === 0) {
                  classList = `${this.that.state.theme}-progress__item`;
                } else if (this.progressState === 1) {
                  classList = `${this.that.state.theme}-progress__item ${this.that.state.theme}-is-active`;
                } else {
                  classList = `${this.that.state.theme}-progress__item ${this.that.state.theme}-is-completed`;
                }
                return classList;
              },
              get buttonClass() {
                return this.progressState === 2
                  ? `${this.that.state.theme}-button ${this.that.state.theme}-button_icon ${this.that.state.theme}-progress__marker ${this.that.state.theme}-progress__marker_icon`
                  : `${this.that.state.theme}-button ${this.that.state.theme}-progress__marker`;
              }
            });
          });
          // set the first step as active
          if (this.state.wizardItems && this.state.wizardItems.length) {
            this.state.wizardItems[0].progressState = 1;
            this.state.openStep = this.state.wizardItems[0].id;
          }
          this.state.progressStep =
            Math.round(
              (100 / (this.state.items.length - 1)) * 100 + Number.EPSILON
            ) / 100;
        } catch (error) {
          this.errorCallback(error);
        }
      }
      this._isFirstRender = false;
    }
  }

  showErrorToast = (title, message, type) => {
    let elem = this.template.querySelector("c-toast");
    elem.message = message;
    elem.styletype = type ? type : "success";
    elem.duration = type === "error" ? "5000" : "3000";
    elem.title = title;
    elem.classList.remove(`${this.state.theme}-hide`);
    elem.show();
  };

  errorCallback(error) {
    this.state.showWizard = false;
    this.showErrorToast(
      translatedLabels.errorToastTitle,
      error.message,
      "error"
    );
  }
}
