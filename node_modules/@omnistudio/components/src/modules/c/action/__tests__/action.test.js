/*************************************************************************
 *
 * VLOCITY, INC. CONFIDENTIAL
 * __________________
 *
 *  [2014] - [2020] Vlocity, Inc.
 *  All Rights Reserved.
 *
 * NOTICE:  All information contained herein is, and remains
 * the property of Vlocity, Inc. and its suppliers,
 * if any. The intellectual and technical concepts contained
 * herein are proprietary to Vlocity, Inc. and its suppliers and may be
 * covered by U.S. and Foreign Patents, patents in process, and are
 * protected by trade secret or copyright law. Dissemination of this
 * information and reproduction, modification or reverse-engineering
 * of this material, is prohibited unless prior written permission
 * is obtained from Vlocity, Inc.
 *
 * Build: v234.0.0
 */
import { createElement } from "lwc";
import Action from "c/action";
import mockData from "./data/mockData.json";

describe("c-action", () => {
  afterEach(() => {
    while (document.body.firstChild) {
      document.body.removeChild(document.body.firstChild);
    }
  });

  it("renders DOM elements", () => {
    const element = createElement("c-action", {
      is: Action
    });
    element.debug = "true";
    document.body.appendChild(element);
    expect(element.shadowRoot.children).not.toHaveLength(0);
  });

  it("checks if theme is set", () => {
    const element = createElement("c-action", {
      is: Action
    });
    element.theme = "nds";
    element.debug = "true";
    document.body.appendChild(element);
    const button = element.shadowRoot.querySelector("div");
    let index = button.className.indexOf("nds") !== -1 ? true : false;
    expect(index).toBe(true);
  });

  it("Check if action fetching data", () => {
    var onResult = function(data) {
      expect(data).not.toBe(undefined);
    };

    const element = createElement("c-action", {
      is: Action
    });
    element.addEventListener("data", onResult);
    const value =
      '{ "type": "query", "value": {"query": "Select Name from Account Limit 1", "defaultData": ' +
      JSON.stringify(mockData.query) +
      " }}";
    element.definition = value;
    document.body.appendChild(element);
    element.triggerAction();
  });

  it("Check if action url gets interpolated with data", () => {
    const element = createElement("c-action", {
      is: Action
    });
    const value =
      '{"data": {"Id": "001B000000qBQXDIA4"},"url": "/${data.Id}", "navigation" : "false"}';
    element.definition = value;
    document.body.appendChild(element);
    element.triggerAction();
    return Promise.resolve().then(() => {
      expect(element.url).toBe("/001B000000qBQXDIA4");
    });
  });

  it("Check if action url gets interpolated with datasource", () => {
    const element = createElement("c-action", {
      is: Action
    });
    // eslint-disable-next-line no-unused-vars
    var onResult = function(data) {
      expect(element.url).not.toBe(undefined);
    };
    element.addEventListener("data", onResult);
    const value =
      '{ "datasource" : { "type": "query" ,"value": {"query": "Select Id,Name from Account Limit 1", "defaultData": ' +
      JSON.stringify(mockData.query) +
      ' }},"url": "/${data[0].Id}", "navigation" : "false"}';
    element.definition = value;
    document.body.appendChild(element);
    element.triggerAction();
  });
});
