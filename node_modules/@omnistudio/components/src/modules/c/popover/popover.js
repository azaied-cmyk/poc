/*************************************************************************
 *
 * VLOCITY, INC. CONFIDENTIAL
 * __________________
 *
 *  [2014] - [2020] Vlocity, Inc.
 *  All Rights Reserved.
 *
 * NOTICE:  All information contained herein is, and remains
 * the property of Vlocity, Inc. and its suppliers,
 * if any. The intellectual and technical concepts contained
 * herein are proprietary to Vlocity, Inc. and its suppliers and may be
 * covered by U.S. and Foreign Patents, patents in process, and are
 * protected by trade secret or copyright law. Dissemination of this
 * information and reproduction, modification or reverse-engineering
 * of this material, is prohibited unless prior written permission
 * is obtained from Vlocity, Inc.
 *
 * Build: v234.0.0
 */
import { LightningElement, api, track } from "lwc";
import sldsTemplate from "./popover_slds.html";
import ndsTemplate from "./popover_nds.html";
import { isRtl } from "c/utility";

export default class Popover extends LightningElement {
  @api theme = "slds";
  @api title = "";
  @api size;
  @api height;
  @api iconUrl;
  @api set nubbinposition(val) {
    this._nubbinposition = val;
  }
  get nubbinposition() {
    return this._nubbinposition || "top-left";
  }
  @api header;
  @api footer;
  @api variant;
  @api showclosebutton;
  @api show;
  direction;

  @track _nubbinposition = "top-left";

  connectedCallback() {
    this.direction = isRtl();
    this._nubbinposition =
      this.direction === "rtl" ? "top-right" : this.nubbinposition;
  }

  render() {
    if (this.theme === "nds") {
      return ndsTemplate;
    }
    return sldsTemplate;
  }

  get popoverClass() {
    let popoverCls = `${this.theme}-popover`;
    popoverCls += ` ${this.theme}-nubbin_${this.nubbinposition}`;
    if (this.variant) {
      popoverCls += ` ${this.theme}-popover_${this.variant}`;
    }
    if (this.size) {
      popoverCls += ` ${this.theme}-popover_${this.size}`;
    }
    if (!(this.show === "true" || this.show === true)) {
      popoverCls += ` ${this.theme}-hide`;
    }
    return popoverCls;
  }

  @api
  closePopover(e) {
    let relatedTarget = e.relatedTarget ? e.relatedTarget.nodeName : "";
    let target = e.target.nodeName;
    if (
      relatedTarget !== "C-ICON" ||
      relatedTarget !== "C-POPOVER" ||
      target === "C-BUTTON"
    )
      this.template
        .querySelector("section")
        .classList.add(`${this.theme}-hide`);
  }
  @api
  openPopover() {
    this.template
      .querySelector("section")
      .classList.remove(`${this.theme}-hide`);
  }
}
