/*************************************************************************
 *
 * VLOCITY, INC. CONFIDENTIAL
 * __________________
 *
 *  [2014] - [2020] Vlocity, Inc.
 *  All Rights Reserved.
 *
 * NOTICE:  All information contained herein is, and remains
 * the property of Vlocity, Inc. and its suppliers,
 * if any. The intellectual and technical concepts contained
 * herein are proprietary to Vlocity, Inc. and its suppliers and may be
 * covered by U.S. and Foreign Patents, patents in process, and are
 * protected by trade secret or copyright law. Dissemination of this
 * information and reproduction, modification or reverse-engineering
 * of this material, is prohibited unless prior written permission
 * is obtained from Vlocity, Inc.
 *
 * Build: v234.0.0
 */
import dayjs from "c/dayjs";
import { default as isDate } from "./isDate";

const ISOPattern = /^(\d{4})-(\d\d)-(\d\d)(?:T(\d\d):(\d\d):(\d\d).(\d{3})Z)?$/;

let isValidDate = function(obj) {
  return isDate(obj) && !isNaN(obj.getTime());
};

let dateValueParser = function(val, format) {
  if (isDate(val) || val instanceof Number) {
    return new Date(val);
  }
  let result = val.match(ISOPattern);
  if (result) {
    result = new Date(val);
    if (result.toISOString() === val) {
      return result;
    }
  }
  result = dayjs(val);
  if (result && !isValidDate(result.toDate())) {
    result = dayjs(val, format);
  }
  if (result) return result.toDate();
  return null;
};

let parseValue = function(value, format) {
  let date;
  try {
    if (value == null || value === "") {
      date = null;
    } else {
      date = dateValueParser(value, format);
    }
  } catch (e) {
    console.error(e);
  }
  return date;
};

function setValue(value, dateFormat) {
  value = parseValue(value, dateFormat);
  dateFormat = dateFormat ? dateFormat : "YYYY-MM-DD";
  if (isValidDate(value)) {
    return dayjs(value).format(dateFormat);
  }
  return null;
}
export default setValue;
export { dateValueParser };
