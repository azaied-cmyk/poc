/*************************************************************************
 *
 * VLOCITY, INC. CONFIDENTIAL
 * __________________
 *
 *  [2014] - [2020] Vlocity, Inc.
 *  All Rights Reserved.
 *
 * NOTICE:  All information contained herein is, and remains
 * the property of Vlocity, Inc. and its suppliers,
 * if any. The intellectual and technical concepts contained
 * herein are proprietary to Vlocity, Inc. and its suppliers and may be
 * covered by U.S. and Foreign Patents, patents in process, and are
 * protected by trade secret or copyright law. Dissemination of this
 * information and reproduction, modification or reverse-engineering
 * of this material, is prohibited unless prior written permission
 * is obtained from Vlocity, Inc.
 *
 * Build: v234.0.0
 */
import getDataHandler from "./dataHandler";
import { namespace } from "./namespace";
import { fetchUserContext, datasource } from "c/salesforceUtils";
import { loadScript } from "lightning/platformResourceLoader";
let sdkFactory = {};
let isScriptLoaded;
function getDatasourceSDK(url, sessionId, requestData) {
  let dataSourceConfig = null;
  return getDataHandler(JSON.stringify(requestData))
    .then(data => {
      dataSourceConfig = window.VlocitySDK.datasource.createConfigForDatasourceUser(
        url,
        sessionId,
        data
      );
      sdkFactory[namespace] = window.VlocitySDK.datasource.getInstance(
        dataSourceConfig
      );
      sdkFactory[namespace].config.inPlatformData = data;
      return sdkFactory[namespace];
    })
    .catch(e => {
      throw new Error(`Error:`, e);
    });
}
function fetchUserDetails() {
  let userContext = null;
  return fetchUserContext()
    .then(response => {
      userContext = JSON.parse(response);
      return userContext;
    })
    .catch(e => {
      throw new Error(`Error:`, e);
    });
}
export function getSDKInstance(requestData, context) {
  if (sdkFactory[namespace]) {
    return getDataHandler(JSON.stringify(requestData)).then(data => {
      sdkFactory[namespace].config.inPlatformData = data;
      return sdkFactory[namespace];
    });
  }
  return loadDatasource(context).then(response => {
    return getDatasourceSDK(response.url, response.sessionId, requestData);
  });
}

function loadDatasource(context) {
  if (!isScriptLoaded) {
    isScriptLoaded = loadScript(
      context,
      datasource + "/latest/datasource/datasource.sdk.js"
    )
      .then(() => {
        return fetchUserDetails().then(response => {
          return Promise.resolve({
            url: response.salesforceURL,
            sessionId: response.sessionId
          });
        });
      })
      .catch(e => {
        throw new Error(`Error:`, e);
      });
    return isScriptLoaded;
  }
  return isScriptLoaded;
}
