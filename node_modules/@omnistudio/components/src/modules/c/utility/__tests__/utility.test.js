/*************************************************************************
 *
 * VLOCITY, INC. CONFIDENTIAL
 * __________________
 *
 *  [2014] - [2020] Vlocity, Inc.
 *  All Rights Reserved.
 *
 * NOTICE:  All information contained herein is, and remains
 * the property of Vlocity, Inc. and its suppliers,
 * if any. The intellectual and technical concepts contained
 * herein are proprietary to Vlocity, Inc. and its suppliers and may be
 * covered by U.S. and Foreign Patents, patents in process, and are
 * protected by trade secret or copyright law. Dissemination of this
 * information and reproduction, modification or reverse-engineering
 * of this material, is prohibited unless prior written permission
 * is obtained from Vlocity, Inc.
 *
 * Build: v234.0.0
 */
import { formatCurrency, inputMask, dateMask, dynamicSort } from "c/utility";

describe("utility", () => {
  afterEach(() => {
    while (document.body.firstChild) {
      document.body.removeChild(document.body.firstChild);
    }
  });

  it("formats currency using Intl.NumberFormat", () => {
    expect(
      formatCurrency(123456.789, { anlocale: "en-US", money: "USD" })
    ).toBe("$123,456.79");
  });

  /**
   * "Check If input "###-###-###" mask is set"
   */
  it("Check If input ###-###-### mask is set", () => {
    let value = inputMask("12345678965", "###-###-###");
    expect(value).toBe("12-345-678-965");
  });

  /**
   * "Check If input +7(###)###-##-## mask is set"
   */
  it("Check If input +7(###)###-##-## mask is set", () => {
    let value = inputMask("1234567896465645", "+7(###)###-##-##", 10);
    expect(value).toBe("+7(123)456-78-96");
  });

  /**
   * "Check If input ### ### ### mask is set"
   */
  it("Check If input ### ### ### mask is set", () => {
    let value = inputMask("12345678965", "### ### ###", "5");
    expect(value).toBe("12 345");
  });

  /**
   * "Check If input $### ### mask is set"
   */
  it("Check If input $### ### mask is set", () => {
    let value = inputMask("12345678965", "$### ###");
    expect(value).toBe("$12 345 678 965");
  });

  /**
   * "Check If input $###,### mask is set"
   */
  it("Check If input $###,### mask is set", () => {
    let value = inputMask("12345678965", "$###,###");
    expect(value).toBe("$12,345,678,965");
  });

  /**
   * "Check If input ##-####### mask is set"
   */
  it("Check If input ##-####### mask is set", () => {
    let value = inputMask("12345678965", "##-#######", "9");
    expect(value).toBe("12-3456789");
  });

  /**
   * "Check If input (###) ###-#### mask is set"
   */
  it("Check If input (###) ###-#### mask is set", () => {
    let value = inputMask("12345678965", "(###) ###-####", "10");
    expect(value).toBe("(123) 456-7896");
  });

  /**
   * "Check If input ###,### mask is set"
   */
  it("Check If input ###,### mask is set", () => {
    let value = inputMask("12345678965", "###,###");
    expect(value).toBe("12,345,678,965");
  });

  /**
   * "Check If input ## mask is set"
   */
  it("Check If input ## mask is set", () => {
    let value = inputMask("12345678965", "##", "2");
    expect(value).toBe("12");
  });

  /**
   * "Check If input dd-mm-yyyy mask is set"
   */
  it("Check If input dd-mm-yyyy mask is set", () => {
    let target = {
      dataset: {
        inputmask: "dd-mm-yyyy"
      },
      value: "13101993"
    };
    let event = {
      target: target,
      key: ""
    };
    let value = dateMask("13101993", "dd-mm-yyyy", event);
    expect(value).toBe("13-10-1993");
  });

  /**
   * "Check If input yyyy/mm/dd mask is set"
   */
  it("Check If input yyyy/mm/dd mask is set", () => {
    let target = {
      dataset: {
        inputmask: "yyyy/mm/dd"
      },
      value: "19931013"
    };
    let event = {
      target: target,
      key: ""
    };
    let value = dateMask("19931013", "yyyy/mm/dd", event);
    expect(value).toBe("1993/10/13");
  });

  it("sorts array based on field", () => {
    let testArray = [{ name: "John" }, { name: "Ane" }, { name: "Zack" }];
    let testArraySorted = [{ name: "Ane" }, { name: "John" }, { name: "Zack" }];
    let sortedArray = testArray.sort(dynamicSort("name"));
    expect(testArraySorted).toEqual(sortedArray);
  });
});
