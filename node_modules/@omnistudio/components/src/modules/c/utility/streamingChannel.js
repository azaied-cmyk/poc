/*************************************************************************
 *
 * VLOCITY, INC. CONFIDENTIAL
 * __________________
 *
 *  [2014] - [2020] Vlocity, Inc.
 *  All Rights Reserved.
 *
 * NOTICE:  All information contained herein is, and remains
 * the property of Vlocity, Inc. and its suppliers,
 * if any. The intellectual and technical concepts contained
 * herein are proprietary to Vlocity, Inc. and its suppliers and may be
 * covered by U.S. and Foreign Patents, patents in process, and are
 * protected by trade secret or copyright law. Dissemination of this
 * information and reproduction, modification or reverse-engineering
 * of this material, is prohibited unless prior written permission
 * is obtained from Vlocity, Inc.
 *
 * Build: v234.0.0
 */
import {
  subscribe,
  unsubscribe,
  onError,
  setDebugFlag,
  isEmpEnabled
} from "lightning/empApi";
let subscription;
let isRendered;

let subscribeEMP = (channelName, replayId, callback, debugFlag) => {
  if (!isRendered) {
    isRendered = true;
    // Uncomment below line to enable debug logging (optional)
    if (debugFlag) setDebugFlag(true);
    // Invoke onError empApi method
    onError(error => {
      console.error("Received error from server: ", JSON.stringify(error));
      // Error contains the server-side error
    });
  }
  isEmpEnabled().then(val => {
    if (!val) console.error("LWC Emp api is not supported in this platform");
  });
  if (!subscription) {
    subscribe(channelName, replayId, callback).then(response => {
      // Response contains the subscription information on successful subscribe call
      // eslint-disable-next-line no-console
      console.log(
        "Successfully subscribed to : ",
        JSON.stringify(response.channel)
      );
      subscription = response;
    });
  }
};

let unsubscribeEMP = () => {
  return new Promise((resolve, reject) => {
    if (subscription) {
      unsubscribe(subscription, response => {
        // eslint-disable-next-line no-console
        console.log("unsubscribe() response: ", JSON.stringify(response));
        subscription = null;
        // Response is true for successful unsubscribe
        resolve(response);
      });
    } else {
      reject();
    }
  });
};

export { subscribeEMP, unsubscribeEMP };
