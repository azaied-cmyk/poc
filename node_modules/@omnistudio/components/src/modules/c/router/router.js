/*************************************************************************
 *
 * VLOCITY, INC. CONFIDENTIAL
 * __________________
 *
 *  [2014] - [2020] Vlocity, Inc.
 *  All Rights Reserved.
 *
 * NOTICE:  All information contained herein is, and remains
 * the property of Vlocity, Inc. and its suppliers,
 * if any. The intellectual and technical concepts contained
 * herein are proprietary to Vlocity, Inc. and its suppliers and may be
 * covered by U.S. and Foreign Patents, patents in process, and are
 * protected by trade secret or copyright law. Dissemination of this
 * information and reproduction, modification or reverse-engineering
 * of this material, is prohibited unless prior written permission
 * is obtained from Vlocity, Inc.
 *
 * Build: v234.0.0
 */
import { api, LightningElement } from "lwc";
import { delay } from "c/asyncUtils";

/**
 * The router component can be used in off-platform scenarios where the author would like to build a
 * Single Page Application (SPA). The router component leverages the LWC directive `lwc:dynamic` to dynamically
 * load components during run time. The router component enables navigation between those dynamic components by
 * listening to events being sent by navigate actions, and omniscript navigate actions.
 *
 * NOTE: The router component may NOT be used on the salesforce platform
 * due to the lack of support for the `lwc:dynamic` directive.
 *
 * @example
 * ``` HTML
 * <ns-router
 *     route-config={routeConfig}
 *     redirects={redirects}>
 * </ns-router
 * ```
 * ```JS
 * routeConfig = new Map([
 *    ['/', { title: 'Home', load: () => import('cmp/homeComponent') }],
 *    ['/', { title: 'About Us', load: () => import('cmp/aboutComponent')]
 *    ['*', { title: '404', load: () => import('cmp/notFound') }]
 * ]);
 *
 * redirects = new Map();
 * ```
 *
 * @module ns/router
 * @typicalName Router
 * @extends LightningElement
 */
export default class Router extends LightningElement {
  /**
   * A key-value collection where the key represents the URL pathName, and the value
   * is a RouteConfig object.
   *
   * The routeConfig attribute is the primary entry point for configuring the router component, and is required.
   *
   * @example
   * ``` JS
   *  new Map([
   *    // NOTE: The value passed to `import` MUST be a string literal.
   *    ['/home', { title: 'Home', load: () => import('cmp/home') }]
   *  ]);
   * ```
   *
   * @type {Map<string, RouteConfig>}
   * @required
   */
  @api routeConfig;

  /**
   * A key-value collection where the key represents an existing URL, and the value
   * represents the URL it will be re-mapped to.
   *
   * @example
   * ``` JS
   * new Map([
   *   ['/old-route', '/renamed-route']
   * ])
   * ```
   *
   * @type {Map<string, string>}
   * @required
   */
  @api redirects;

  /**
   * The most recent, successfully loaded route.
   * @type {string}
   */
  currentRoute;

  /**
   * This is they dynamic component constructor utilized by the lwc:dynamic LWC directive.
   * @type {LightningElement}
   */
  dynamicComponent;

  /**
   * Flag used to show expected error messages.
   * @type {boolean}
   */
  isErrorState = false;

  /**
   * Flag used to indicate loading state.
   * @type {boolean}
   */
  isLoading = false;

  /**
   * Private setter used to update the document title, when there is a value.
   * @param {string} value
   */
  set title(value) {
    if (value) document.title = value;
  }

  connectedCallback() {
    this.loadRoute(window.location.pathname);

    window.addEventListener("popstate", () => {
      this.loadRoute(window.location.pathname);
    });
  }

  /**
   * Responsible for loading configured routes, and redirects. Fires custom events, `loadstart`, and `loadend`.
   * @param {string} route
   */
  loadRoute(route) {
    this.isLoading = true;
    delay(300).then(() => {
      if (this.isLoading) this.dispatchEvent(new CustomEvent("loadstart"));
    });
    // Check for redirects
    let redirect = this.redirects.get(route);

    if (!redirect) {
      for (let path of this.redirects.keys()) {
        if (
          path.indexOf("*") > 0 &&
          new RegExp(path.replace("*", ".*")).test(route)
        ) {
          redirect = this.redirects.get(path);
          break;
        }
      }
    }

    if (redirect) {
      history.replaceState(null, null, `${redirect}${location.search}`);
      return this.loadRoute(redirect);
    }

    return new Promise(resolve => {
      let config = this.routeConfig.get(route);

      if (!config) {
        for (let path of this.routeConfig.keys()) {
          if (
            path.indexOf("*") > 0 &&
            new RegExp(path.replace("*", ".*")).test(route)
          ) {
            config = this.routeConfig.get(path);
            break;
          }
        }
      }

      if (!config) config = this.routeConfig.get("*");

      resolve(config);
    })
      .then(config => {
        if (config === undefined || typeof config.load !== "function")
          throw new Error("404");
        return Promise.all([config.load(), Promise.resolve(config)]);
      })
      .then(routeInfo => {
        const [component, config] = routeInfo;
        this.title = config.title;
        this.dynamicComponent = component.default;
        this.isErrorState = false;
        this.currentRoute = location.pathname;
      })
      .catch(reason => {
        return this.handleError(reason);
      })
      .finally(() => {
        this.isLoading = false;
        if (this.isLoading) this.dispatchEvent(new CustomEvent("loadend"));
      });
  }

  /**
   * Handler for the routechange event fired from lightning/navigation mixin.
   * @param {RouteChangeEvent} evt
   */
  @api routeChange(evt) {
    if (this.currentRoute === location.pathname) return;

    this.loadRoute(location.pathname).then(() => {
      if (this.childRouter) this.childRouter.routeChange();
    });
  }

  /**
   * Handler for unexpected errors.
   * @param {Error} err
   */
  handleError(err) {
    console.error(err);
    this.isErrorState = true;
    this.errorMessage = err.message;
  }
}
