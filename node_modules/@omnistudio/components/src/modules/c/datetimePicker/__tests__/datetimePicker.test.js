/*************************************************************************
 *
 * VLOCITY, INC. CONFIDENTIAL
 * __________________
 *
 *  [2014] - [2020] Vlocity, Inc.
 *  All Rights Reserved.
 *
 * NOTICE:  All information contained herein is, and remains
 * the property of Vlocity, Inc. and its suppliers,
 * if any. The intellectual and technical concepts contained
 * herein are proprietary to Vlocity, Inc. and its suppliers and may be
 * covered by U.S. and Foreign Patents, patents in process, and are
 * protected by trade secret or copyright law. Dissemination of this
 * information and reproduction, modification or reverse-engineering
 * of this material, is prohibited unless prior written permission
 * is obtained from Vlocity, Inc.
 *
 * Build: v234.0.0
 */
// eslint-disable-next-line eslint-comments/disable-enable-pair
/* eslint-disable no-unused-vars */
import { createElement } from "lwc";
import VlocityDatetimePicker from "c/datetimePicker";
import cmpDayJsLocaleFormats from "@salesforce/label/c.cmpDayJsLocaleFormats";
import cmpLocaleFormatsInvalid from "@salesforce/label/c.cmpLocaleFormatsInvalid";

jest.mock(
  "@salesforce/label/c.cmpDayJsLocaleFormats",
  () => {
    return {
      default:
        '{"name":"en","weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"months":["January","February","March","April","May","June","July","August","September","October","November","December"]}'
    };
  },
  { virtual: true }
);

jest.mock(
  "@salesforce/label/c.cmpLocaleFormatsInvalid",
  () => {
    return {
      default:
        'Unable to render due to invalid localeFormat. Please provide a valid localeFormat in the form of {"name":"en","weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"months":["January","February","March","April","May","June","July","August","September","October","November","December"]}'
    };
  },
  { virtual: true }
);

describe("c-datetime-picker", () => {
  afterEach(() => {
    while (document.body.firstChild) {
      document.body.removeChild(document.body.firstChild);
    }
  });

  it("renders DOM elements", () => {
    const element = createElement("c-datetime-picker", {
      is: VlocityDatetimePicker
    });
    element.label = "Datetime Picker";
    document.body.appendChild(element);
    expect(element.shadowRoot.children).not.toHaveLength(0);
  });

  /**
   * Check if the theme is applied properly
   */
  it("Check if theme is set", () => {
    const element = createElement("c-datetime-picker", {
      is: VlocityDatetimePicker
    });
    element.label = "Datetime Picker";
    element.theme = "nds";
    document.body.appendChild(element);
    const el = element.shadowRoot.querySelector("div");
    let index = el.className.indexOf("nds") !== -1 ? true : false;
    expect(index).toBe(true);
  });

  /* Check if label is set */
  it("Check If label is set", () => {
    const element = createElement("c-datetime-picker", {
      is: VlocityDatetimePicker
    });
    element.label = "Datetime Picker";
    element.dateLabel = "date";
    element.timeLabel = "time";
    document.body.appendChild(element);
    const label = element.shadowRoot.querySelector("label");
    const dEl = element.shadowRoot.querySelector("c-date-picker");
    const tEl = element.shadowRoot.querySelector("c-time-picker");
    expect(label.textContent).toBe("Datetime Picker");
    expect(dEl.label).toBe("date");
    expect(tEl.label).toBe("time");
  });

  /*Check if the min is set*/
  it("Check If min is set", () => {
    const element = createElement("c-datetime-picker", {
      is: VlocityDatetimePicker
    });
    element.label = "Datetime Picker";
    element.dateLabel = "date";
    element.timeLabel = "time";
    element.min = "2019-04-12T01:15:00";
    document.body.appendChild(element);
    return Promise.resolve().then(() => {
      return new Promise(function(resolve) {
        // eslint-disable-next-line @lwc/lwc/no-async-operation
        setTimeout(() => {
          const dEl = element.shadowRoot.querySelector("c-date-picker");
          expect(dEl.min).toBe("4/12/2019");
          resolve();
        }, 10);
      });
    });
  });

  /*Check if the max is set*/
  it("Check If max is set", () => {
    const element = createElement("c-datetime-picker", {
      is: VlocityDatetimePicker
    });
    element.label = "Datetime Picker";
    element.dateLabel = "date";
    element.timeLabel = "time";
    element.max = "2019-04-12T01:15:00";
    document.body.appendChild(element);
    return Promise.resolve().then(() => {
      return new Promise(function(resolve) {
        // eslint-disable-next-line @lwc/lwc/no-async-operation
        setTimeout(() => {
          const dEl = element.shadowRoot.querySelector("c-date-picker");
          expect(dEl.max).toBe("4/12/2019");
          resolve();
        }, 10);
      });
    });
  });

  /*Check if the value is set*/
  it("Check If value is set", () => {
    const element = createElement("c-datetime-picker", {
      is: VlocityDatetimePicker
    });
    element.label = "Datetime Picker";
    element.dateLabel = "date";
    element.timeLabel = "time";
    element.outputType = "date";
    let val = new Date("1970/1/1").toISOString();
    element.value = val;
    document.body.appendChild(element);
    const El = element;
    expect(El.value).toEqual(new Date(val));
  });

  /*Check if current date and time displays current date and time*/
  it("Check if current date and time displays current date and time", () => {
    const element = createElement("c-datetime-picker", {
      is: VlocityDatetimePicker
    });
    element.label = "Datetime Picker";
    element.dateLabel = "date";
    element.timeLabel = "time";

    // simulates when a user selects the Today button on the date time picker
    const currentDate = new Date();
    element.value = currentDate;
    document.body.appendChild(element);

    const tEl = element.shadowRoot.querySelector("c-time-picker");
    const dEl = element.shadowRoot.querySelector("c-date-picker");

    // check to ensure the date is the same as the current date
    expect(dEl.value.getMonth()).toEqual(currentDate.getMonth());
    expect(dEl.value.getDate()).toEqual(currentDate.getDate());
    expect(dEl.value.getFullYear()).toEqual(currentDate.getFullYear());

    // check to ensure the time hours and minutes values are the same as the current time
    expect(tEl.value.getHours()).toEqual(currentDate.getHours());
    expect(tEl.value.getMinutes()).toEqual(currentDate.getMinutes());
  });
  it("Check if  date and time with expected format is displayed MM/DD/YYYY", () => {
    const element = createElement("c-datetime-picker", {
      is: VlocityDatetimePicker
    });
    const currentDate = new Date();
    element.label = "Datetime Picker";
    element.outputFormat = "MM/DD/YYYY";
    element.value = currentDate;
    document.body.appendChild(element);
    const dEl = element.shadowRoot.querySelector("c-date-picker");

    // check to ensure the date is the same as the current date
    expect(dEl.value.getMonth()).toEqual(currentDate.getMonth());
    expect(dEl.value.getDate()).toEqual(currentDate.getDate());
    expect(dEl.value.getFullYear()).toEqual(currentDate.getFullYear());
  });
  it("Check if  date and time with expected format is displayed DD-MM-YYYY", () => {
    const element = createElement("c-datetime-picker", {
      is: VlocityDatetimePicker
    });
    const currentDate = new Date();
    element.label = "Datetime Picker";
    element.outputFormat = "DD-MM-YYYY";
    element.value = currentDate;
    document.body.appendChild(element);
    const dEl = element.shadowRoot.querySelector("c-date-picker");

    // check to ensure the date is the same as the current date
    expect(dEl.value.getMonth()).toEqual(currentDate.getMonth());
    expect(dEl.value.getDate()).toEqual(currentDate.getDate());
    expect(dEl.value.getFullYear()).toEqual(currentDate.getFullYear());
  });
});
