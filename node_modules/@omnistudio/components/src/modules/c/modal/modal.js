/*************************************************************************
 *
 * VLOCITY, INC. CONFIDENTIAL
 * __________________
 *
 *  [2014] - [2020] Vlocity, Inc.
 *  All Rights Reserved.
 *
 * NOTICE:  All information contained herein is, and remains
 * the property of Vlocity, Inc. and its suppliers,
 * if any. The intellectual and technical concepts contained
 * herein are proprietary to Vlocity, Inc. and its suppliers and may be
 * covered by U.S. and Foreign Patents, patents in process, and are
 * protected by trade secret or copyright law. Dissemination of this
 * information and reproduction, modification or reverse-engineering
 * of this material, is prohibited unless prior written permission
 * is obtained from Vlocity, Inc.
 *
 * Build: v234.0.0
 */
import { LightningElement, api } from "lwc";
import sldsTemplate from "./modal_slds.html";
import ndsTemplate from "./modal_nds.html";

export default class VlocityModal extends LightningElement {
  @api theme = "slds";
  @api title;
  @api size;
  @api height;
  @api isModalOpen;
  @api extraclass;
  @api iconUrl = window.location.hostname === "localhost" ? "/static/slds" : "";
  @api hideclosebutton = false;
  @api hideheader;
  @api hidefooter;
  @api extraHeaderClass;
  @api extraFooterClass;
  @api minHeight;
  @api maxHeight;
  @api modalBackdropStyle;

  _firstRender = false;
  isHeightSet = false; // isHeightSet - this flag is used to set the height of the modal at first render

  render() {
    if (this.theme === "nds") {
      return ndsTemplate;
    }
    return sldsTemplate;
  }

  renderedCallback() {
    let ele = this.template.querySelector("div");
    const backdrop = this.template.querySelector(".slds-backdrop");
    if (this.modalBackdropStyle && backdrop && !this.rendered) {
      backdrop.style = this.modalBackdropStyle;
      this.rendered = true;
    }
    if (ele && !this._firstRender && this.isModalOpen) {
      ele.style.display = "block";
      this._firstRender = true;
    }

    const contentELe = this.template.querySelector(
      `.${this.theme}-modal__content`
    );
    if (contentELe && !this.isHeightSet) {
      if (this.height)
        contentELe.style.height = /^[0-9]+$/.test(this.height)
          ? this.height + "px"
          : this.height;
      else if (this.minHeight || this.maxHeight) {
        if (this.minHeight)
          contentELe.style.minHeight = /^[0-9]+$/.test(this.minHeight)
            ? this.minHeight + "px"
            : this.minHeight;
        if (this.maxHeight)
          contentELe.style.maxHeight = /^[0-9]+$/.test(this.maxHeight)
            ? this.maxHeight + "px"
            : this.maxHeight;
      } else contentELe.style.height = "auto";

      this.isHeightSet = true;
    }
  }

  get getModalClasses() {
    let modalClass = `${this.theme}-modal ${this.theme}-fade-in-open`;
    if (this.size) {
      modalClass += ` ${this.theme}-modal_${this.size}`;
    }
    if (this.extraclass) {
      modalClass += ` ${this.extraclass}`;
    }
    return modalClass;
  }

  get headerClasses() {
    let headerClass =
      `${this.theme}-modal__header ` +
      (this.extraHeaderClass ? this.extraHeaderClass : "");
    if (this.hideheader) {
      headerClass += ` ${this.theme}-modal__header_empty`;
    }
    return headerClass;
  }

  get footerClasses() {
    let footerClass =
      `${this.theme}-modal__footer ` +
      (this.extraFooterClass ? this.extraFooterClass : "");
    return footerClass;
  }

  fireEvent(eventName, data) {
    const selectedEvent = new CustomEvent(eventName, { detail: data });
    this.dispatchEvent(selectedEvent);
  }

  @api
  closeModal() {
    this.template.querySelector("div").style.display = "none";
    this.fireEvent("close", {});
  }
  @api
  openModal() {
    this.template.querySelector("div").style.display = "block";
    this.fireEvent("open", {});
  }
}
