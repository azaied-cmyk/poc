/*************************************************************************
 *
 * VLOCITY, INC. CONFIDENTIAL
 * __________________
 *
 *  [2014] - [2020] Vlocity, Inc.
 *  All Rights Reserved.
 *
 * NOTICE:  All information contained herein is, and remains
 * the property of Vlocity, Inc. and its suppliers,
 * if any. The intellectual and technical concepts contained
 * herein are proprietary to Vlocity, Inc. and its suppliers and may be
 * covered by U.S. and Foreign Patents, patents in process, and are
 * protected by trade secret or copyright law. Dissemination of this
 * information and reproduction, modification or reverse-engineering
 * of this material, is prohibited unless prior written permission
 * is obtained from Vlocity, Inc.
 *
 * Build: v234.0.0
 */
import { LightningElement, api, track } from "lwc";

export default class Carousel extends LightningElement {
  @api mode = "dots";
  @api interval;
  _arrow;
  @api
  get arrow() {
    return this._arrow;
  }
  set arrow(arrow) {
    if (typeof arrow === "string") {
      arrow = arrow === "true";
    }
    this._arrow = arrow;
  }

  @api thumbnaillimit;
  @api iconUrl;
  @api extraclass = "";
  @track isPaused;
  @track currentIndex = 0;
  @track isSelector = true;
  @track carouselItems = [];
  @track theme = "slds";
  carouselIndex = 0;
  timer;

  renderedCallback() {
    let elemIndex = 0;
    if (this.carouselItems.length === 0) {
      while (this.querySelector(`*:nth-child(${elemIndex + 1})`)) {
        let elem = this.querySelector(`*:nth-child(${elemIndex + 1})`);
        this.carouselItems.push({
          key: this.uniqueKey(),
          header: elem.header,
          src: elem.src,
          description: elem.description,
          alternativeText: elem.alternativeText,
          href: elem.href,
          thumbnail: elem.thumbnail
        });
        elemIndex++;
      }
      if (!this.timer && this.interval) {
        this.setTimer();
      }
      if (this.mode !== "dots") {
        this.isSelector = false;
      }
    }
  }

  setTimer() {
    this.clearTimer();
    this.isPaused = false;
    // eslint-disable-next-line @lwc/lwc/no-async-operation
    this.timer = window.setInterval(() => {
      if (this.currentIndex >= this.carouselItems.length - 1) {
        this.currentIndex = -1;
      }
      this.carouselIndex = 0;
      this.currentIndex++;
    }, this.interval);
  }

  clearTimer() {
    if (this.timer) {
      window.clearInterval(this.timer);
    }
    this.timer = null;
    this.carouselIndex = 0;
    this.isPaused = true;
  }

  toggleTimer() {
    if (this.isPaused) {
      this.setTimer();
    } else {
      this.clearTimer();
    }
  }

  uniqueKey() {
    return Date.now() + "-" + Math.random();
  }

  get indicatorClass() {
    let indicatorCls = "slds-carousel__indicator-action";
    if (this.carouselIndex === this.currentIndex) {
      indicatorCls += " slds-is-active";
    }
    this.carouselIndex++;
    return indicatorCls;
  }

  get thumbnailIndicatorClass() {
    let thumbIndicatorCls = "slds-col preview-thumbnail";
    if (this.carouselIndex === this.currentIndex) {
      thumbIndicatorCls += " preview-active";
    }
    if (this.thumbnaillimit) {
      thumbIndicatorCls += ` slds-size_1-of-${this.thumbnaillimit}`;
    } else {
      thumbIndicatorCls += ` slds-size_1-of-${this.carouselItems.length}`;
    }
    this.carouselIndex++;
    return thumbIndicatorCls;
  }

  get thumbnailClass() {
    let thumbCls =
      "slds-grid slds-m-horizontal_large slds-scrollable_x slds-p-bottom_small";
    if (parseInt(this.thumbnaillimit, 10) > this.carouselItems.length) {
      thumbCls += " slds-grid_align-center";
    }
    return thumbCls;
  }

  get carouselClass() {
    return `slds-carousel ${this.extraclass}`;
  }

  get panelsStyle() {
    return `transform:translateX(-${this.currentIndex * 100}%)`;
  }

  get prevDisabled() {
    return this.currentIndex === 0;
  }

  get nextDisabled() {
    return this.currentIndex >= this.carouselItems.length - 1;
  }

  setIndex(event) {
    this.carouselIndex = 0;
    const itemIndex = event.target.getAttribute("data-index");
    this.currentIndex = parseInt(itemIndex, 10);
  }
  moveLeft(event) {
    this.carouselIndex = 0;
    this.currentIndex--;
    event.stopPropagation();
  }
  moveRight(event) {
    this.carouselIndex = 0;
    this.currentIndex++;
    event.stopPropagation();
  }
}
