/*************************************************************************
 *
 * VLOCITY, INC. CONFIDENTIAL
 * __________________
 *
 *  [2014] - [2020] Vlocity, Inc.
 *  All Rights Reserved.
 *
 * NOTICE:  All information contained herein is, and remains
 * the property of Vlocity, Inc. and its suppliers,
 * if any. The intellectual and technical concepts contained
 * herein are proprietary to Vlocity, Inc. and its suppliers and may be
 * covered by U.S. and Foreign Patents, patents in process, and are
 * protected by trade secret or copyright law. Dissemination of this
 * information and reproduction, modification or reverse-engineering
 * of this material, is prohibited unless prior written permission
 * is obtained from Vlocity, Inc.
 *
 * Build: v234.0.0
 */
import { LightningElement, api, track } from "lwc";
import sldsTemplate from "./treeItem_slds.html";
import ndsTemplate from "./treeItem_nds.html";

export default class TreeItem extends LightningElement {
  @api theme;
  @api iconUrl;
  @track _index = 0;
  @track _items;

  set items(value) {
    if (value && value.length) {
      // To be able to update the value;
      let dataValue =
        value &&
        value.map(item => {
          return Object.assign(
            {
              id: item.id || this._index++,
              expanded: false,
              href: "",
              subItemClass:
                item.items && item.items.length > 0 ? "" : "slds-hidden"
            },
            item
          );
        });
      this._items = dataValue;
    } else {
      this._items = [];
    }
  }
  @api
  get items() {
    return this._items;
  }

  set index(value) {
    this._index = parseInt(value, 10) + 1;
  }

  @api
  get index() {
    return this._index;
  }

  render() {
    if (this.theme === "nds") {
      return ndsTemplate;
    }
    return sldsTemplate;
  }

  toggleTree(event) {
    let index = event.currentTarget.dataset.key;
    this.items[index].expanded = !this.items[index].expanded;
  }

  selectItemEventHandler(event, customEventName) {
    let index = event.currentTarget.dataset.key;
    let item = this.items[index];
    this.dispatchEvent(
      new CustomEvent(customEventName, {
        bubbles: true,
        composed: true,
        detail: {
          item: item
        }
      })
    );
    event.stopPropagation();
    event.currentTarget.focus();
  }

  selectItem(event) {
    event.preventDefault();
    this.selectItemEventHandler(event, "select");
  }

  selectItemName(event) {
    event.preventDefault();
    this.selectItemEventHandler(event, "selectitemname");
  }

  handleBlur(event) {
    event.currentTarget.setAttribute("aria-selected", "false");
  }

  handleFocus(event) {
    event.currentTarget.setAttribute("aria-selected", "true");
  }
}
