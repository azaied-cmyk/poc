/*************************************************************************
 *
 * VLOCITY, INC. CONFIDENTIAL
 * __________________
 *
 *  [2014] - [2020] Vlocity, Inc.
 *  All Rights Reserved.
 *
 * NOTICE:  All information contained herein is, and remains
 * the property of Vlocity, Inc. and its suppliers,
 * if any. The intellectual and technical concepts contained
 * herein are proprietary to Vlocity, Inc. and its suppliers and may be
 * covered by U.S. and Foreign Patents, patents in process, and are
 * protected by trade secret or copyright law. Dissemination of this
 * information and reproduction, modification or reverse-engineering
 * of this material, is prohibited unless prior written permission
 * is obtained from Vlocity, Inc.
 *
 * Build: v234.0.0
 */
import { createElement } from "lwc";
import pill from "c/pill";

describe("c-pill", () => {
  describe("with data", () => {
    it("renders DOM elements", () => {
      const element = createElement("c-pill", { is: pill });
      document.body.appendChild(element);
      expect(element.shadowRoot.children).not.toHaveLength(0);
    });
  });
  /**
   * Check if the theme is applied properly
   */
  it("Check if theme is set", () => {
    const element = createElement("c-input", {
      is: pill
    });
    element.label = "Slds Pill";
    element.theme = "slds";
    element.placeholder = "Pill";
    document.body.appendChild(element);
    const button = element.shadowRoot.querySelector("div");
    let index = button.className.indexOf("slds") !== -1 ? true : false;
    expect(index).toBe(true);
  });

  /* Check if the input value is set */
  it("Check If input value is set", () => {
    const element = createElement("c-input", {
      is: pill
    });
    element.label = "Slds Pill";
    element.theme = "slds";
    element.placeholder = "Pill";
    element.value = "Option 1";
    element.options = ["Option 1", "Option 2", "Option 3"];
    document.body.appendChild(element);
    const input = element.shadowRoot.querySelector(".slds-pill__label");
    expect(input.textContent).toBe("Option 1");
  });

  /* Check if the options is set */
  it("Check If options is set", () => {
    const element = createElement("c-input", {
      is: pill
    });
    element.label = "Slds Pill";
    element.theme = "slds";
    element.placeholder = "Pill";
    element.options = ["Option 1", "Option 2", "Option 3"];
    document.body.appendChild(element);
    const input = element.shadowRoot.querySelector("input");
    input.dispatchEvent(new Event("focus"));
    return Promise.resolve().then(() => {
      const options = element.shadowRoot.querySelector("ul").childNodes;
      expect(options).toHaveLength(3);
    });
  });

  /* Check if the value updates */
  it("Check If value updates", () => {
    const element = createElement("c-input", {
      is: pill
    });
    element.label = "Slds Pill";
    element.theme = "slds";
    element.placeholder = "Pill";
    element.options = ["Option 1", "Option 2", "Option 3"];
    document.body.appendChild(element);
    const input = element.shadowRoot.querySelector("input");
    input.dispatchEvent(new Event("focus"));
    return Promise.resolve().then(() => {
      const options = element.shadowRoot.querySelector(".slds-listbox__option");
      options.dispatchEvent(new Event("mousedown"));
      expect(element.value).toBe("Option 1");
    });
  });

  /* Check if the option can be filtered */
  it("Check If option can be filtered", () => {
    const element = createElement("c-input", {
      is: pill
    });
    element.label = "Slds Pill";
    element.theme = "slds";
    element.placeholder = "Pill";
    element.options = ["Option 1", "Option 2", "Option 3"];
    document.body.appendChild(element);
    const input = element.shadowRoot.querySelector("input");
    input.dispatchEvent(new Event("focus"));
    input.value = "Option 1";
    input.dispatchEvent(new Event("input"));
    return Promise.resolve().then(() => {
      const options = element.shadowRoot.querySelector("ul").childNodes;
      expect(options).toHaveLength(1);
    });
  });

  /* Check if the freetext can be added */
  it("Check If freetext can be added", () => {
    const element = createElement("c-input", {
      is: pill
    });
    element.label = "Slds Pill";
    element.theme = "slds";
    element.placeholder = "Pill";
    element.freetext = true;
    document.body.appendChild(element);
    const input = element.shadowRoot.querySelector("input");
    input.value = "Option 1";
    let evt = new CustomEvent("keypress");
    evt.keyCode = 13;
    input.dispatchEvent(evt);
    return Promise.resolve().then(() => {
      expect(element.value).toBe("Option 1");
    });
  });

  /* Check if the option dropdown works */
  it("Check If option dropdown works", () => {
    const element = createElement("c-input", {
      is: pill
    });
    element.label = "Slds Pill";
    element.theme = "slds";
    element.placeholder = "Pill";
    element.value = "Option 1,Option 2";
    element.options = ["Option 1", "Option 2", "Option 3"];
    document.body.appendChild(element);
    const options = element.shadowRoot.querySelector("ul");
    expect(options).toBe(null);
    const input = element.shadowRoot.querySelector("input");
    input.dispatchEvent(new Event("focus"));
    return Promise.resolve().then(() => {
      const ul = element.shadowRoot.querySelector("ul");
      expect(ul).not.toBe(null);
    });
  });

  /* Check if the value can be removed */
  it("Check If value can be removed", () => {
    const element = createElement("c-input", {
      is: pill
    });
    element.label = "Slds Pill";
    element.theme = "slds";
    element.placeholder = "Pill";
    element.value = "Option 1,Option 2";
    element.options = ["Option 1", "Option 2", "Option 3"];
    document.body.appendChild(element);
    const input = element.shadowRoot.querySelector(".slds-pill__remove");
    input.dispatchEvent(new Event("click"));
    return Promise.resolve().then(() => {
      expect(element.value).toBe("Option 2");
    });
  });

  /* Check if the label is set */
  it("Check If label is set", () => {
    const element = createElement("c-input", {
      is: pill
    });
    element.label = "Slds Pill";
    element.theme = "slds";
    element.placeholder = "Pill";
    element.value = "Option 1";
    element.options = ["Option 1", "Option 2", "Option 3"];
    document.body.appendChild(element);
    const label = element.shadowRoot.querySelector("label");
    expect(label.textContent).toBe("Slds Pill");
  });

  /* Check if the placeholder is set */
  it("Check If placeholder is set", () => {
    const element = createElement("c-input", {
      is: pill
    });
    element.label = "Slds Pill";
    element.theme = "slds";
    element.placeholder = "Pill";
    element.value = "Option 1";
    element.options = ["Option 1", "Option 2", "Option 3"];
    document.body.appendChild(element);
    const input = element.shadowRoot.querySelector("input");
    expect(input.placeholder).toBe("Pill");
  });

  /* Check if the name is set */
  it("Check If name is set", () => {
    const element = createElement("c-input", {
      is: pill
    });
    element.label = "Slds Pill";
    element.theme = "slds";
    element.name = "Pill";
    element.value = "Option 1";
    element.options = ["Option 1", "Option 2", "Option 3"];
    document.body.appendChild(element);
    const input = element.shadowRoot.querySelector("input");
    expect(input.name).toBe("Pill");
  });

  /* Check if the disabled is set */
  it("Check If disabled is set", () => {
    const element = createElement("c-input", {
      is: pill
    });
    element.label = "Slds Pill";
    element.theme = "slds";
    element.placeholder = "Pill";
    element.disabled = true;
    element.value = "Option 1";
    element.options = ["Option 1", "Option 2", "Option 3"];
    document.body.appendChild(element);
    const input = element.shadowRoot.querySelector("input");
    expect(input.disabled).toBe(true);
  });

  /* Check if the iconUrl is set */
  it("Check If iconUrl is set", () => {
    const element = createElement("c-input", {
      is: pill
    });
    element.label = "Slds Pill";
    element.theme = "slds";
    element.placeholder = "Pill";
    element.iconUrl = "/static/css/nds/assets/icons/";
    element.value = "Option 1";
    element.options = ["Option 1", "Option 2", "Option 3"];
    document.body.appendChild(element);
    const icon = element.shadowRoot.querySelector("c-icon");
    expect(icon.baseurl).toBe("/static/css/nds/assets/icons/");
  });

  /* Check if the freetext is set */
  it("Check If freetext is set", () => {
    const element = createElement("c-input", {
      is: pill
    });
    element.label = "Slds Pill";
    element.theme = "slds";
    element.placeholder = "Pill";
    element.freetext = true;
    element.value = "Option 1";
    document.body.appendChild(element);
    const input = element.shadowRoot.querySelector(".slds-pill__label");
    expect(input.textContent).toBe("Option 1");
  });

  /* Check if the viewOnly is set */
  it("Check If viewOnly is set", () => {
    const element = createElement("c-input", {
      is: pill
    });
    element.label = "Slds Pill";
    element.theme = "slds";
    element.placeholder = "Pill";
    element.viewonly = true;
    element.value = "Option 1";
    document.body.appendChild(element);
    const input = element.shadowRoot.querySelector("input");
    expect(input).toBe(null);
  });
});
