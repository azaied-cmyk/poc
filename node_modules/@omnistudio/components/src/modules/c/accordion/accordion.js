/*************************************************************************
 *
 * VLOCITY, INC. CONFIDENTIAL
 * __________________
 *
 *  [2014] - [2020] Vlocity, Inc.
 *  All Rights Reserved.
 *
 * NOTICE:  All information contained herein is, and remains
 * the property of Vlocity, Inc. and its suppliers,
 * if any. The intellectual and technical concepts contained
 * herein are proprietary to Vlocity, Inc. and its suppliers and may be
 * covered by U.S. and Foreign Patents, patents in process, and are
 * protected by trade secret or copyright law. Dissemination of this
 * information and reproduction, modification or reverse-engineering
 * of this material, is prohibited unless prior written permission
 * is obtained from Vlocity, Inc.
 *
 * Build: v234.0.0
 */
import { LightningElement, api } from "lwc";
import sldsTemplate from "./accordion_slds.html";
import ndsTemplate from "./accordion_nds.html";

/**
 * @module c/accordion
 * @typicalname accordion
 * @example
 * ```
 * <c-accordion
 * allow-multiple-sections-open="true"
 * active-section-name="B"
 * title="Accordion Component"
 * theme="slds"
 * >
 * </c-accordion>
 *
 * ```
 */
export default class Accordion extends LightningElement {
  _activeSectionName = [];
  _allowMultipleSectionsOpen = false;
  /**
   * @type {boolean} - When set to true allows multiple to be open at the same time
   * @scope api (public)
   */
  @api get allowMultipleSectionsOpen() {
    return this._allowMultipleSectionsOpen;
  }
  set allowMultipleSectionsOpen(val) {
    if (val === true || val === "true") this._allowMultipleSectionsOpen = true;
    else this._allowMultipleSectionsOpen = false;
  }

  /**
   * @type {String} - Sets the theme of the component. Default is slds
   * @scope api (public)
   */
  @api get theme() {
    return this._theme || "slds";
  }
  set theme(val) {
    if (val === "slds" || val === "nds") {
      this._theme = val;
    } else {
      this._theme = "slds";
    }
  }

  /**
   * @params {{(String\|Array)}} - Sets the section to be active during render
   * @scope api (public)
   */
  @api get activeSectionName() {
    return this._activeSectionName;
  }
  set activeSectionName(val) {
    if (this.allowMultipleSectionsOpen) {
      if (typeof val === "string") {
        if (this._activeSectionName.indexOf(val) === -1)
          this._activeSectionName.push(val);
      } else {
        val.forEach(section => {
          if (this._activeSectionName.indexOf(section) === -1)
            this._activeSectionName.push(section);
        });
      }
    } else {
      this._activeSectionName[0] = val;
    }
  }

  firstRender = false;

  /**
   * @function - Sets the active section
   * @param {Array} sectionName - The sectionName to be set
   */
  setActiveSection(sectionName) {
    sectionName.forEach(item => {
      this.querySelectorAll(".accordion-section-class").forEach(element => {
        if (element && element.name === item) element.isSectionOpen = true;
      });
    });
  }

  /**
   * @function - Opens or closes a section based on user input
   * @param {Event} val - This event contains two params deatil.name & detail.uniqueKey
   */
  togglesection(val) {
    let sectionName = val && val.detail.name;
    let uniqueKey = val && val.detail.uniqueKey;
    // if allowmultiple is true
    // add val.detail.name to the list of array and toggle section based on that.
    if (this.allowMultipleSectionsOpen) {
      if (this.activeSectionName.indexOf(sectionName) !== -1) {
        let index = this.activeSectionName.indexOf(sectionName);
        if (index > -1) {
          let arr = [...this.activeSectionName];
          arr.splice(index, 1);
          this._activeSectionName = [...arr];
        }
      } else {
        this._activeSectionName.push(sectionName);
      }
      this.querySelectorAll(".accordion-section-class").forEach(element => {
        if (element && element.name === sectionName) {
          if (element.isSectionOpen) {
            element.isSectionOpen = false;
            this.onAccordionSectionClose(sectionName, uniqueKey);
          } else {
            element.isSectionOpen = true;
            this.onAccordionSectionOpen(sectionName, uniqueKey);
          }
        }
      });
    } else {
      // if allowmultiple is false
      // check if val.detail.name is already open, else open it and close all others.
      this.activeSectionName = sectionName;
      this.querySelectorAll(".accordion-section-class").forEach(element => {
        if (element && element.name === sectionName) {
          if (!element.isSectionOpen) {
            element.isSectionOpen = true;
            this.onAccordionSectionOpen(sectionName, uniqueKey);
          }
        } else if (element.isSectionOpen) {
          element.isSectionOpen = false;
          let key = element.classList[1].replace("accordion-class_", "");
          this.onAccordionSectionClose(element.name, key);
        }
      });
    }
  }

  /**
   * @function - Fires event with opensection details
   * @param {String} name - name of the section opened
   * @param {String} uniqueKey - a unique key to identify the section opened
   */
  onAccordionSectionOpen(name, uniqueKey) {
    this.fireEvent("onaccordionsectionopen", {
      name: name,
      uniqueKey: uniqueKey
    });
  }

  /**
   * @function - Fires event with closedsection details
   * @param {String} name - name of the section closed
   * @param {String} uniqueKey - a unique key to identify the section closed
   */
  onAccordionSectionClose(name, uniqueKey) {
    this.fireEvent("onaccordionsectionclose", {
      name: name,
      uniqueKey: uniqueKey
    });
  }

  /**
   * @function - Fires event
   * @param {String} eventName - name of the event
   * @param {Object} data - contains the data object
   */
  fireEvent(eventName, data) {
    let event = new CustomEvent(eventName, {
      bubbles: true,
      composed: true,
      detail: {
        result: data || ""
      }
    });
    this.dispatchEvent(event);
  }

  connectedCallback() {
    this.template.addEventListener(
      "togglesection",
      this.togglesection.bind(this)
    );
  }

  renderedCallback() {
    if (!this.firstRender && this.activeSectionName) {
      this.setActiveSection(this.activeSectionName);
      this.firstRender = true;
    }
  }

  render() {
    if (this.theme === "nds") {
      return ndsTemplate;
    }
    return sldsTemplate;
  }

  disconnectedCallback() {
    window.removeEventListener("togglesection",this.togglesection);
  }
}
