/*************************************************************************
 *
 * VLOCITY, INC. CONFIDENTIAL
 * __________________
 *
 *  [2014] - [2020] Vlocity, Inc.
 *  All Rights Reserved.
 *
 * NOTICE:  All information contained herein is, and remains
 * the property of Vlocity, Inc. and its suppliers,
 * if any. The intellectual and technical concepts contained
 * herein are proprietary to Vlocity, Inc. and its suppliers and may be
 * covered by U.S. and Foreign Patents, patents in process, and are
 * protected by trade secret or copyright law. Dissemination of this
 * information and reproduction, modification or reverse-engineering
 * of this material, is prohibited unless prior written permission
 * is obtained from Vlocity, Inc.
 *
 * Build: v234.0.0
 */
import { createElement } from "lwc";
import VlocityInput from "c/input";

describe("c-input", () => {
  afterEach(() => {
    while (document.body.firstChild) {
      document.body.removeChild(document.body.firstChild);
    }
  });

  it("renders DOM elements", () => {
    const element = createElement("c-input", {
      is: VlocityInput
    });
    element.label = "Slds Input";
    element.theme = "slds";
    element.placeholder = "Normal Input";
    document.body.appendChild(element);
    expect(element.shadowRoot.children).not.toHaveLength(0);
  });

  /**
   * Check if the theme is applied properly
   */
  it("Check if theme is set", () => {
    const element = createElement("c-input", {
      is: VlocityInput
    });
    element.label = "Slds Input";
    element.theme = "slds";
    element.placeholder = "Normal Input";
    document.body.appendChild(element);
    const button = element.shadowRoot.querySelector("div");
    let index = button.className.indexOf("slds") !== -1 ? true : false;
    expect(index).toBe(true);
  });

  /* Check if the input value is set */
  it("Check If input value is set", () => {
    const element = createElement("c-input", {
      is: VlocityInput
    });
    element.label = "Slds Input";
    element.theme = "slds";
    element.placeholder = "Normal Input";
    element.value = "Test";
    document.body.appendChild(element);
    const input = element.shadowRoot.querySelector("input");
    expect(input.value).toBe("Test");
  });

  /* Check if the label is set */
  it("Check If label is set", () => {
    const element = createElement("c-input", {
      is: VlocityInput
    });
    element.label = "Slds Input";
    element.theme = "slds";
    element.placeholder = "Normal Input";
    element.value = "Test";
    document.body.appendChild(element);
    const label = element.shadowRoot.querySelector("label");
    expect(label.textContent).toBe("Slds Input");
  });

  /* Check if the checkbox type is set */
  it("Check If checkbox type is set", () => {
    const element = createElement("c-input", {
      is: VlocityInput
    });
    element.label = "Slds Input";
    element.type = "checkbox";
    element.theme = "slds";
    element.placeholder = "Normal Input";
    element.value = "Test";
    document.body.appendChild(element);
    const checkbox = element.shadowRoot.querySelector("input");
    checkbox.checked = true;
    checkbox.dispatchEvent(new Event("change"));
    expect(element.checked).toBe(checkbox.checked);
  });

  /* Check if the radio type is set */
  it("Check If radio type is set", () => {
    const element = createElement("c-input", {
      is: VlocityInput
    });
    element.label = "Slds Input";
    element.type = "radio";
    element.theme = "slds";
    element.placeholder = "Normal Input";
    element.value = "Test";
    document.body.appendChild(element);
    const radio = element.shadowRoot.querySelector("input");
    radio.checked = true;
    radio.dispatchEvent(new Event("change"));
    expect(element.checked).toBe(radio.checked);
  });

  /* Check if the pretext is set */
  it("Check If pretext is set", () => {
    const element = createElement("c-input", {
      is: VlocityInput
    });
    element.label = "Slds Input";
    element.theme = "slds";
    element.pretext = "$";
    element.placeholder = "Normal Input";
    element.value = "Test";
    document.body.appendChild(element);
    const span = element.shadowRoot.querySelector(
      "span." + element.theme + "-form-element__addon"
    );
    expect(span.textContent).toBe("$");
  });

  /* Check if the posttext is set */
  it("Check If posttext is set", () => {
    const element = createElement("c-input", {
      is: VlocityInput
    });
    element.label = "Slds Input";
    element.theme = "slds";
    element.posttext = "USD";
    element.placeholder = "Normal Input";
    element.value = "Test";
    document.body.appendChild(element);
    const span = element.shadowRoot.querySelector(
      "span." + element.theme + "-form-element__addon"
    );
    expect(span.textContent).toBe("USD");
  });

  /* Check if the min , max and step value is set */
  it("Check If min , max and step value is set", () => {
    const element = createElement("c-input", {
      is: VlocityInput
    });
    element.label = "Slds Input";
    element.theme = "slds";
    element.min = 20;
    element.max = 40;
    element.step = 2;
    element.type = "number";
    element.placeholder = "Normal Input";
    document.body.appendChild(element);
    const input = element.shadowRoot.querySelector("input");
    expect(input.min).toBe("20");
    expect(input.max).toBe("40");
    expect(input.step).toBe("2");
  });

  /* Check if the min value is checked */
  it("Check If min value is checked", () => {
    const element = createElement("c-input", {
      is: VlocityInput
    });
    element.label = "Slds Input";
    element.theme = "slds";
    element.min = 20;
    element.type = "number";
    element.placeholder = "Normal Input";
    element.value = 10;
    document.body.appendChild(element);
    expect(element.checkValidity()).toBe(false);
  });

  /* Check if the icon is set */
  it("Check If icon is set", () => {
    const element = createElement("c-input", {
      is: VlocityInput
    });
    element.label = "Slds Input";
    element.iconNameLeft = "utility:info";
    element.theme = "slds";
    element.placeholder = "Normal Input";
    element.value = "Test";
    document.body.appendChild(element);
    const div = element.shadowRoot.querySelector(".slds-input-has-icon");
    expect(div).not.toBe(null);
  });

  /* Check if the variant is set */
  it("Check If variant is set", () => {
    const element = createElement("c-input", {
      is: VlocityInput
    });
    element.label = "Slds Input";
    element.theme = "slds";
    element.placeholder = "Normal Input";
    element.value = "Test";
    element.variant = "label-hidden";
    document.body.appendChild(element);
    const input = element.shadowRoot.querySelector("label");
    expect(input).toBe(null);
  });
  it("Check If mask is set", () => {
    const element = createElement("c-input", {
      is: VlocityInput
    });
    element.label = "Slds Input";
    element.theme = "slds";
    element.type = "number";
    element.placeholder = "Normal Input";
    element.value = "30";
    element.formatter = "percent-fixed";
    document.body.appendChild(element);
    expect(element.value).toBe(30);
    expect(element.maskedValue).toBe("30.00%");
  });
  it("Check If mask is set when skipMaskingOnKeyevents is set", () => {
    const element = createElement("c-input", {
      is: VlocityInput
    });
    element.label = "Slds Input";
    element.theme = "slds";
    element.type = "number";
    element.placeholder = "Normal Input";
    element.value = "30";
    element.formatter = "percent-fixed";
    element.skipMaskingOnKeyevents = true;
    document.body.appendChild(element);
    expect(element.value).toBe(30);
    expect(element.maskedValue).toBe("30.00%");
  });
});
