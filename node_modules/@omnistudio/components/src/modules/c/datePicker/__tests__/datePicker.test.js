/*************************************************************************
 *
 * VLOCITY, INC. CONFIDENTIAL
 * __________________
 *
 *  [2014] - [2020] Vlocity, Inc.
 *  All Rights Reserved.
 *
 * NOTICE:  All information contained herein is, and remains
 * the property of Vlocity, Inc. and its suppliers,
 * if any. The intellectual and technical concepts contained
 * herein are proprietary to Vlocity, Inc. and its suppliers and may be
 * covered by U.S. and Foreign Patents, patents in process, and are
 * protected by trade secret or copyright law. Dissemination of this
 * information and reproduction, modification or reverse-engineering
 * of this material, is prohibited unless prior written permission
 * is obtained from Vlocity, Inc.
 *
 * Build: v234.0.0
 */
import { createElement } from "lwc";
import VlocityDatePicker from "c/datePicker";
jest.mock(
  "@salesforce/label/c.cmpDayJsLocaleFormats",
  () => {
    return {
      default:
        '{"name":"en","weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"months":["January","February","March","April","May","June","July","August","September","October","November","December"]}'
    };
  },
  { virtual: true }
);

jest.mock(
  "@salesforce/label/c.cmpLocaleFormatsInvalid",
  () => {
    return {
      default:
        'Unable to render due to invalid localeFormat. Please provide a valid localeFormat in the form of {"name":"en","weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"months":["January","February","March","April","May","June","July","August","September","October","November","December"]}'
    };
  },
  { virtual: true }
);
jest.mock(
  "@salesforce/label/c.cmpRangeUnderflow",
  () => {
    return { default: "Date is before allowed range." };
  },
  { virtual: true }
);
jest.mock(
  "@salesforce/label/c.cmpRangeOverflow",
  () => {
    return { default: "Date is after allowed range." };
  },
  { virtual: true }
);
jest.mock(
  "@salesforce/label/c.cmpFieldValueMissing",
  () => {
    return { default: "Complete this field." };
  },
  { virtual: true }
);

describe("c-date-picker", () => {
  afterEach(() => {
    while (document.body.firstChild) {
      document.body.removeChild(document.body.firstChild);
    }
  });
  let date = new Date(2019, 11, 13);
  let dateVal = date.toISOString();
  it("renders DOM elements", () => {
    const element = createElement("c-date-picker", {
      is: VlocityDatePicker
    });
    element.placeholder = "Select Date";
    element.theme = "slds";
    element.name = "Date Picker";
    element.label = "Date";
    document.body.appendChild(element);
    expect(element.shadowRoot.children).not.toHaveLength(0);
  });

  /**
   * Check if the theme is applied properly
   */
  it("Check if theme is set", () => {
    const element = createElement("c-date-picker", {
      is: VlocityDatePicker
    });
    element.placeholder = "Select Date";
    element.theme = "slds";
    element.name = "Date Picker";
    element.label = "Date";
    document.body.appendChild(element);
    const button = element.shadowRoot.querySelector("div");
    let index = button.className.indexOf("slds") !== -1 ? true : false;
    expect(index).toBe(true);
  });

  /* Check if the variant disabled */
  it("Check If label is set", () => {
    const element = createElement("c-date-picker", {
      is: VlocityDatePicker
    });
    element.placeholder = "Select Date";
    element.theme = "slds";
    element.name = "Date Picker";
    element.label = "Date";
    document.body.appendChild(element);
    const label = element.shadowRoot.querySelector("label");
    expect(label.textContent).toBe("Date");
  });

  /* Check if the required value is checked */
  it("Check If required value is checked", () => {
    const element = createElement("c-date-picker", {
      is: VlocityDatePicker
    });
    element.placeholder = "Select Date";
    element.theme = "slds";
    element.name = "Date Picker";
    element.label = "Date";
    element.required = true;
    document.body.appendChild(element);
    expect(element.checkValidity()).toBe(false);
  });

  /* Check if the reportValidity works */
  it("Check If reportValidity works", () => {
    const element = createElement("c-date-picker", {
      is: VlocityDatePicker
    });
    element.placeholder = "Select Date";
    element.theme = "slds";
    element.name = "Date Picker";
    element.label = "Date";
    element.required = true;
    document.body.appendChild(element);
    expect(element.reportValidity()).toBe(false);
  });

  /* Check if the setCustomValidity works */
  it("Check If setCustomValidity works", () => {
    const element = createElement("c-date-picker", {
      is: VlocityDatePicker
    });
    element.placeholder = "Select Date";
    element.theme = "slds";
    element.name = "Date Picker";
    element.label = "Date";
    document.body.appendChild(element);
    element.setCustomValidity("Test error message");
    element.showHelpMessageIfInvalid();
    return Promise.resolve().then(() => {
      return new Promise(function(resolve) {
        // eslint-disable-next-line @lwc/lwc/no-async-operation
        setTimeout(() => {
          const error = element.shadowRoot.querySelectorAll(
            ".slds-has-error"
          )[1];
          expect(error.textContent).toBe("Test error message");
          resolve();
        }, 10);
      });
    });
  });

  /* Check if the showHelpMessageIfInvalid works */
  it("Check If showHelpMessageIfInvalid works", () => {
    const element = createElement("c-date-picker", {
      is: VlocityDatePicker
    });
    element.placeholder = "Select Date";
    element.theme = "slds";
    element.name = "Date Picker";
    element.label = "Date";
    element.required = true;
    document.body.appendChild(element);
    element.showHelpMessageIfInvalid();
    return Promise.resolve().then(() => {
      const error = element.shadowRoot.querySelectorAll(".slds-has-error")[1];
      expect(error.textContent).toBe("Complete this field.");
    });
  });

  /* Check if the focus works */
  it("Check If focus works", () => {
    const element = createElement("c-date-picker", {
      is: VlocityDatePicker
    });
    element.placeholder = "Select Date";
    element.theme = "slds";
    element.name = "Date Picker";
    element.label = "Date";
    document.body.appendChild(element);
    element.focus();
    return Promise.resolve().then(() => {
      expect(document.activeElement.nodeName).toBe("C-DATE-PICKER");
    });
  });

  /* Check if the input is set */
  it("Check If input is set", () => {
    const element = createElement("c-date-picker", {
      is: VlocityDatePicker
    });
    element.placeholder = "Select Date";
    element.theme = "slds";
    element.name = "Date Picker";
    element.label = "Date";
    element.value = dateVal;
    document.body.appendChild(element);
    return Promise.resolve().then(() => {
      const input = element.shadowRoot.querySelector("input");
      return new Promise(function(resolve) {
        // eslint-disable-next-line @lwc/lwc/no-async-operation
        setTimeout(() => {
          expect(input.value).toBe("12/13/2019");
          resolve();
        }, 10);
      });
    });
  });

  /* Check if the min date validation is set*/
  it("Check If min date validation is set", () => {
    var element = createElement("c-date-picker", {
      is: VlocityDatePicker
    });
    jest.useRealTimers();
    element.placeholder = "Select Date";
    element.theme = "slds";
    element.name = "Date Picker";
    element.label = "Date";
    element.value = dateVal;
    element.min = "2020-04-14T00:00:00.000Z";
    element.format = "MM/DD/YYYY";
    document.body.appendChild(element);
    return new Promise(function(resolve) {
      // eslint-disable-next-line @lwc/lwc/no-async-operation
      setTimeout(() => {
        var input = element.shadowRoot.querySelector("input");
        input.value = dateVal;
        element.showHelpMessageIfInvalid();
        resolve();
      }, 1000);
    }).then(function() {
      return new Promise(function(resolve) {
        // eslint-disable-next-line @lwc/lwc/no-async-operation
        setTimeout(() => {
          const error = element.shadowRoot.querySelectorAll(
            ".slds-has-error"
          )[1];
          expect(error.textContent).toBe("Date is before allowed range.");
          resolve();
        }, 1000);
      });
    });
  });

  /* Check if the max date validation is set*/
  it("Check If max date validation is set", () => {
    var element = createElement("c-date-picker", {
      is: VlocityDatePicker
    });
    jest.useRealTimers();
    element.placeholder = "Select Date";
    element.theme = "slds";
    element.name = "Date Picker";
    element.label = "Date";
    element.value = dateVal;
    element.max = "2019-05-14T00:00:00.000Z";
    element.format = "MM/DD/YYYY";
    document.body.appendChild(element);
    return new Promise(function(resolve) {
      // eslint-disable-next-line @lwc/lwc/no-async-operation
      setTimeout(() => {
        var input = element.shadowRoot.querySelector("input");
        input.value = dateVal;
        element.showHelpMessageIfInvalid();
        resolve();
      }, 1000);
    }).then(function() {
      return new Promise(function(resolve) {
        // eslint-disable-next-line @lwc/lwc/no-async-operation
        setTimeout(() => {
          const error = element.shadowRoot.querySelectorAll(
            ".slds-has-error"
          )[1];
          expect(error.textContent).toBe("Date is after allowed range.");
          resolve();
        }, 1000);
      });
    });
  });

  /* Check if the output format is set */
  it("Check If output format is set", () => {
    const element = createElement("c-date-picker", {
      is: VlocityDatePicker
    });
    let output =
      date.getMonth() + 1 + "/" + date.getDate() + "/" + date.getFullYear();
    element.placeholder = "Select Date";
    element.theme = "slds";
    element.name = "Date Picker";
    element.label = "Date";
    element.value = dateVal;
    element.outputFormat = "MM/DD/YYYY";
    document.body.appendChild(element);
    return Promise.resolve().then(() => {
      return new Promise(function(resolve) {
        // eslint-disable-next-line @lwc/lwc/no-async-operation
        setTimeout(() => {
          expect(element.value).toBe(output);
          resolve();
        }, 10);
      });
    });
  });

  /* Check if the output type is set */
  it("Check If output type is set", () => {
    const element = createElement("c-date-picker", {
      is: VlocityDatePicker
    });
    element.placeholder = "Select Date";
    element.theme = "slds";
    element.name = "Date Picker";
    element.label = "Date";
    element.value = dateVal;
    element.outputType = "date";
    document.body.appendChild(element);
    return Promise.resolve().then(() => {
      return new Promise(function(resolve) {
        // eslint-disable-next-line @lwc/lwc/no-async-operation
        setTimeout(() => {
          expect(typeof element.value).toBe("object");
          expect(element.value.toString()).toBe(date.toString());
          resolve();
        }, 10);
      });
    });
  });

  /* Check if the format is set */
  it("Check If format is set", () => {
    const element = createElement("c-date-picker", {
      is: VlocityDatePicker
    });
    element.placeholder = "Select Date";
    element.theme = "slds";
    element.name = "Date Picker";
    element.label = "Date";
    element.value = dateVal;
    element.format = "MM/DD/YYYY";
    document.body.appendChild(element);
    return Promise.resolve().then(() => {
      const input = element.shadowRoot.querySelector("input");
      return new Promise(function(resolve) {
        // eslint-disable-next-line @lwc/lwc/no-async-operation
        setTimeout(() => {
          expect(input.value).toBe("12/13/2019");
          resolve();
        }, 10);
      });
    });
  });

  /* Check if the value updates*/
  it("Check If value updates", () => {
    const element = createElement("c-date-picker", {
      is: VlocityDatePicker
    });
    element.placeholder = "Select Date";
    element.theme = "slds";
    element.name = "Date Picker";
    element.label = "Date";
    element.value = dateVal;
    element.format = "MM/DD/YYYY";
    document.body.appendChild(element);
    return Promise.resolve().then(() => {
      return new Promise(function(resolve) {
        // eslint-disable-next-line @lwc/lwc/no-async-operation
        setTimeout(() => {
          const input = element.shadowRoot.querySelector("input");
          input.value = dateVal;
          input.dispatchEvent(new Event("mousedown"));
          resolve();
        }, 10);
        return Promise.resolve().then(() => {
          return new Promise(function() {
            // eslint-disable-next-line @lwc/lwc/no-async-operation
            setTimeout(() => {
              expect(element.value).toBe("12/13/2019");
              resolve();
            }, 10);
          });
        });
      });
    });
  });

  /* Check if the calendar displays*/
  it("Check If calendar displays", () => {
    const element = createElement("c-date-picker", {
      is: VlocityDatePicker
    });
    element.placeholder = "Select Date";
    element.value = dateVal;
    element.theme = "slds";
    element.name = "Date Picker";
    element.label = "Date";
    element.format = "MM/DD/YYYY";
    document.body.appendChild(element);
    return Promise.resolve().then(() => {
      return new Promise(function(resolve) {
        // eslint-disable-next-line @lwc/lwc/no-async-operation
        setTimeout(() => {
          const input = element.shadowRoot.querySelector("input");
          input.dispatchEvent(new Event("mousedown"));
          resolve();
        }, 10);
        return Promise.resolve().then(() => {
          return new Promise(function() {
            // eslint-disable-next-line @lwc/lwc/no-async-operation
            setTimeout(() => {
              const year = element.shadowRoot.querySelectorAll("select")[0];
              const month = element.shadowRoot.querySelector("h2");
              const day = element.getElementsByClassName("dayId13")[0];
              expect(month.textContent).toBe("December");
              expect(year.value).toBe("2019");
              let activeClass =
                day.className.indexOf("slds-is-selected") !== -1 ? true : false;
              expect(activeClass).toBe(true);
              resolve();
            }, 100);
          });
        });
      });
    });
  });

  /* Check if the min and max date is set*/
  it("Check If min and max date is set", () => {
    const element = createElement("c-date-picker", {
      is: VlocityDatePicker
    });
    element.placeholder = "Select Date";
    element.theme = "slds";
    element.name = "Date Picker";
    element.label = "Date";
    element.value = "2019-04-16T00:00:00.000Z";
    element.min = "2019-04-13T00:00:00.000Z";
    element.max = "2019-05-13T00:00:00.000Z";
    element.format = "MM/DD/YYYY";
    document.body.appendChild(element);
    return Promise.resolve().then(() => {
      return new Promise(function(resolve) {
        // eslint-disable-next-line @lwc/lwc/no-async-operation
        setTimeout(() => {
          const input = element.shadowRoot.querySelector("input");
          input.dispatchEvent(new Event("mousedown"));
          resolve();
        }, 10);
        return Promise.resolve().then(() => {
          return new Promise(function() {
            // eslint-disable-next-line @lwc/lwc/no-async-operation
            setTimeout(() => {
              const day = element.getElementsByClassName("dayId8")[0];
              let disabledClass =
                day.className.indexOf("slds-disabled-text") !== -1
                  ? true
                  : false;
              expect(disabledClass).toBe(true);
              resolve();
            }, 100);
          });
        });
      });
    });
  });
});
