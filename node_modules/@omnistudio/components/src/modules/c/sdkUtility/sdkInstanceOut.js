/*************************************************************************
 *
 * VLOCITY, INC. CONFIDENTIAL
 * __________________
 *
 *  [2014] - [2020] Vlocity, Inc.
 *  All Rights Reserved.
 *
 * NOTICE:  All information contained herein is, and remains
 * the property of Vlocity, Inc. and its suppliers,
 * if any. The intellectual and technical concepts contained
 * herein are proprietary to Vlocity, Inc. and its suppliers and may be
 * covered by U.S. and Foreign Patents, patents in process, and are
 * protected by trade secret or copyright law. Dissemination of this
 * information and reproduction, modification or reverse-engineering
 * of this material, is prohibited unless prior written permission
 * is obtained from Vlocity, Inc.
 *
 * Build: v234.0.0
 */
import { getConnection } from "c/omniscriptConnection";

let sdkInstanceOut = null;
/**
 * initializeDatasourceSdk is used to initialize the datasource sdk for communation between off-platfom
 * and Salesforce org.
 * @param {*} config optional (if connection is available)
 * eg: config = {
 *    jsforceConnection: Connection Object from jsforce,
 *    url: 'Salesforce Intance Url',
 *    sessionId: 'Salesforce Session Id',
 *    namespace: 'Namespace of Salesforce Org'
 * }
 */
const initializeDatasourceSdk = config => {
  let connection = getConnection();
  //If connection is present use the available connection otherwise use input config parameter to create
  if (!connection) {
    if (
      !config ||
      (!config.jsforceConnection &&
        (!config.instanceUrl || !config.sessionId || !config.namespace))
    ) {
      throw new Error(
        `Input config parameter should be an object with either "jsforceConnection" or ("instanceUrl", "sessionId"), "namespace" as a property.`
      );
    } else {
      connection = config;
    }
  }

  if (!sdkInstanceOut) {
    const DatasourceSDK = require("@vlocity-ins-sdk/datasource-sdk");
    const datasourceConfig = Object.assign(
      { url: connection.instanceUrl },
      connection
    );
    sdkInstanceOut = DatasourceSDK.getInstance(datasourceConfig);
    if (connection.namespace) {
      sdkInstanceOut.namespace = connection.namespace;
    }
  }
};

/**
 * @returns Datasource SDK Instance which can be used to consume datasource sdk public methods
 */
const getSdkInstanceOut = () => {
  if (!sdkInstanceOut) {
    const connection = getConnection();
    if (connection) {
      initializeDatasourceSdk();
      return sdkInstanceOut;
    } else {
      throw new Error(
        "Datasource SDK Instance not found, please call 'initializeDatasourceSdk' of 'sdkUtility' component to create."
      );
    }
  }
  return sdkInstanceOut;
};

export { initializeDatasourceSdk, getSdkInstanceOut };
