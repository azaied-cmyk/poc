/*************************************************************************
 *
 * VLOCITY, INC. CONFIDENTIAL
 * __________________
 *
 *  [2014] - [2020] Vlocity, Inc.
 *  All Rights Reserved.
 *
 * NOTICE:  All information contained herein is, and remains
 * the property of Vlocity, Inc. and its suppliers,
 * if any. The intellectual and technical concepts contained
 * herein are proprietary to Vlocity, Inc. and its suppliers and may be
 * covered by U.S. and Foreign Patents, patents in process, and are
 * protected by trade secret or copyright law. Dissemination of this
 * information and reproduction, modification or reverse-engineering
 * of this material, is prohibited unless prior written permission
 * is obtained from Vlocity, Inc.
 *
 * Build: v234.0.0
 */
import { createElement } from "lwc";
import Slider from "c/slider";

describe("c-slider", () => {
  afterEach(() => {
    while (document.body.firstChild) {
      document.body.removeChild(document.body.firstChild);
    }
  });

  it("renders DOM elements", () => {
    const element = createElement("c-slider", {
      is: Slider
    });
    element.label = "Slds Input";
    document.body.appendChild(element);
    expect(element.shadowRoot.children).not.toHaveLength(0);
  });

  /**
   * Check if the theme is applied properly
   */
  it("Check if theme is set", () => {
    const element = createElement("c-slider", {
      is: Slider
    });
    element.label = "Slds Input";
    document.body.appendChild(element);
    const button = element.shadowRoot.querySelector("div");
    let index = button.className.indexOf("slds") !== -1 ? true : false;
    expect(index).toBe(true);
  });

  /* Check if the input value is set */
  it("Check If input value is set", () => {
    const element = createElement("c-slider", {
      is: Slider
    });
    element.label = "Slds Input";
    element.theme = "slds";
    element.value = "10";
    element.variant = "small";
    element.type = "vertical";
    document.body.appendChild(element);
    const input = element.shadowRoot.querySelector("input");
    expect(input.value).toBe("10");
  });

  /* Check if min max step is set */
  it("Check if min max step is set", () => {
    const element = createElement("c-slider", {
      is: Slider
    });
    element.label = "Slds Input";
    element.value = "10";
    element.min = 0;
    element.max = 100;
    element.step = 5;
    element.size = "small";
    document.body.appendChild(element);
    const input = element.shadowRoot.querySelector("input");
    expect(input.min).toBe("0");
    expect(input.max).toBe("100");
    expect(input.step).toBe("5");
  });

  it("Check if checkValidity works", () => {
    const element = createElement("c-slider", {
      is: Slider
    });
    element.label = "Slds Input";
    element.value = "10";
    document.body.appendChild(element);
    expect(element.checkValidity()).toBe(true);
  });

  it("Check if reportValidity works", () => {
    const element = createElement("c-slider", {
      is: Slider
    });
    element.label = "Slds Input";
    element.value = "10";
    document.body.appendChild(element);
    expect(element.reportValidity()).toBe(true);
  });

  it("Check if oninput event works", () => {
    const element = createElement("c-slider", {
      is: Slider
    });
    element.label = "Slds Input";
    element.value = "10";
    document.body.appendChild(element);
    const input = element.shadowRoot.querySelector("input");
    input.value = 20;
    input.dispatchEvent(new Event("input"));
    expect(element.value).toBe(parseFloat(input.value));
  });
});
