/*************************************************************************
 *
 * VLOCITY, INC. CONFIDENTIAL
 * __________________
 *
 *  [2014] - [2020] Vlocity, Inc.
 *  All Rights Reserved.
 *
 * NOTICE:  All information contained herein is, and remains
 * the property of Vlocity, Inc. and its suppliers,
 * if any. The intellectual and technical concepts contained
 * herein are proprietary to Vlocity, Inc. and its suppliers and may be
 * covered by U.S. and Foreign Patents, patents in process, and are
 * protected by trade secret or copyright law. Dissemination of this
 * information and reproduction, modification or reverse-engineering
 * of this material, is prohibited unless prior written permission
 * is obtained from Vlocity, Inc.
 *
 * Build: v234.0.0
 */
import getUserLocale from "get-user-locale";
import dayjs from "dayjs";
import { setPathPrefix } from "lightning/configProvider";

// Import dayjs plugins and extend the main app
import LocaleData from "dayjs/plugin/localeData";
import localizedFormat from "dayjs/plugin/localizedFormat";
dayjs.extend(LocaleData);
dayjs.extend(localizedFormat);

const currentLocale = getUserLocale();
const localeOptions = Intl.DateTimeFormat().resolvedOptions();
const shortLocale = currentLocale ? currentLocale.substr(0, 2) : "en";
dayjs.locale(shortLocale);

//#region Computed constants
const LOCALE = "en-US";
const CURRENCY = "USD";
//#endregion

//#region UrlResources constants
const monaco = "monaco";
const newport = "newport";
const tinymce = "tinymce";
const flexipageStyle = "";
const datasource = "";
const javascriptNumberFormatter = "";
//#endregion

//#region User settings constants
let shortDateFormat = dayjs.localeData().longDateFormat("L");
let datetimeFormat =
  shortDateFormat + " " + dayjs.localeData().longDateFormat("LTS");
let LANG = currentLocale;
let TIMEZONE = localeOptions.timeZone || "America/Los_Angeles";
let newportAssetsUrl = "/newport/assets/";
let sldsAssetsUrl = "/slds/assets/";
//#endregion

// #region Settings override

/**
 * Changes the short date format
 * @param {string} format
 */
function setShortDateFormat(format) {
  shortDateFormat = format;
}

/**
 * Changes the date time format
 * @param {string} format
 */
function setDateTimeFormat(format) {
  datetimeFormat = format;
}

/**
 * Allows to override the current language
 * NOTE: Changing the language will reset the short date and date time formats
 * @param {string} lang
 */
function setLanguage(lang) {
  LANG = lang;
  dayjs.locale(lang);
  shortDateFormat = dayjs.localeData().longDateFormat("L");
  datetimeFormat =
    shortDateFormat + " " + dayjs.localeData().longDateFormat("LTS");
}

/***
 * Allows to override the current timezone
 * @param {string} timezone
 */
function setTimezone(timezone) {
  TIMEZONE = timezone;
}

/**
 * Sets the URL for newport resources
 * @param {string} url
 */
function setNewportResourcesUrl(url) {
  newportAssetsUrl = url;
}

/**
 * Sets the URL for slds resources
 * @param {string} url
 */
function setSldsResourcesUrl(url) {
  sldsAssetsUrl = url;
  setPathPrefix(url.substr(0, url.lastIndexOf("assets/")));
}
//#endregion

// #region Functions
function handleData(data) {
  return Promise.reject("Not implemented");
}

function handleDataCards(data) {
  return Promise.reject("Not implemented");
}

function getCustomLabels(data) {
  return Promise.reject("Not implemented");
}

function getCustomSettings(data) {
  return Promise.reject("Not implemented");
}

function getActionsInfo(data) {
  return Promise.reject("Not implemented");
}

function fetchUserContext(data) {
  return Promise.reject("Not implemented");
}

function isCommunity(data) {
  return Promise.resolve(false);
}

function isInsidePckg(data) {
  return Promise.reject("Not implemented");
}

function trackVlocityInteraction(data) {
  return Promise.reject("Not implemented");
}

function getCustomPermissionsForUser(data) {
  return Promise.reject("Not implemented");
}

function getNewportUrl() {
  return Promise.resolve(newportAssetsUrl);
}

function getResourceUrl(data) {
  return Promise.resolve("");
}

/**
 * Returns the slds assets url
 * @returns {string}
 */
function getSldsResourcesUrl() {
  return sldsAssetsUrl;
}
//#endregion

function getInteractionObject(interactionId) {
  return Promise.reject("Not implemented");
}

function getCommunityName() {
  // Off platform does not need community nema
  return Promise.resolve(null);
}

function getUserProfile() {
  return Promise.reject("Not implemented");
}

export {
  handleData,
  getCustomLabels,
  getCustomSettings,
  LOCALE,
  CURRENCY,
  getActionsInfo,
  fetchUserContext,
  datasource,
  isCommunity,
  isInsidePckg,
  monaco,
  trackVlocityInteraction,
  getCustomPermissionsForUser,
  newport,
  tinymce,
  flexipageStyle,
  javascriptNumberFormatter,
  getNewportUrl,
  getResourceUrl,
  shortDateFormat,
  datetimeFormat,
  LANG,
  TIMEZONE,
  setShortDateFormat,
  setDateTimeFormat,
  setLanguage,
  setTimezone,
  setNewportResourcesUrl,
  setSldsResourcesUrl,
  getSldsResourcesUrl,
  getInteractionObject,
  getCommunityName,
  getUserProfile,
  handleDataCards
};
