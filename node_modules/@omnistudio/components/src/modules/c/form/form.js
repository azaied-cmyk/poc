/*************************************************************************
 *
 * VLOCITY, INC. CONFIDENTIAL
 * __________________
 *
 *  [2014] - [2020] Vlocity, Inc.
 *  All Rights Reserved.
 *
 * NOTICE:  All information contained herein is, and remains
 * the property of Vlocity, Inc. and its suppliers,
 * if any. The intellectual and technical concepts contained
 * herein are proprietary to Vlocity, Inc. and its suppliers and may be
 * covered by U.S. and Foreign Patents, patents in process, and are
 * protected by trade secret or copyright law. Dissemination of this
 * information and reproduction, modification or reverse-engineering
 * of this material, is prohibited unless prior written permission
 * is obtained from Vlocity, Inc.
 *
 * Build: v234.0.0
 */
import { LightningElement, api } from "lwc";
import sldsTemplate from "./form_slds.html";
import ndsTemplate from "./form_nds.html";
import pubsub from "c/pubsub";

export default class VlocityForm extends LightningElement {
  @api method;
  @api action;
  @api layout;
  @api model;
  @api submit;
  @api name = "";
  @api theme = "slds";

  render() {
    if (this.theme === "nds") {
      return ndsTemplate;
    }
    return sldsTemplate;
  }

  renderedCallback() {
    let elemIndex = 1;
    let component = this;
    while (this.querySelector(`*:nth-child(${elemIndex})`)) {
      let element = this.querySelector(`*:nth-child(${elemIndex})`);
      if (element.name) {
        let value =
          component &&
          component.model &&
          component.model[
            element.name.substring(this.name.length + 1) || element.name
          ];
        if (element.type !== "radio") {
          element.value = typeof value !== "undefined" ? value : "";
        }
        if (element.dataset.hasViaFormListener !== "true") {
          element.dataset.hasViaFormListener = "true";
          element.name = this.name + "_" + element.name;
          pubsub.register(element.name, {
            valuechange: this.onValueChange.bind(this)
          });
        }
      }
      elemIndex++;
    }
  }

  onValueChange(event) {
    const key = event.name.substring(this.name.length + 1);
    this.model = Object.assign({}, this.model, {
      [key]: event.value
    });
  }

  get formClass() {
    let formClass = `${this.theme}-form`;
    if (this.layout) {
      formClass += ` ${this.theme}-form_${this.layout}`;
    }
    return formClass;
  }
}
