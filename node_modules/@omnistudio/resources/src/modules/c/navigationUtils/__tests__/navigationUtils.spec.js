/*************************************************************************
 *
 * VLOCITY, INC. CONFIDENTIAL
 * __________________
 *
 *  [2014] - [2020] Vlocity, Inc.
 *  All Rights Reserved.
 *
 * NOTICE:  All information contained herein is, and remains
 * the property of Vlocity, Inc. and its suppliers,
 * if any. The intellectual and technical concepts contained
 * herein are proprietary to Vlocity, Inc. and its suppliers and may be
 * covered by U.S. and Foreign Patents, patents in process, and are
 * protected by trade secret or copyright law. Dissemination of this
 * information and reproduction, modification or reverse-engineering
 * of this material, is prohibited unless prior written permission
 * is obtained from Vlocity, Inc.
 *
 * Build: v109.0.0
 */
import { parseParams, stringifyParams, normalizeParams } from 'c/navigationUtils';


describe('test navigationUtils', () => {

    describe('parseParams', () => {
        it('?abc=123', () => {
            expect(parseParams('?abc=123')).toEqual({
                abc: '123'
            });
        });

        it('abc=123', () => {
            expect(parseParams('abc=123')).toEqual({
                abc: '123'
            });
        });

        it('abc', () => {
            expect(parseParams('abc')).toEqual({
                abc: undefined
            });
        });

        it('abc=123&def=abc', () => {
            expect(parseParams('abc=123&def=abc')).toEqual({
                abc: '123',
                def: 'abc'
            });
        });

        it('abc=123&abc=abc', () => {
            expect(parseParams('abc=123&abc=abc')).toEqual({
                abc: ['123', 'abc']
            });
        });

        it('abc=123,abc', () => {
            expect(parseParams('abc=123,abc')).toEqual({
                abc: ['123', 'abc']
            });
        });

        it('abc=123&abc=abc&abc=def', () => {
            expect(parseParams('abc=123&abc=abc&abc=def')).toEqual({
                abc: ['123', 'abc', 'def']
            });
        });

        it('null', () => {
            expect(parseParams(null)).toEqual({
            });
        });

        it('no params', () => {
            expect(parseParams()).toEqual({
            });
        });
    });

    describe('stringifyParams', () => {

        it('simple one param', () => {
            expect(stringifyParams({ abc: '123' })).toEqual('?c__abc=123');
        });

        it('simple two param', () => {
            expect(stringifyParams({ abc: '123', def: 'abc' })).toEqual('?c__abc=123&c__def=abc');
        });

        it('one param with array', () => {
            expect(stringifyParams({ abc: ['123', 'abc'] })).toEqual('?c__abc=123,abc');
        });


        it('one param with array of 3 values', () => {
            expect(stringifyParams({ abc: ['123', 'abc', 'def'] })).toEqual('?c__abc=123,abc,def');
        });

        xit('key has = in name', () => {
            expect(stringifyParams({ "ab=c": '123' })).toEqual('?c__ab=c=123');
        });

        xit('value has & in name', () => {
            expect(stringifyParams({ "abc": '12&3' })).toEqual('?c__abc=12&3');
        });

        it('value is undefined', () => {
            expect(stringifyParams({ "abc": undefined })).toEqual('?');
        });
    });

    describe('normalizeParams', () => {

        it('removes namespace', () => {
            expect(normalizeParams({
                'c__abc': '123'
            })).toEqual({
                abc: '123'
            });
        });

        it('removes custom namespace', () => {
            expect(normalizeParams({
                'vlocity_ins__abc': '123'
            })).toEqual({
                abc: '123'
            });
        });

        it('no namespace', () => {
            expect(normalizeParams({
                'abc': '123'
            })).toEqual({
                abc: '123'
            });
        });

        xit('no args', () => {
            expect(normalizeParams()).toEqual({});
        });


    })

});
