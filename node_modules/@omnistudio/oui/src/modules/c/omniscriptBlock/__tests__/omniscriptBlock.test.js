/*************************************************************************
 *
 * VLOCITY, INC. CONFIDENTIAL
 * __________________
 *
 *  [2014] - [2020] Vlocity, Inc.
 *  All Rights Reserved.
 *
 * NOTICE:  All information contained herein is, and remains
 * the property of Vlocity, Inc. and its suppliers,
 * if any. The intellectual and technical concepts contained
 * herein are proprietary to Vlocity, Inc. and its suppliers and may be
 * covered by U.S. and Foreign Patents, patents in process, and are
 * protected by trade secret or copyright law. Dissemination of this
 * information and reproduction, modification or reverse-engineering
 * of this material, is prohibited unless prior written permission
 * is obtained from Vlocity, Inc.
 *
 * Build: v234.0.0
 */
import { createElement } from 'lwc';
import TestContainer from './testContainer/testContainer';
import { delay } from 'c/asyncUtils';

describe('c-test-block', () => {
    const mockJsonDef = require('./mocks/jsonDef.json');
    const mockJsonDefWithText = require('./mocks/jsonDefWithText.json');
    const mockScriptHeaderDef = require('./mocks/scriptHeaderDef.json');

    let container = null;

    beforeEach(() => {
        container = createElement('c-test-container', {
            is: TestContainer,
        });
        container.layout = 'lightning';
        container.jsonDef = mockJsonDef;
        container.scriptHeaderDef = mockScriptHeaderDef;
    });

    afterEach(() => {
        while (document.body.firstChild) {
            document.body.removeChild(document.body.firstChild);
        }
        container = null;
    });

    it('renders lightning', () => {
        container.layout = 'lightning';
        document.body.appendChild(container);
        const block = container.shadowRoot.querySelector('c-omniscript-block');
        expect(block.shadowRoot.querySelector('.slds-accordion')).toBeTruthy();
    });

    it('renders newport', () => {
        container.layout = 'newport';
        document.body.appendChild(container);
        const block = container.shadowRoot.querySelector('c-omniscript-block');
        expect(block.shadowRoot.querySelector('.nds-block_container')).toBeTruthy();
    });

    it('can repeat', () => {
        const mock = JSON.parse(JSON.stringify(mockJsonDef));
        mock.propSetMap.repeat = true;
        container.jsonDef = mock;
        document.body.appendChild(container);
        const block = container.shadowRoot.querySelector('c-omniscript-block');
        const repeatButton = block.shadowRoot.querySelector('.slds-button-group > c-button');
        return new Promise(resolve => {
            block.addEventListener('omnirepeat', () => resolve());
            repeatButton.click();
        });
    });

    it('should show a count for clones', () => {
        const mock = JSON.parse(JSON.stringify(mockJsonDef));
        mock.propSetMap.repeat = true;
        mock.ct = 2;
        mock.index = 1;
        container.jsonDef = mock;

        document.body.appendChild(container);
        const block = container.shadowRoot.querySelector('c-omniscript-block');
        const h3 = block.shadowRoot.querySelector('h3');

        expect(h3.textContent).toBe('Block1 2');
    });

    // eslint-disable-next-line @lwc/lwc/no-async-await
    it('can collapse', async () => {
        document.body.appendChild(container);

        const block = container.shadowRoot.querySelector('c-omniscript-block');
        const button = block.shadowRoot.querySelector('button');
        const section = block.shadowRoot.querySelector('section');

        // should be expanded by default
        expect(section.className.includes('slds-is-open')).toBe(true);
        expect(button.getAttribute('aria-expanded')).toBe('true');

        button.click();
        await delay(0);

        // should collapse
        expect(section.className.includes('slds-is-open')).toBe(false);
        expect(button.getAttribute('aria-expanded')).toBe('false');
    });

    // eslint-disable-next-line @lwc/lwc/no-async-await
    it('can expand', async () => {
        const mock = JSON.parse(JSON.stringify(mockJsonDef));
        mock.propSetMap.collapse = true;
        container.jsonDef = mock;
        document.body.appendChild(container);

        const block = container.shadowRoot.querySelector('c-omniscript-block');
        const button = block.shadowRoot.querySelector('button');
        const section = block.shadowRoot.querySelector('section');

        // should be collapsed by default
        expect(section.className.includes('slds-is-open')).toBe(false);
        expect(button.getAttribute('aria-expanded')).toBe('false');

        button.click();
        await delay(0);

        // should expand
        expect(section.className.includes('slds-is-open')).toBe(true);
        expect(button.getAttribute('aria-expanded')).toBe('true');
    });

    it('can have nested elements', () => {
        container.jsonDef = mockJsonDefWithText;
        document.body.appendChild(container);

        const block = container.shadowRoot.querySelector('c-omniscript-block');

        expect(block.querySelector('c-omniscript-text')).toBeTruthy();
    });

    it('should be invalid if a nested element is invalid', () => {
        container.jsonDef = mockJsonDefWithText;
        document.body.appendChild(container);

        const block = container.shadowRoot.querySelector('c-omniscript-block');
        const text = block.querySelector('c-omniscript-text');
        const input = text.shadowRoot.querySelector('c-input');
        input.setCustomValidity('invalid');
        input.dispatchEvent(new CustomEvent('blur'));

        expect(block.reportValidity()).toBe(false);
    });

    // eslint-disable-next-line @lwc/lwc/no-async-await
    it('should show an error message if collapsed', async () => {
        container.jsonDef = mockJsonDefWithText;
        document.body.appendChild(container);

        const block = container.shadowRoot.querySelector('c-omniscript-block');
        const text = block.querySelector('c-omniscript-text');
        const input = text.shadowRoot.querySelector('c-input');

        input.setCustomValidity('invalid');
        input.dispatchEvent(new CustomEvent('blur'));

        const button = block.shadowRoot.querySelector('button');
        button.click();
        await delay(0);

        block.reportValidity();
        await delay(0);

        const error = block.shadowRoot.querySelector('.slds-has-error');
        expect(error).toBeTruthy();
    });

    // eslint-disable-next-line @lwc/lwc/no-async-await
    it('should focus the first element on clone', async () => {
        const mock = JSON.parse(JSON.stringify(mockJsonDef));
        mock.newClone = true;
        container.jsonDef = mock;
        container.testFocus = true;
        document.body.appendChild(container);

        await delay(0);
        expect(container.didFocus).toBe(true);
    });
});
