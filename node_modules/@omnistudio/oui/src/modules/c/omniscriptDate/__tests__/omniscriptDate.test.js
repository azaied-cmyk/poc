/*************************************************************************
 *
 * VLOCITY, INC. CONFIDENTIAL
 * __________________
 *
 *  [2014] - [2020] Vlocity, Inc.
 *  All Rights Reserved.
 *
 * NOTICE:  All information contained herein is, and remains
 * the property of Vlocity, Inc. and its suppliers,
 * if any. The intellectual and technical concepts contained
 * herein are proprietary to Vlocity, Inc. and its suppliers and may be
 * covered by U.S. and Foreign Patents, patents in process, and are
 * protected by trade secret or copyright law. Dissemination of this
 * information and reproduction, modification or reverse-engineering
 * of this material, is prohibited unless prior written permission
 * is obtained from Vlocity, Inc.
 *
 * Build: v234.0.0
 */
import { createElement } from 'lwc';
import OmniscriptDate from 'c/omniscriptDate';
import { delay } from 'c/asyncUtils';

jest.mock(
    '@salesforce/label/c.cmpDayJsLocaleFormats',
    () => ({
        default:
            '{"name":"en","weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"months":["January","February","March","April","May","June","July","August","September","October","November","December"]}',
    }),
    {
        virtual: true,
    },
);

jest.mock(
    '@salesforce/label/c.cmpLocaleFormatsInvalid',
    () => ({
        default:
            'Unable to render due to invalid localeFormat. Please provide a valid localeFormat in the form of {"name":"en","weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"months":["January","February","March","April","May","June","July","August","September","October","November","December"]}',
    }),
    {
        virtual: true,
    },
);

jest.mock(
    '@salesforce/label/c.cmpRangeUnderflow',
    () => ({
        default: 'Date is before allowed range.',
    }),
    {
        virtual: true,
    },
);

jest.mock(
    '@salesforce/label/c.cmpRangeOverflow',
    () => ({
        default: 'Date is after allowed range.',
    }),
    {
        virtual: true,
    },
);

jest.mock(
    '@salesforce/label/c.cmpFieldValueMissing',
    () => ({
        default: 'Complete this field.',
    }),
    {
        virtual: true,
    },
);

describe('c-omniscript-date', () => {
    const mockJsonDef = require('./mock.json');
    let date = null;

    beforeEach(() => {
        date = createElement('c-omniscript-date', {
            is: OmniscriptDate,
        });
        date.key = mockJsonDef.name;
        date.jsonDef = mockJsonDef;
        date.dataOmniKey = mockJsonDef.index;
        date.jsonData = null;
        date.layout = 'lightning';
        date.scriptHeaderDef = {
            allCustomLabels: {},
            propSetMap: {},
        };
    });

    afterEach(() => {
        while (document.body.firstChild) {
            document.body.removeChild(document.body.firstChild);
        }
        date = null;
    });

    it('renders', () => {
        document.body.appendChild(date);
        expect(date.shadowRoot.children).not.toHaveLength(0);

        const input = date.shadowRoot.querySelector('c-input');
        expect(input).toBeTruthy();

        const datePicker = input.shadowRoot.querySelector('c-date-picker');
        expect(datePicker).toBeTruthy();
    });

    it('can set a value', () => {
        document.body.appendChild(date);
        const input = date.shadowRoot.querySelector('c-input');
        input.value = '2021-01-01';
        return new Promise(resolve => {
            date.addEventListener('omniaggregate', ({ detail: { data } }) => {
                expect(data).toBe('2021-01-01');
                resolve();
            });
            input.dispatchEvent(new CustomEvent('change'));
        });
    });

    it('can repeat', () => {
        const mock = JSON.parse(JSON.stringify(mockJsonDef));
        mock.propSetMap.repeat = true;
        date.jsonDef = mock;
        document.body.appendChild(date);
        const repeatButton = date.shadowRoot.querySelector('.omni-repeat-button-group > button');
        return new Promise(resolve => {
            date.addEventListener('omnirepeat', () => resolve());
            repeatButton.click();
        });
    });

    // eslint-disable-next-line @lwc/lwc/no-async-await
    it('can set a valid date string from an api', async () => {
        document.body.appendChild(date);
        const input = date.shadowRoot.querySelector('c-input');

        date.applyCallResp('2021-01-01', true);
        await delay(0);
        expect(input.value).toBe('2021-01-01');

        date.applyCallResp('01-01-2021', true);
        await delay(0);
        expect(input.value).toBe('2021-01-01');
    });

    // eslint-disable-next-line @lwc/lwc/no-async-await
    it('should set null for an invalid date string from an api', async () => {
        document.body.appendChild(date);
        const input = date.shadowRoot.querySelector('c-input');

        date.applyCallResp('foobar', true);
        await delay(0);
        expect(input.value).toBeNull();
    });

    // eslint-disable-next-line @lwc/lwc/no-async-await
    it('should set null for an empty string from an api', async () => {
        document.body.appendChild(date);
        const input = date.shadowRoot.querySelector('c-input');

        date.applyCallResp('2021-01-01', true);
        await delay(0);

        date.applyCallResp('', true);
        await delay(0);
        expect(input.value).toBeNull();
    });

    // eslint-disable-next-line @lwc/lwc/no-async-await
    it('can set a date object from the api', async () => {
        const mock = JSON.parse(JSON.stringify(mockJsonDef));
        mock.propSetMap.dateType = 'date';
        date.jsonDef = mock;
        document.body.appendChild(date);
        const input = date.shadowRoot.querySelector('c-input');

        // january is 0
        date.applyCallResp(new Date(2021, 0, 1), true);
        await delay(0);
        expect(input.value).toBeInstanceOf(Date);
        expect(input.value.toLocaleDateString()).toBe('1/1/2021');
    });

    // eslint-disable-next-line @lwc/lwc/no-async-await
    it('can set date for today from the api', async () => {
        const mock = JSON.parse(JSON.stringify(mockJsonDef));
        mock.propSetMap.dateType = 'date';
        date.jsonDef = mock;
        document.body.appendChild(date);
        const input = date.shadowRoot.querySelector('c-input');

        date.applyCallResp('today', true);
        await delay(0);
        expect(input.value).toBeInstanceOf(Date);
    });
});
