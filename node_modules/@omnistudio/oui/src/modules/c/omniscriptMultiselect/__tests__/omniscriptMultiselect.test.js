/*************************************************************************
 *
 * VLOCITY, INC. CONFIDENTIAL
 * __________________
 *
 *  [2014] - [2020] Vlocity, Inc.
 *  All Rights Reserved.
 *
 * NOTICE:  All information contained herein is, and remains
 * the property of Vlocity, Inc. and its suppliers,
 * if any. The intellectual and technical concepts contained
 * herein are proprietary to Vlocity, Inc. and its suppliers and may be
 * covered by U.S. and Foreign Patents, patents in process, and are
 * protected by trade secret or copyright law. Dissemination of this
 * information and reproduction, modification or reverse-engineering
 * of this material, is prohibited unless prior written permission
 * is obtained from Vlocity, Inc.
 *
 * Build: v234.0.0
 */
import { createElement } from 'lwc';
import OmniscriptMultiselect from 'c/omniscriptMultiselect';
import { delay } from 'c/asyncUtils';

describe('c-omniscript-multiselect', () => {
    const mockVerticalJsonDef = require('./mocks/vertical.json');
    const mockImageJsonDef = require('./mocks/image.json');
    let element = null;

    beforeEach(() => {
        element = createElement('c-omniscript-multiselect', {
            is: OmniscriptMultiselect,
        });
        element.key = mockImageJsonDef.name;
        element.jsonDef = mockImageJsonDef;
        element.dataOmniKey = mockImageJsonDef.index;
        element.jsonData = null;
        element.layout = 'newport';
        element.scriptHeaderDef = { allCustomLabels: {} };
    });

    afterEach(() => {
        while (document.body.firstChild) {
            document.body.removeChild(document.body.firstChild);
        }
    });

    it('renders DOM elements (image)', () => {
        document.body.appendChild(element);
        expect(element.shadowRoot.children).not.toHaveLength(0);
        expect(element.shadowRoot.querySelector('c-checkbox-image-group')).toBeTruthy();
    });

    it('renders DOM elements (vertical)', () => {
        element.key = mockVerticalJsonDef.name;
        element.jsonDef = mockVerticalJsonDef;
        element.dataOmniKey = mockVerticalJsonDef.index;
        document.body.appendChild(element);
        expect(element.shadowRoot.children).not.toHaveLength(0);
        expect(element.shadowRoot.querySelector('c-checkbox-group')).toBeTruthy();
    });

    it('Test value is change', () => {
        document.body.appendChild(element);
        return new Promise(resolve => {
            const input = element.shadowRoot.querySelector('c-checkbox-image-group');
            element.addEventListener('omniaggregate', event => {
                expect(event.detail.data).toBe('cards');
                resolve();
            });
            input.value = 'cards';
            input.dispatchEvent(new CustomEvent('change', {}));
        });
    });

    it('can repeat', () => {
        const mock = JSON.parse(JSON.stringify(mockImageJsonDef));
        mock.propSetMap.repeat = true;
        element.jsonDef = mock;
        document.body.appendChild(element);

        const repeatButton = element.shadowRoot.querySelector('.omni-repeat-button-group > button');
        return new Promise(resolve => {
            element.addEventListener('omnirepeat', () => {
                resolve();
            });
            repeatButton.click();
        });
    });

    it('can set values from the api', () => {
        document.body.appendChild(element);
        return new Promise(resolve => {
            element.addEventListener('omniaggregate', event => {
                expect(event.detail.data).toBe('omniscript;cards');
                resolve();
            });
            element.applyCallResp('omniscript;cards', true);
        });
    });

    // eslint-disable-next-line @lwc/lwc/no-async-await
    it('should not set invalid values from the api', async () => {
        document.body.appendChild(element);
        const input = element.shadowRoot.querySelector('c-checkbox-image-group');

        element.applyCallResp(';;;', true);
        await delay(0);
        expect(input.value).toBe('');

        element.applyCallResp('123', true);
        await delay(0);
        expect(input.value).toBe('');
    });

    it('should clear custom validity on focusout', () => {
        document.body.appendChild(element);
        element.applyCallResp('custom error', false, true);
        expect(element.reportValidity()).toBe(false);

        const group = element.shadowRoot.querySelector('c-checkbox-image-group');
        element.focus();
        expect(element.reportValidity()).toBe(false);

        group.dispatchEvent(new CustomEvent('focusout', { bubbles: true }));
        expect(element.reportValidity()).toBe(true);
    });

    it('should set value after clearing custom validity', () => {
        document.body.appendChild(element);
        element.applyCallResp('custom error', false, true);

        const group = element.shadowRoot.querySelector('c-checkbox-image-group');
        element.focus();

        return new Promise(resolve => {
            element.addEventListener('omniaggregate', event => {
                expect(event.detail.data).toBe('cards');
                resolve();
            });
            group.value = 'cards';
            group.dispatchEvent(new CustomEvent('focusout', { bubbles: true }));
        });
    });
});
