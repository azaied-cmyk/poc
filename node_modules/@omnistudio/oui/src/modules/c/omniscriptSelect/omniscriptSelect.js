/*************************************************************************
 *
 * VLOCITY, INC. CONFIDENTIAL
 * __________________
 *
 *  [2014] - [2020] Vlocity, Inc.
 *  All Rights Reserved.
 *
 * NOTICE:  All information contained herein is, and remains
 * the property of Vlocity, Inc. and its suppliers,
 * if any. The intellectual and technical concepts contained
 * herein are proprietary to Vlocity, Inc. and its suppliers and may be
 * covered by U.S. and Foreign Patents, patents in process, and are
 * protected by trade secret or copyright law. Dissemination of this
 * information and reproduction, modification or reverse-engineering
 * of this material, is prohibited unless prior written permission
 * is obtained from Vlocity, Inc.
 *
 * Build: v234.0.0
 */
/**
 * @module ns/omniscriptSelect
 * @description This component is used to render a Select element, This is extends from mixins class `OmniscriptOptionsMixin`, `OmniscriptAtomicElement`.
 * `OmniscriptOptionsMixin` mixin class is used for validating prefill data for select.
 */
import OmniscriptAtomicElement from 'c/omniscriptAtomicElement';
import { autoAdvance } from 'c/omniscriptInternalUtils';
import { OmniscriptOptionsMixin } from 'c/omniscriptOptionsMixin';
import tmpl from './omniscriptSelect.html';

/**
 * Default exported class OmniscriptSelect.
 * @extends OmniscriptOptionsMixin(OmniscriptAtomicElement)
 * @typicalname OmniscriptSelect
 */
export default class OmniscriptSelect extends OmniscriptOptionsMixin(OmniscriptAtomicElement) {
    /**
     * @type {Array} - overwritten private variable.
     * @scope private
     */
    _initialOptions = []; // overwritten private variable
    _isReadOnly = true;

    /**
     * OnChange Event Handler. Applies the changed value directly to the response
     * @returns {void}
     * @scope private
     */
    handleChange(evt) {
        this.applyCallResp(evt.target.value);
        autoAdvance(this._propSetMap.options, evt.target.value, this);
    }

    /**
     * @description Gets the classes to be passed into the combobox's <label>
     * @returns {String}
     */
    get labelClasses() {
        return this._propSetMap.repeat && this._handleHelpText && this._theme === 'nds' && this.canRemove ? 'nds-form_repeatable' : '';
    }

    initCompVariables() {
        this._initialOptions = [{ name: '', value: this.allCustomLabelsUtil.OmniClear }];
        super.initCompVariables();
    }

    /**
     * @scope private
     * @description Overwrites the native LWC render.
     * @returns {Template}
     */
    render() {
        return tmpl;
    }
}
