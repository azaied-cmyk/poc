/*************************************************************************
 *
 * VLOCITY, INC. CONFIDENTIAL
 * __________________
 *
 *  [2014] - [2020] Vlocity, Inc.
 *  All Rights Reserved.
 *
 * NOTICE:  All information contained herein is, and remains
 * the property of Vlocity, Inc. and its suppliers,
 * if any. The intellectual and technical concepts contained
 * herein are proprietary to Vlocity, Inc. and its suppliers and may be
 * covered by U.S. and Foreign Patents, patents in process, and are
 * protected by trade secret or copyright law. Dissemination of this
 * information and reproduction, modification or reverse-engineering
 * of this material, is prohibited unless prior written permission
 * is obtained from Vlocity, Inc.
 *
 * Build: v234.0.0
 */
import { createElement } from 'lwc';

import OmniscriptPassword from 'c/omniscriptPassword';

describe('c-omniscript-password', () => {
    const mockGetRecord = require('./mock.json');
    let element = null;

    beforeEach(() => {
        element = createElement('c-omniscript-password', {
            is: OmniscriptPassword,
        });
        element.key = mockGetRecord.name;
        element.jsonDef = mockGetRecord;
        element.dataOmniKey = mockGetRecord.index;
        element.jsonData = null;
        element.layout = 'lightning';
        element.scriptHeaderDef = {
            allCustomLabels: { OmniTextRepeatAltText: 'OmniTextRepeatAltText', OmniTextRemoveAltText: 'OmniTextRemoveAltText' },
            propSetMap: {},
        };

        document.body.appendChild(element);
    });

    afterEach(() => {
        while (document.body.firstChild) {
            document.body.removeChild(document.body.firstChild);
        }
    });

    it('should render DOM in Lightning mode', () => {
        expect(element.shadowRoot.children).not.toHaveLength(0);
        expect(element.jsonDef.response).toBe(null);
        expect(element.shadowRoot.querySelector('c-input')).toBeTruthy();
    });

    it('should emit omniaggregate when detecting password change', () => {
        return new Promise(resolve => {
            const input = element.shadowRoot.querySelector('c-input');
            element.addEventListener('omniaggregate', event => {
                expect(event.detail.data).toBe('12345');
                resolve();
            });
            input.value = '12345';
            input.dispatchEvent(new CustomEvent('blur', {}));
        });
    });

    it('should emit omniformatteddata when formatting password', () => {
        return new Promise(resolve => {
            const input = element.shadowRoot.querySelector('c-input');
            element.addEventListener('omniformatteddata', event => {
                expect(event.detail.value).toBe('*****');
                resolve();
            });
            input.value = '12345';
            input.dispatchEvent(new CustomEvent('blur', {}));
        });
    });

    it('should emit omnirepeat when repeat button is clicked', () => {
        let jsonDefCopy = JSON.parse(JSON.stringify(mockGetRecord));
        jsonDefCopy.propSetMap.repeat = true;
        element.jsonDef = jsonDefCopy;
        document.body.appendChild(element);
        const addButton = element.shadowRoot.querySelector('.omni-repeat-button-group > button');
        return new Promise(resolve => {
            element.addEventListener('omnirepeat', () => resolve());
            addButton.click();
        });
    });
});
