/*************************************************************************
 *
 * VLOCITY, INC. CONFIDENTIAL
 * __________________
 *
 *  [2014] - [2020] Vlocity, Inc.
 *  All Rights Reserved.
 *
 * NOTICE:  All information contained herein is, and remains
 * the property of Vlocity, Inc. and its suppliers,
 * if any. The intellectual and technical concepts contained
 * herein are proprietary to Vlocity, Inc. and its suppliers and may be
 * covered by U.S. and Foreign Patents, patents in process, and are
 * protected by trade secret or copyright law. Dissemination of this
 * information and reproduction, modification or reverse-engineering
 * of this material, is prohibited unless prior written permission
 * is obtained from Vlocity, Inc.
 *
 * Build: v234.0.0
 */
import { OmniscriptBaseActionUtil } from './omniscriptBaseActionUtil';
import { handleExpressionEngine } from 'c/omniscriptInternalUtils';

export class OmniscriptSetValuesUtil extends OmniscriptBaseActionUtil {
    // this._element is passed from the constructor

    /**
     * @description Preprocesses data. Overwrites inherited preProcess.
     * @param {Object} params
     * @param {String} queueableRespId
     * @param {*} comp
     * @param {Object} payload
     * @param {Object} vlcParams
     * @returns {Object}
     */
    // eslint-disable-next-line no-unused-vars
    preProcess(params, queueableRespId, comp, payload, vlcParams) {
        const data = { error: false };

        if (this._element.propSetMap.elementValueMap) {
            data.result = this.processValueMap(this._element.propSetMap.elementValueMap, comp);
        }

        return Promise.resolve(data);
    }

    /**
     * @description Processes element's property set value map.
     * @param {Object} valueMap
     * @param {*} comp
     * @returns {Object}
     */
    processValueMap(valueMap, comp) {
        let valueMapStr = JSON.stringify(valueMap);
        valueMapStr = handleExpressionEngine(valueMapStr, comp.jsonDef, this.getCompJsonData(comp), comp.scriptHeaderDef.labelMap);
        valueMapStr = this.handleMergeFieldUtil(
            valueMapStr,
            this.getCompJsonData(comp),
            comp.scriptHeaderDef.labelMap,
            this.isRepeatNotationUtil(valueMapStr) ? comp.jsonDef.JSONPath : null,
        );

        return JSON.parse(valueMapStr);
    }
}
