/*************************************************************************
 *
 * VLOCITY, INC. CONFIDENTIAL
 * __________________
 *
 *  [2014] - [2020] Vlocity, Inc.
 *  All Rights Reserved.
 *
 * NOTICE:  All information contained herein is, and remains
 * the property of Vlocity, Inc. and its suppliers,
 * if any. The intellectual and technical concepts contained
 * herein are proprietary to Vlocity, Inc. and its suppliers and may be
 * covered by U.S. and Foreign Patents, patents in process, and are
 * protected by trade secret or copyright law. Dissemination of this
 * information and reproduction, modification or reverse-engineering
 * of this material, is prohibited unless prior written permission
 * is obtained from Vlocity, Inc.
 *
 * Build: v234.0.0
 */
import { track, api, LightningElement } from 'lwc';
import tmpl_nds from './omniscriptEditBlockLabel_nds.html';
import tmpl from './omniscriptEditBlockLabel.html';
import { createGlobalActionList } from 'c/omniscriptEditBlockUtils';
import { handleMultiLangLabel } from 'c/omniscriptCustomLabels';
import { sendHttpDataToDebugConsole, RUN_MODES } from 'c/omniscriptInternalUtils';
import { dispatchOmniEvent } from 'c/omniscriptUtils';
/**
 * @module ns/omniscriptEditBlockLabel
 */
export default class OmniscriptEditBlockLabel extends LightningElement {
    @api jsonDef;
    @api layout;
    @api resume;
    @api runMode = RUN_MODES.PLAYER;
    @api jsonData;
    @api jsonDataStr;
    @api scriptHeaderDef;
    @track isPageLoading = false;
    @api mode;

    get _isDesignMode() {
        return this.runMode === RUN_MODES.DESIGNER;
    }
    _showLabel = false;
    /**
     * @type {Object} Contains the global actions for edit block
     * @scope private
     */
    _gActions = [];
    /**
     * @description Button spinner flag.
     * @type {Boolean}
     * @scope private
     */
    isBtnLoading = false;
    _jsonDef;
    _jsonData;
    _propSetMap;
    dispatchOmniEventUtil = dispatchOmniEvent;
    /**
     * Initializes private component variables
     */
    initCompVariables() {
        // backwards compat, template name will override the mode property to determine template to use
        this._isInline = this.mode === 'Inline';
        this._isFS = this.mode === 'FS';
        this._isTable = this.mode === 'Table' || this.mode === '';
        this._isCards = this.mode === 'Cards';
        this._isLongCards = this.mode === 'LongCards';

        let templateName = this._jsonDef.propSetMap.HTMLTemplateId;

        let hasTemplate = this._isInline || this._isFS || this._isTable || this._isCards || this._isLongCards;

        if (!hasTemplate) {
            if (templateName === 'vlcEditBlockInline.html') {
                this._isInline = true;
            } else if (templateName === 'vlcEditBlockFS.html') {
                this._isFS = true;
            } else if (templateName === 'vlcEditBlock.html' || templateName === '') {
                this._isTable = true;
            } else if (templateName === 'vlcEditBlockCards.html') {
                this._isCards = true;
            } else if (templateName === 'vlcEditBlockLongCards.html') {
                this._isLongCards = true;
            }
        }

        if (this._propSetMap.gActions) {
            createGlobalActionList(this, this._propSetMap.gActions);
        }

        this._showLabel = this._isCards || this._isLongCards;
    }

    sendDataToDebugConsole(params, resp, label) {
        sendHttpDataToDebugConsole(this, params, resp, label, this._jsonDef, 'omniactiondebug');
    }

    connectedCallback() {
        if (this.jsonDef) {
            this._jsonData = this.jsonData;
            this._jsonDef = this.jsonDef.eleArray[0];
            this._propSetMap = this._jsonDef.propSetMap;
            this._multiLang = this.scriptHeaderDef.multiLang;
            this.allCustomLabelsUtil = this.scriptHeaderDef.allCustomLabels;
            if (this._multiLang && !this._isDesignMode) {
                this._propSetMap = JSON.parse(JSON.stringify(this._jsonDef.propSetMap));
                handleMultiLangLabel(this._jsonDef.type, this._propSetMap, this.scriptHeaderDef.allCustomLabels);
                // translate the global action's properties
                if (this._propSetMap.gActions) {
                    this._propSetMap.gActions.forEach(gAction => {
                        handleMultiLangLabel(gAction.type, gAction.propSetMap, this.scriptHeaderDef.allCustomLabels);
                    });
                }
            }
            this.mode = this._propSetMap.mode;
            this._theme = this.layout === 'newport' ? 'nds' : 'slds';
            this.initCompVariables();
            this.classList.add(`${this._theme}-size_1-of-1`);
            this.classList.add(`${this._theme}-m-vertical_small`);
        }
    }

    render() {
        if (this._isDesignMode) {
            this.initCompVariables();
        }
        return this.layout === 'newport' ? tmpl_nds : tmpl;
    }
}
