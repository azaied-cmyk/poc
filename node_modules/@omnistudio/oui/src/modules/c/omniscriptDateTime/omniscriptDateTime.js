/*************************************************************************
 *
 * VLOCITY, INC. CONFIDENTIAL
 * __________________
 *
 *  [2014] - [2020] Vlocity, Inc.
 *  All Rights Reserved.
 *
 * NOTICE:  All information contained herein is, and remains
 * the property of Vlocity, Inc. and its suppliers,
 * if any. The intellectual and technical concepts contained
 * herein are proprietary to Vlocity, Inc. and its suppliers and may be
 * covered by U.S. and Foreign Patents, patents in process, and are
 * protected by trade secret or copyright law. Dissemination of this
 * information and reproduction, modification or reverse-engineering
 * of this material, is prohibited unless prior written permission
 * is obtained from Vlocity, Inc.
 *
 * Build: v234.0.0
 */
import OmniscriptAtomicElement from 'c/omniscriptAtomicElement';
import { dateFormatCompatability, timeFormatCompatability, parseChronoAttributes, resetDateTimeValue } from 'c/omniscriptUtils';
import dayjs from 'c/dayjs';
import tmpl from './omniscriptDateTime.html';

/**
 * Omniscript Date Time Element
 */
export default class OmniscriptDateTime extends OmniscriptAtomicElement {
    _setValueStrict = false;

    handleBlur() {}

    handleChange() {
        this.applyCallResp(this.childInput.value);
    }

    get defaultValue() {
        let dfltValue = super.defaultValue;
        return parseChronoAttributes(dfltValue);
    }

    validateData(data) {
        var valid = data == null || data === '';
        var asDate, useAsDate;
        if (!valid && data) {
            valid =
                data.constructor === Date ||
                ((asDate = dayjs(data)
                    .utc()
                    .toDate()),
                (useAsDate = asDate.toString() !== 'Invalid Date'),
                useAsDate);
        }
        if (!valid) {
            asDate = parseChronoAttributes(data);
            if (asDate != null) {
                useAsDate = true;
                valid = true;
            }
        }
        return { valid: valid, dataToApply: useAsDate ? asDate : data };
    }

    initCompVariables() {
        super.initCompVariables();
        this._messageWhenBadInput = this.allCustomLabelsUtil.OmniValidationBadInputDate;
        if (this.jsonDef && this._propSetMap) {
            if (this._propSetMap.timezone) {
                switch (this._propSetMap.timezone) {
                    case 'User':
                        this._timezone = -1 * this.jsonData.userTimeZone;
                        break;
                    case 'Local':
                    default:
                        this._timezone = new Date().getTimezoneOffset();
                }
            }
            if (!this._propSetMap.strictDateFormatting) {
                if (this._propSetMap.dateFormat) {
                    this._dateFormat = dateFormatCompatability(this._propSetMap.dateFormat);
                }
                if (this._propSetMap.timeFormat) {
                    this._timeFormat = timeFormatCompatability(this._propSetMap.timeFormat);
                }
            }
            if (this._propSetMap.minDate) {
                this._min = parseChronoAttributes(this._propSetMap.minDate, 'minDate');
            }
            if (this._propSetMap.maxDate) {
                this._max = parseChronoAttributes(this._propSetMap.maxDate, 'maxDate');
            }
            this._messageWhenRangeOverflow =
                String(this.allCustomLabelsUtil.OmniDateDisabledDay + ' ' + this.allCustomLabelsUtil.OmniDateMax) + ' %max%';
            this._messageWhenRangeUnderflow =
                String(this.allCustomLabelsUtil.OmniDateDisabledDay + ' ' + this.allCustomLabelsUtil.OmniDateMin) + ' %min%';

            this._timeInterval = this._propSetMap.timeInterval || 30;
        }
    }

    connectedCallback() {
        super.connectedCallback();

        // If jsonDef.response already exists when the component gets constructed (due to cloning, etc), any user
        // timezone offset for the dateTimeElementValue needs to be reset
        if (this.jsonDef.response && this._propSetMap.timezone === 'User') {
            this.elementValue = resetDateTimeValue(new Date(this.jsonDef.response), this._timezone) || this.jsonDef.response;
        }
    }

    setElementFormattedValue() {
        if (this.childInput) {
            const dispVal = this.childInput.displayValue;
            // odd structure to only call getter once;
            if (dispVal != null) {
                this._elementFormattedValue = dispVal;
            }
        }
        super.setElementFormattedValue();
    }

    render() {
        return tmpl;
    }
}
