/*************************************************************************
 *
 * VLOCITY, INC. CONFIDENTIAL
 * __________________
 *
 *  [2014] - [2020] Vlocity, Inc.
 *  All Rights Reserved.
 *
 * NOTICE:  All information contained herein is, and remains
 * the property of Vlocity, Inc. and its suppliers,
 * if any. The intellectual and technical concepts contained
 * herein are proprietary to Vlocity, Inc. and its suppliers and may be
 * covered by U.S. and Foreign Patents, patents in process, and are
 * protected by trade secret or copyright law. Dissemination of this
 * information and reproduction, modification or reverse-engineering
 * of this material, is prohibited unless prior written permission
 * is obtained from Vlocity, Inc.
 *
 * Build: v234.0.0
 */
import { createElement } from 'lwc';
import OmniscriptDateTime from 'c/omniscriptDateTime';
import { delay } from 'c/asyncUtils';

jest.mock(
    '@salesforce/label/c.cmpDayJsLocaleFormats',
    () => ({
        default:
            '{"name":"en","weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"months":["January","February","March","April","May","June","July","August","September","October","November","December"]}',
    }),
    {
        virtual: true,
    },
);

describe('c-omniscript-date-time', () => {
    const mockJsonDef = require('./mock.json');
    let datetime = null;

    beforeEach(() => {
        datetime = createElement('c-omniscript-date-time', {
            is: OmniscriptDateTime,
        });
        datetime.key = mockJsonDef.name;
        datetime.jsonDef = mockJsonDef;
        datetime.dataOmniKey = mockJsonDef.index;
        datetime.jsonData = null;
        datetime.layout = 'lightning';
        datetime.scriptHeaderDef = {
            allCustomLabels: {},
            propSetMap: {},
        };
    });

    afterEach(() => {
        while (document.body.firstChild) {
            document.body.removeChild(document.body.firstChild);
        }
        datetime = null;
    });

    it('renders', () => {
        document.body.appendChild(datetime);
        expect(datetime.shadowRoot.children).not.toHaveLength(0);

        const input = datetime.shadowRoot.querySelector('c-input');
        expect(input).toBeTruthy();

        const datetimePicker = input.shadowRoot.querySelector('c-datetime-picker');
        expect(datetimePicker).toBeTruthy();
    });

    it('can repeat', () => {
        const mock = JSON.parse(JSON.stringify(mockJsonDef));
        mock.propSetMap.repeat = true;
        datetime.jsonDef = mock;
        document.body.appendChild(datetime);
        const repeatButton = datetime.shadowRoot.querySelector('.omni-repeat-button-group > button');
        return new Promise(resolve => {
            datetime.addEventListener('omnirepeat', () => resolve());
            repeatButton.click();
        });
    });

    // eslint-disable-next-line @lwc/lwc/no-async-await
    it('can set a date object from the api', async () => {
        const mock = JSON.parse(JSON.stringify(mockJsonDef));
        mock.propSetMap.dateType = 'date';
        datetime.jsonDef = mock;
        document.body.appendChild(datetime);
        const input = datetime.shadowRoot.querySelector('c-input');

        // january is 0
        datetime.applyCallResp(new Date(2021, 0, 1), true);
        await delay(0);
        expect(input.value).toBeInstanceOf(Date);
        expect(input.value.toLocaleDateString()).toBe('1/1/2021');
    });

    // eslint-disable-next-line @lwc/lwc/no-async-await
    it('can set date for today from the api', async () => {
        const mock = JSON.parse(JSON.stringify(mockJsonDef));
        mock.propSetMap.dateType = 'date';
        datetime.jsonDef = mock;
        document.body.appendChild(datetime);
        const input = datetime.shadowRoot.querySelector('c-input');

        datetime.applyCallResp('today', true);
        await delay(0);
        expect(input.value).toBeInstanceOf(Date);
    });

    it('can set a value for date', () => {
        document.body.appendChild(datetime);
        const input = datetime.shadowRoot.querySelector('c-input');
        input.value = '2021-01-01';
        return new Promise(resolve => {
            datetime.addEventListener('omniaggregate', ({ detail: { data } }) => {
                expect(data.toISOString()).toBe('2021-01-01T00:00:00.000Z');
                resolve();
            });
            input.dispatchEvent(new CustomEvent('change'));
        });
    });

    // eslint-disable-next-line @lwc/lwc/no-async-await
    it('can set a valid date string from an api', async () => {
        document.body.appendChild(datetime);
        const input = datetime.shadowRoot.querySelector('c-input');

        datetime.applyCallResp('2022-01-01T18:30:00.000Z', true);
        await delay(0);
        expect(input.value.toISOString()).toBe('2022-01-01T18:30:00.000Z');

        datetime.applyCallResp('2020-12-31T12:30:00.000Z', true);
        await delay(0);
        expect(input.value.toISOString()).toBe('2020-12-31T12:30:00.000Z');
    });

    // eslint-disable-next-line @lwc/lwc/no-async-await
    it('should set an empty string for an invalid date string from an api', async () => {
        document.body.appendChild(datetime);
        const input = datetime.shadowRoot.querySelector('c-input');

        datetime.applyCallResp('foobar', true);
        await delay(0);
        expect(input.value).toBe('');
    });

    // eslint-disable-next-line @lwc/lwc/no-async-await
    it('should set an empty string for an empty string from an api', async () => {
        document.body.appendChild(datetime);
        const input = datetime.shadowRoot.querySelector('c-input');

        datetime.applyCallResp('2021-01-01', true);
        await delay(0);

        datetime.applyCallResp('', true);
        await delay(0);
        expect(input.value).toBe('');
    });

});
