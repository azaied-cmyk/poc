/*************************************************************************
 *
 * VLOCITY, INC. CONFIDENTIAL
 * __________________
 *
 *  [2014] - [2020] Vlocity, Inc.
 *  All Rights Reserved.
 *
 * NOTICE:  All information contained herein is, and remains
 * the property of Vlocity, Inc. and its suppliers,
 * if any. The intellectual and technical concepts contained
 * herein are proprietary to Vlocity, Inc. and its suppliers and may be
 * covered by U.S. and Foreign Patents, patents in process, and are
 * protected by trade secret or copyright law. Dissemination of this
 * information and reproduction, modification or reverse-engineering
 * of this material, is prohibited unless prior written permission
 * is obtained from Vlocity, Inc.
 *
 * Build: v234.0.0
 */
import { createElement } from 'lwc';

import OmniscriptRange from 'c/omniscriptRange';

describe('c-omniscript-checkbox', () => {
    let range = null;
    const mockJsonDef = require('./jsonDef.json');

    beforeEach(() => {
        range = createElement('c-omniscript-range', {
            is: OmniscriptRange,
        });
        range.key = mockJsonDef.name;
        range.jsonDef = mockJsonDef;
        range.dataOmniKey = mockJsonDef.index;
        range.jsonData = null;
        range.layout = 'lightning';
        range.scriptHeaderDef = { allCustomLabels: {} };
    });

    afterEach(() => {
        while (document.body.firstChild) {
            document.body.removeChild(document.body.firstChild);
        }
    });

    it('renders', () => {
        document.body.appendChild(range);
        expect(range.shadowRoot.querySelector('c-slider')).toBeTruthy();
    });

    it('can repeat', () => {
        const mock = JSON.parse(JSON.stringify(mockJsonDef));
        mock.propSetMap.repeat = true;
        range.jsonDef = mock;
        document.body.appendChild(range);
        const repeatButton = range.shadowRoot.querySelector('.omni-repeat-button-group > button');
        return new Promise(resolve => {
            range.addEventListener('omnirepeat', () => resolve());
            repeatButton.click();
        });
    });

    it('should set min if default value if less than min', () => {
        const mock = JSON.parse(JSON.stringify(mockJsonDef));
        mock.propSetMap.defaultValue = 1;
        mock.bInit = false;
        range.jsonDef = mock;
        document.body.appendChild(range);
        const slider = range.shadowRoot.querySelector('c-slider');
        expect(slider.value).toBe(mock.propSetMap.rangeLow);
    });

    it('should set min if default value if greater than max', () => {
        const mock = JSON.parse(JSON.stringify(mockJsonDef));
        mock.propSetMap.defaultValue = 99;
        mock.bInit = false;
        range.jsonDef = mock;
        document.body.appendChild(range);
        const slider = range.shadowRoot.querySelector('c-slider');
        expect(slider.value).toBe(mock.propSetMap.rangeLow);
    });

    it('can set a value', () => {
        document.body.appendChild(range);
        const slider = range.shadowRoot.querySelector('c-slider');
        slider.value = '7';
        return new Promise(resolve => {
            range.addEventListener('omniaggregate', event => {
                expect(event.detail.data).toBe(7);
                resolve();
            });
            slider.dispatchEvent(new CustomEvent('change'));
        });
    });
});
