/*************************************************************************
 *
 * VLOCITY, INC. CONFIDENTIAL
 * __________________
 *
 *  [2014] - [2020] Vlocity, Inc.
 *  All Rights Reserved.
 *
 * NOTICE:  All information contained herein is, and remains
 * the property of Vlocity, Inc. and its suppliers,
 * if any. The intellectual and technical concepts contained
 * herein are proprietary to Vlocity, Inc. and its suppliers and may be
 * covered by U.S. and Foreign Patents, patents in process, and are
 * protected by trade secret or copyright law. Dissemination of this
 * information and reproduction, modification or reverse-engineering
 * of this material, is prohibited unless prior written permission
 * is obtained from Vlocity, Inc.
 *
 * Build: v234.0.0
 */
import apexRestPathMap from './apexRestPathMap';
import { allCustomLabels, getLocalTranslations } from './customLabels';
import { RUN_MODES } from 'c/omniscriptInternalUtils';
import { getConnection, setConnection } from 'c/omniscriptConnection';

// For projects that uses "Guest User" as their integration user.
let omniOutUsesGuestUser = false;

export const CustomLabels = {
    ...allCustomLabels,
};

export function CustomLabelLocalTranslation(configLabelKeyMap) {
    let labelKeyMap = {};

    if (configLabelKeyMap) {
        // default value, load data stored in json def
        if (configLabelKeyMap.input) {
            labelKeyMap = JSON.parse(configLabelKeyMap.input);
        }
        // user defined translations merged in
        if (configLabelKeyMap.language) {
            labelKeyMap = Object.assign(labelKeyMap, getLocalTranslations(configLabelKeyMap.language));
        }
    }
    return labelKeyMap;
}

export function SaveBP(data) {
    return request(getRequestUrl('Vlocity SaveBP'), {
        sClassName: 'Vlocity SaveBP',
        input: data.bpTree,
        files: data.files,
    });
}

export function VlocityTrack(data) {
    return request(getRequestUrl('Vlocity VlocityTrack'), {
        sClassName: 'Vlocity VlocityTrack',
        ...data,
    });
}

// Complete and validated
export function LWCPrep(data, runMode, isResume) {
    if (runMode === RUN_MODES.OFFLINE && !isResume) {
        const connection = getConnection() || {};
        let config = JSON.parse(data.config);
        let labelKeyMap = CustomLabelLocalTranslation(config.labelKeyMap);
        const returnData = {
            IsActiveOmniScript: true,
            namespace: connection.namespace || '',
            labelKeyMap: JSON.stringify(labelKeyMap),
            IsGuestUser: omniOutUsesGuestUser,
        };
        return Promise.resolve(JSON.stringify(returnData));
    }

    return request(getRequestUrl('Vlocity LWCPrep'), {
        sClassName: 'Vlocity LWCPrep',
        ...data,
    });
}

export function GenericInvoke2(params) {
    return request(getRequestUrl(params.sClassName, params.sMethodName), params);
}

export function GenericInvoke2NoCont(params) {
    return request(getRequestUrl(params.sClassName, params.sMethodName), params);
}

export function LinkContentDocument(data) {
    return request(getRequestUrl('Vlocity LinkContentDocument'), {
        sClassName: 'Vlocity LinkContentDocument',
        ...data,
    });
}

export function getCommunityName() {
    return Promise.resolve(null);
}

export function isCommunity() {
    return Promise.resolve(false);
}

export function getCommunityBaseUrl() {
    return Promise.resolve('');
}

export function DeleteOSContentDocument(data) {
    return request(getRequestUrl('Vlocity DeleteOSContentDocument'), {
        sClassName: 'Vlocity DeleteOSContentDocument',
        ...data,
    });
}

export function logUsageInteractionEvent(data) {
    return request(getRequestUrl('Vlocity LogUsageInteractionEvent'), {
        sClassName: 'Vlocity LogUsageInteractionEvent',
        ...data,
    });
}

export function isOffPlatform() {
    return true;
}

export function replaceUrlHost(imageStr) {
    const connection = getConnection();
    const instanceUrl = connection && connection.instanceUrl ? connection.instanceUrl : '';
    // removes any trailing / after the instanceUrl
    const replacement = (instanceUrl ? instanceUrl : '').replace(/[/]$/, '') + '/servlet';
    if (imageStr.indexOf('../servlet') > -1) {
        return imageStr.replace(/\.\.\/servlet/g, replacement);
    }
    // only string containing image url
    else if (imageStr.startsWith('/servlet')) {
        return imageStr.replace(/\/servlet/, replacement);
    }
    // rich text strings may contain more than one image urls
    return imageStr.replace(/(["'])(\/servlet)/g, '$1' + replacement);
}

export const GOOGLE_ASSETS_URL = '';

export const omniLwcUtils = '';

export const omniLwcUtilsRtl = '';

export const pdfWriterUrl = '';

// eslint-disable-next-line no-unused-vars
export function getCurrentBaseUrl(networkPath) {
    return (getConnection() || {}).instanceUrl + '/';
}

export const UserLanguageCode = 'en-US'; // Hardcoded with designer's default language code

export { getConnection, setConnection };

/**
 * Creates a URL from a sClassName and sMethodName
 * @param {string} sClassName
 * @param {string} sMethodName
 */
function getRequestUrl(sClassName, sMethodName = '') {
    // If we have namespace, append to the URL
    const namespace = getConnection().namespace,
        ns = namespace ? '/' + namespace : '';

    // Construct the URL
    let url = `${ns}/v1/GenericInvoke/`;

    if (apexRestPathMap.hasOwnProperty(sClassName)) {
        url += apexRestPathMap[sClassName];
    } else {
        url += `${sClassName}/${sMethodName || ''}`;
    }

    return '/services/apexrest' + url;
}

/**
 * A wrapper function that will use the connection object to request data from the backend.
 * @param {string} url
 * @param {object} data
 */
function request(url, data) {
    return new Promise((resolve, reject) => {
        const connection = getConnection() || {};

        if (typeof connection.request !== 'function') {
            return reject('No connection object');
        }

        connection.request(url, data).then(response => {
            // We are expecting a "string" response
            if (typeof response === 'object') {
                return resolve(JSON.stringify(response));
            }

            resolve(response);
        });
    });
}

export function isCommunityURL() {
    return Promise.resolve(false);
}

export function setOmniOutUsesGuestUser(usesGuestUser) {
    omniOutUsesGuestUser = usesGuestUser;
}

export function getOmniOutUsesGuestUser() {
    return omniOutUsesGuestUser;
}
