/*************************************************************************
 *
 * VLOCITY, INC. CONFIDENTIAL
 * __________________
 *
 *  [2014] - [2020] Vlocity, Inc.
 *  All Rights Reserved.
 *
 * NOTICE:  All information contained herein is, and remains
 * the property of Vlocity, Inc. and its suppliers,
 * if any. The intellectual and technical concepts contained
 * herein are proprietary to Vlocity, Inc. and its suppliers and may be
 * covered by U.S. and Foreign Patents, patents in process, and are
 * protected by trade secret or copyright law. Dissemination of this
 * information and reproduction, modification or reverse-engineering
 * of this material, is prohibited unless prior written permission
 * is obtained from Vlocity, Inc.
 *
 * Build: v234.0.0
 */
import { createElement } from 'lwc';
import OmniscriptMessaging from 'c/omniscriptMessaging';

let mockGetRecord;
function getMockRecord() {
    return JSON.parse(JSON.stringify(mockGetRecord));
}

describe('c-omniscript-messaging', () => {
    mockGetRecord = require('./mocks/getRecord.json');
    const mockScriptHeaderDef = require('./mocks/scriptHeaderDef.json');

    afterEach(() => {
        while (document.body.firstChild) {
            document.body.removeChild(document.body.firstChild);
        }
    });

    it('renders', () => {
        expect.assertions(1);
        const messagingElement = createElement('c-omniscript-messaging', {
            is: OmniscriptMessaging,
        });
        messagingElement.key = mockGetRecord.name;
        messagingElement.jsonDef = getMockRecord();
        messagingElement.dataOmniKey = mockGetRecord.index;
        messagingElement.jsonData = null;
        messagingElement.scriptHeaderDef = mockScriptHeaderDef;
        document.body.appendChild(messagingElement);
        expect(messagingElement.shadowRoot.children).not.toHaveLength(0);
    });

    describe('OWC-2090 - adding toast support', () => {
        it('should render no DOM when set to toast mode', () => {
            expect.assertions(1);

            const messagingElement = createElement('c-omniscript-messaging', {
                is: OmniscriptMessaging,
            });

            let mockRecord = getMockRecord();
            messagingElement.key = mockGetRecord.name;
            mockRecord.propSetMap.showMessageAs = 'toast';
            messagingElement.jsonDef = mockRecord;
            messagingElement.dataOmniKey = mockGetRecord.index;
            messagingElement.jsonData = null;
            messagingElement.scriptHeaderDef = mockScriptHeaderDef;
            document.body.appendChild(messagingElement);
            return Promise.resolve().then(() => {
                expect(messagingElement.shadowRoot.children).toHaveLength(0);
            });
        });

        it('if expression is invalid should fire toast event', done => {
            expect.assertions(3);

            const messagingElement = createElement('c-omniscript-messaging', {
                is: OmniscriptMessaging,
            });

            messagingElement.addEventListener('lightning__showtoast', event => {
                expect(event).toBeDefined();
                expect(event.detail.title).toBe(mockGetRecord.propSetMap.messages[1].text);
                expect(event.detail.variant).toBe('error');
                done();
            });

            let mockRecord = getMockRecord();
            messagingElement.key = mockGetRecord.name;
            mockRecord.propSetMap.showMessageAs = 'toast';
            messagingElement.jsonDef = mockRecord;
            messagingElement.dataOmniKey = mockGetRecord.index;
            messagingElement.jsonData = null;
            messagingElement.scriptHeaderDef = mockScriptHeaderDef;
            document.body.appendChild(messagingElement);
            messagingElement.jsonData = {};
            messagingElement.reportValidity();
        });

        it('if expression is invalid and set to Comment should fire toast event', done => {
            expect.assertions(3);

            const messagingElement = createElement('c-omniscript-messaging', {
                is: OmniscriptMessaging,
            });

            messagingElement.addEventListener('lightning__showtoast', event => {
                expect(event).toBeDefined();
                expect(event.detail.title).toBe(mockGetRecord.propSetMap.messages[1].text);
                expect(event.detail.variant).toBe('info');
                done();
            });

            let mockRecord = getMockRecord();
            messagingElement.key = mockGetRecord.name;
            mockRecord.propSetMap.showMessageAs = 'toast';
            mockRecord.propSetMap.messages[1].type = 'Comment';
            messagingElement.jsonDef = mockRecord;
            messagingElement.dataOmniKey = mockGetRecord.index;
            messagingElement.jsonData = null;
            messagingElement.scriptHeaderDef = mockScriptHeaderDef;
            document.body.appendChild(messagingElement);
            messagingElement.jsonData = {};
            messagingElement.reportValidity();
        });
    });
});
