/*************************************************************************
 *
 * VLOCITY, INC. CONFIDENTIAL
 * __________________
 *
 *  [2014] - [2020] Vlocity, Inc.
 *  All Rights Reserved.
 *
 * NOTICE:  All information contained herein is, and remains
 * the property of Vlocity, Inc. and its suppliers,
 * if any. The intellectual and technical concepts contained
 * herein are proprietary to Vlocity, Inc. and its suppliers and may be
 * covered by U.S. and Foreign Patents, patents in process, and are
 * protected by trade secret or copyright law. Dissemination of this
 * information and reproduction, modification or reverse-engineering
 * of this material, is prohibited unless prior written permission
 * is obtained from Vlocity, Inc.
 *
 * Build: v234.0.0
 */
import { createElement } from 'lwc';
import OmniscriptImage from 'c/omniscriptImage';

describe('c-omniscript-image', () => {
    const mockGetRecord = require('./mock.json');
    let element = null;

    beforeEach(() => {
        element = createElement('c-omniscript-image', {
            is: OmniscriptImage,
        });
        element.key = mockGetRecord.name;
        element.jsonDef = mockGetRecord;
        element.dataOmniKey = mockGetRecord.index;
        element.jsonData = null;
        element.scriptHeaderDef = { allCustomLabels: {} };
    });

    afterEach(() => {
        while (document.body.firstChild) {
            document.body.removeChild(document.body.firstChild);
        }
    });

    it('should render DOM in Lightning mode', () => {
        element.layout = 'lightning';
        document.body.appendChild(element);
        expect(element.shadowRoot.children).not.toHaveLength(0);
        expect(element.jsonDef.response).toBe(null);
        expect(element.shadowRoot.querySelector('.slds-grid.omni-file-input')).toBeTruthy();
    });

    it('should render DOM in Newport mode', () => {
        const mock = JSON.parse(JSON.stringify(mockGetRecord));
        mock.propSetMap.multiple = true;
        element.jsonDef = mock;
        element.layout = 'newport';
        document.body.appendChild(element);
        expect(element.shadowRoot.children).not.toHaveLength(0);
        expect(element.jsonDef.response).toBe(null);
        expect(element.shadowRoot.querySelector('.nds-grid.omni-file-input')).toBeTruthy();
    });

    it('should emit omnifileuploaded when uploading files is successful', () => {
        element.layout = 'lightning';
        document.body.appendChild(element);

        return new Promise(resolve => {
            const input = element.shadowRoot.querySelector('lightning-file-upload');

            element.addEventListener('omnifileuploaded', event => {
                expect(event.detail.operation).toBe('add');
                resolve();
            });

            input.dispatchEvent(
                new CustomEvent('uploadfinished', {
                    detail: {
                        files: [
                            {
                                name: 'test.png',
                                documentId: '069xx0000004CDsAAM',
                                contentVersionId: '068xx0000004CDsAAM',
                            },
                        ],
                    },
                }),
            );
        });
    });
});
