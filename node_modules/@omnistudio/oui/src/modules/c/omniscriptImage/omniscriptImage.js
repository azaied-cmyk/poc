/*************************************************************************
 *
 * VLOCITY, INC. CONFIDENTIAL
 * __________________
 *
 *  [2014] - [2020] Vlocity, Inc.
 *  All Rights Reserved.
 *
 * NOTICE:  All information contained herein is, and remains
 * the property of Vlocity, Inc. and its suppliers,
 * if any. The intellectual and technical concepts contained
 * herein are proprietary to Vlocity, Inc. and its suppliers and may be
 * covered by U.S. and Foreign Patents, patents in process, and are
 * protected by trade secret or copyright law. Dissemination of this
 * information and reproduction, modification or reverse-engineering
 * of this material, is prohibited unless prior written permission
 * is obtained from Vlocity, Inc.
 *
 * Build: v234.0.0
 */
import { track } from 'lwc';
import OmniscriptFile from 'c/omniscriptFile';
import tmpl from './omniscriptImage.html';
import tmpl_nds from './omniscriptImage_nds.html';
import { getCurrentBaseUrl } from 'c/omniscriptRestApi';

/**
 * @module ns/omniscriptImage
 * @extends OmniscriptFile
 * @typicalname omniscriptImage
 */
export default class OmniscriptImage extends OmniscriptFile {
    /**
     * Flag used to track if multiple files can be uploaded
     * @type {Boolean}
     * @scope track (private)
     */
    @track multiple;

    /**
     * A list of file extensions that can be uploaded
     * @type {String}
     * @scope track (private)
     */
    @track accepts;

    /**
     * The class of the parent container
     * @type {String}
     * @scope track (private)
     */
    @track _parentContainerClasses = '';

    /**
     * The base URL used to load image preview
     * @type {String}
     * @scope track (private)
     */
    _baseUrl;

    /**
     * Property that keeps track if the component is disabled
     * @type {Boolean}
     */
    get disabled() {
        return this._propSetMap.multiple === true ? false : this._value.length > 0;
    }

    /**
     * A list of uploaded images
     * @type {Array}
     */
    get images() {
        return this._value.map(file => {
            // Files uploaded using OmniOut have public URL
            const url = file.publicUrl || this._baseUrl + 'sfc/servlet.shepherd/version/download/' + file.vId;
            return {
                ...file,
                url: url,
            };
        });
    }

    // Lifecycle Hooks

    /**
     * Overwrites inherited initCompVariables. This method is executed once during connectedCallback.
     * @scope private
     * @returns {void}
     */
    initCompVariables() {
        super.initCompVariables();
        this.multiple = this._propSetMap.multiple === true;
        this.accepts = '.jpg,.png,.jpeg,.gif,.webp';

        const networkPath = this.scriptHeaderDef.networkUrlPathPrefix ? this.scriptHeaderDef.networkUrlPathPrefix + '/' : '';

        this._baseUrl = getCurrentBaseUrl(networkPath); //;`${window.location.protocol}//${window.location.hostname}/${networkPath}`;
    }

    /**
     * Overwrites native LWC renderedCallback
     * @return {Template}
     * @scope private
     */
    render() {
        return this.layout === 'newport' ? tmpl_nds : tmpl;
    }
}
