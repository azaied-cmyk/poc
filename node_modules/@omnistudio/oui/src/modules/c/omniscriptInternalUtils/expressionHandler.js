/*************************************************************************
 *
 * VLOCITY, INC. CONFIDENTIAL
 * __________________
 *
 *  [2014] - [2020] Vlocity, Inc.
 *  All Rights Reserved.
 *
 * NOTICE:  All information contained herein is, and remains
 * the property of Vlocity, Inc. and its suppliers,
 * if any. The intellectual and technical concepts contained
 * herein are proprietary to Vlocity, Inc. and its suppliers and may be
 * covered by U.S. and Foreign Patents, patents in process, and are
 * protected by trade secret or copyright law. Dissemination of this
 * information and reproduction, modification or reverse-engineering
 * of this material, is prohibited unless prior written permission
 * is obtained from Vlocity, Inc.
 *
 * Build: v234.0.0
 */
import { getElementValue, isRepeatNotation } from './scriptHelpers';
import { evaluate } from 'c/expressionEngine';

/**
 * Utilizes the expressionEngine to handle inputs.
 * @param {*} input
 * @param {obj} element
 * @param {obj} jsonData
 * @param {obj} labelMap
 */
export function handleExpressionEngine(input, element, jsonData, labelMap) {
    if (input === undefined || input === null) {
        return '';
    }

    const expFields = input.match(/"=(?:(?:\\")|[^"])*"/g);
    let resultName = input;

    if (expFields) {
        for (let i = 0; i < expFields.length; i++) {
            expFields[i] = expFields[i].slice(1, expFields[i].length - 1);
            let exp = expFields[i].slice(1);
            let expValue = null;

            try {
                // Evaluates the expression
                expValue = evaluate(
                    exp.replace(/\\"/g, '"'),
                    token => {
                        return getElementValue(token, jsonData, labelMap, isRepeatNotation(token) ? element.JSONPath : null);
                    },
                    true,
                );
            } catch (err) {
                console.error(err);
            }

            if (expValue === null || expValue === undefined) {
                resultName = resultName.replace(expFields[i], '');
            } else {
                resultName = resultName.replace('"' + expFields[i] + '"', JSON.stringify(expValue));
            }
        }
    }

    return resultName === null || resultName === undefined ? '' : resultName;
}
