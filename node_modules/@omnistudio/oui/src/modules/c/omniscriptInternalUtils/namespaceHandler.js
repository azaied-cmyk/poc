/*************************************************************************
 *
 * VLOCITY, INC. CONFIDENTIAL
 * __________________
 *
 *  [2014] - [2020] Vlocity, Inc.
 *  All Rights Reserved.
 *
 * NOTICE:  All information contained herein is, and remains
 * the property of Vlocity, Inc. and its suppliers,
 * if any. The intellectual and technical concepts contained
 * herein are proprietary to Vlocity, Inc. and its suppliers and may be
 * covered by U.S. and Foreign Patents, patents in process, and are
 * protected by trade secret or copyright law. Dissemination of this
 * information and reproduction, modification or reverse-engineering
 * of this material, is prohibited unless prior written permission
 * is obtained from Vlocity, Inc.
 *
 * Build: v234.0.0
 */
/**
 * Global nsObject for storing namespace prefixes.
 */
export let nsObject = {
    namespaceDotNotation: undefined,
    namespacePrefix: undefined,
};

export let isInsidePckg = false;

/**
 * This registers a specific namespace key to the global nsObject.
 * @param {string} nsPrefix
 */
export const registerNs = nsPrefix => {
    if (nsPrefix) {
        nsObject = {
            namespaceDotNotation: nsPrefix.length > 0 ? nsPrefix.slice(0, -2) + '.' : '',
            namespacePrefix: nsPrefix,
        };
    } else {
        nsObject = {
            namespaceDotNotation: '',
            namespacePrefix: '',
        };
    }
};

/**
 * This registers if code is inside package
 * @param {string} nsPrefix
 */
export const registerIsInsidePckg = val => {
    isInsidePckg = val === 'true' || val === true;
};

/**
 * This send back the namespace prefix long version.
 * @return {string}
 */
export const getNameSpacePrefix = () => nsObject.namespacePrefix;

/**
 * This send back the namespace prefix with dot notation.
 * @return {string}
 */
export const getNamespaceDotNotation = () => nsObject.namespaceDotNotation;
