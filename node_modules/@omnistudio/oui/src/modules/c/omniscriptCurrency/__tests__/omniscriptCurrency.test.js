/*************************************************************************
 *
 * VLOCITY, INC. CONFIDENTIAL
 * __________________
 *
 *  [2014] - [2020] Vlocity, Inc.
 *  All Rights Reserved.
 *
 * NOTICE:  All information contained herein is, and remains
 * the property of Vlocity, Inc. and its suppliers,
 * if any. The intellectual and technical concepts contained
 * herein are proprietary to Vlocity, Inc. and its suppliers and may be
 * covered by U.S. and Foreign Patents, patents in process, and are
 * protected by trade secret or copyright law. Dissemination of this
 * information and reproduction, modification or reverse-engineering
 * of this material, is prohibited unless prior written permission
 * is obtained from Vlocity, Inc.
 *
 * Build: v234.0.0
 */
import { createElement } from 'lwc';
import { delay } from 'c/asyncUtils';

import OmniscriptCurrency from 'c/omniscriptCurrency';

describe('c-omniscript-currency', () => {
    const mockGetRecord = require('./mock.json');
    let element = null;

    beforeEach(() => {
        element = createElement('c-omniscript-currency', {
            is: OmniscriptCurrency,
        });
        element.key = mockGetRecord.name;
        element.jsonDef = mockGetRecord;
        element.dataOmniKey = mockGetRecord.index;
        element.jsonData = { OmniScriptCurrencyCode: 'USD' };
        element.layout = 'lightning';
        element.scriptHeaderDef = {
            allCustomLabels: { OmniCurrencyRepeatAltText: 'OmniCurrencyRepeatAltText', OmniCurrencyRemoveAltText: 'OmniCurrencyRemoveAltText' },
            propSetMap: {},
        };
    });

    afterEach(() => {
        while (document.body.firstChild) {
            document.body.removeChild(document.body.firstChild);
        }
        element = null;
    });

    it('renders DOM elements', () => {
        document.body.appendChild(element);
        expect(element.shadowRoot.children).not.toHaveLength(0);
    });

    it('renders DOM elements in newport', () => {
        element.layout = 'newport';
        document.body.appendChild(element);
        expect(element.shadowRoot.children).not.toHaveLength(0);
    });

    it('Test value of c-masked-input is change', () => {
        const mockJsonDef = JSON.parse(JSON.stringify(mockGetRecord));
        mockJsonDef.propSetMap.mask = '(999) 999-9999';
        element._isMasked = true;
        element.jsonDef = mockJsonDef;
        document.body.appendChild(element);

        return new Promise(resolve => {
            const input = element.shadowRoot.querySelector('c-masked-input');
            element.addEventListener('omniaggregate', event => {
                expect(event.detail.data).toBe(1234567890);
                resolve();
            });
            input.value = '1234567890';
            input.dispatchEvent(new CustomEvent('blur', {}));
        });
    });

    it('Test value of c-masked-input is change in newport', () => {
        const mockJsonDef = JSON.parse(JSON.stringify(mockGetRecord));
        mockJsonDef.propSetMap.mask = '(999) 999-9999';
        element.layout = 'newport';
        element._isMasked = true;
        element.jsonDef = mockJsonDef;
        document.body.appendChild(element);

        return new Promise(resolve => {
            const input = element.shadowRoot.querySelector('c-masked-input');
            element.addEventListener('omniaggregate', event => {
                expect(event.detail.data).toBe(1234567890);
                resolve();
            });
            input.value = '1234567890';
            input.dispatchEvent(new CustomEvent('blur', {}));
        });
    });

    it('Test if placeholder is set in c-masked-input', () => {
        const mockJsonDef = JSON.parse(JSON.stringify(mockGetRecord));
        mockJsonDef.propSetMap.placeholder = '123';
        element.jsonDef = mockJsonDef;
        document.body.appendChild(element);
        const input = element.shadowRoot.querySelector('c-masked-input');
        expect(input.placeholder).toBe(mockJsonDef.propSetMap.placeholder);
    });

    it('Test if placeholder is set in c-masked-input in newport', () => {
        const mockJsonDef = JSON.parse(JSON.stringify(mockGetRecord));
        mockJsonDef.propSetMap.placeholder = '123';
        element.layout = 'newport';
        element.jsonDef = mockJsonDef;
        document.body.appendChild(element);
        const input = element.shadowRoot.querySelector('c-masked-input');
        expect(input.placeholder).toBe(mockJsonDef.propSetMap.placeholder);
    });

    it('can repeat', () => {
        const mockJsonDef = JSON.parse(JSON.stringify(mockGetRecord));
        mockJsonDef.propSetMap.repeat = true;
        element.jsonDef = mockJsonDef;
        document.body.appendChild(element);
        const repeatButton = element.shadowRoot.querySelector('.omni-repeat-button-group > button');
        return new Promise(resolve => {
            element.addEventListener('omnirepeat', () => resolve());
            repeatButton.click();
        });
    });

    // eslint-disable-next-line @lwc/lwc/no-async-await
    it('should only set positive numbers or null from an api by default', async () => {
        document.body.appendChild(element);
        const input = element.shadowRoot.querySelector('c-masked-input');

        element.applyCallResp('hello', true);
        await delay(0);
        expect(input.value).toBe(null);

        element.applyCallResp(-1, true);
        await delay(0);
        expect(input.value).toBe(null);

        element.applyCallResp(5, true);
        await delay(0);
        expect(input.value).toBe(5);

        element.applyCallResp(null, true);
        await delay(0);
        expect(input.value).toBe(null);
    });

    // eslint-disable-next-line @lwc/lwc/no-async-await
    it('can set negative numbers from an api if allowed', async () => {
        const mockJsonDef = JSON.parse(JSON.stringify(mockGetRecord));
        mockJsonDef.propSetMap.allowNegative = true;
        element.jsonDef = mockJsonDef;

        document.body.appendChild(element);
        const input = element.shadowRoot.querySelector('c-masked-input');

        element.applyCallResp(-1, true);
        await delay(0);
        expect(input.value).toBe(-1);
    });
});