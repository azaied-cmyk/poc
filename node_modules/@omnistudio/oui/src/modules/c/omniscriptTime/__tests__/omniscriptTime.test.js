/*************************************************************************
 *
 * VLOCITY, INC. CONFIDENTIAL
 * __________________
 *
 *  [2014] - [2020] Vlocity, Inc.
 *  All Rights Reserved.
 *
 * NOTICE:  All information contained herein is, and remains
 * the property of Vlocity, Inc. and its suppliers,
 * if any. The intellectual and technical concepts contained
 * herein are proprietary to Vlocity, Inc. and its suppliers and may be
 * covered by U.S. and Foreign Patents, patents in process, and are
 * protected by trade secret or copyright law. Dissemination of this
 * information and reproduction, modification or reverse-engineering
 * of this material, is prohibited unless prior written permission
 * is obtained from Vlocity, Inc.
 *
 * Build: v234.0.0
 */
import { createElement } from 'lwc';
import { delay } from 'c/asyncUtils';

import OmniscriptTime from 'c/omniscriptTime';

jest.mock(
    '@salesforce/label/c.cmpDayJsLocaleFormats',
    () => ({
        default:
            '{"name":"en","weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"months":["January","February","March","April","May","June","July","August","September","October","November","December"]}',
    }),
    {
        virtual: true,
    },
);

jest.mock(
    '@salesforce/label/c.cmpLocaleFormatsInvalid',
    () => ({
        default:
            'Unable to render due to invalid localeFormat. Please provide a valid localeFormat in the form of {"name":"en","weekdays":["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],"months":["January","February","March","April","May","June","July","August","September","October","November","December"]}',
    }),
    {
        virtual: true,
    },
);

describe('c-omniscript-time', () => {
    let time = null;
    const mockJsonDef = require('./jsonDef.json');

    beforeEach(() => {
        time = createElement('c-omniscript-time', {
            is: OmniscriptTime,
        });
        time.key = mockJsonDef.name;
        time.jsonDef = mockJsonDef;
        time.dataOmniKey = mockJsonDef.index;
        time.jsonData = null;
        time.layout = 'lightning';
        time.scriptHeaderDef = { allCustomLabels: {} };
    });

    afterEach(() => {
        while (document.body.firstChild) {
            document.body.removeChild(document.body.firstChild);
        }
    });

    it('renders', () => {
        document.body.appendChild(time);
        const input = time.shadowRoot.querySelector('c-input');
        expect(input).toBeTruthy();
    });

    it('can repeat', () => {
        const mock = JSON.parse(JSON.stringify(mockJsonDef));
        mock.propSetMap.repeat = true;
        time.jsonDef = mock;
        document.body.appendChild(time);
        const repeatButton = time.shadowRoot.querySelector('.omni-repeat-button-group > button');
        return new Promise(resolve => {
            time.addEventListener('omnirepeat', () => resolve());
            repeatButton.click();
        });
    });

    it('should parse default values', () => {
        const mock = JSON.parse(JSON.stringify(mockJsonDef));
        mock.propSetMap.defaultValue = '12:00 pm';
        mock.bInit = false;
        time.jsonDef = mock;
        document.body.appendChild(time);
        const input = time.shadowRoot.querySelector('c-input');
        expect(input.value).toBe('12:00:00.000Z');
    });

    it('can set a value', () => {
        document.body.appendChild(time);
        const input = time.shadowRoot.querySelector('c-input');
        input.value = '14:00:00.000Z';
        return new Promise(resolve => {
            time.addEventListener('omniaggregate', event => {
                expect(event.detail.data).toBe('14:00:00.000Z');
                resolve();
            });
            input.dispatchEvent(new CustomEvent('change'));
        });
    });

    // eslint-disable-next-line @lwc/lwc/no-async-await
    it('can set a valid string from an api', async () => {
        document.body.appendChild(time);
        const input = time.shadowRoot.querySelector('c-input');

        time.applyCallResp('12:00 pm', true);
        await delay(0);
        expect(input.value).toBe('12:00:00.000Z');
    });

    // eslint-disable-next-line @lwc/lwc/no-async-await
    it('should not set an invalid string from an api', async () => {
        document.body.appendChild(time);
        const input = time.shadowRoot.querySelector('c-input');

        time.applyCallResp('foobar', true);
        await delay(0);
        expect(input.value).toBeFalsy();
    });

    // eslint-disable-next-line @lwc/lwc/no-async-await
    it('can set a date object from the api', async () => {
        const mock = JSON.parse(JSON.stringify(mockJsonDef));
        mock.propSetMap.timeType = 'date';
        time.jsonDef = mock;
        document.body.appendChild(time);
        const input = time.shadowRoot.querySelector('c-input');

        const date = new Date();
        date.setUTCHours(11, 30);
        time.applyCallResp(date, true);
        await delay(0);

        // only check for hours and minutes
        date.setUTCSeconds(0);
        date.setUTCMilliseconds(0);
        expect(input.value.getTime()).toBe(date.getTime());
    });

    // eslint-disable-next-line @lwc/lwc/no-async-await
    it('can set date for now from the api', async () => {
        const mock = JSON.parse(JSON.stringify(mockJsonDef));
        mock.propSetMap.timeType = 'date';
        time.jsonDef = mock;
        document.body.appendChild(time);
        const input = time.shadowRoot.querySelector('c-input');

        time.applyCallResp('now', true);
        await delay(0);
        expect(input.value).toBeInstanceOf(Date);
    });

    // eslint-disable-next-line @lwc/lwc/no-async-await
    it('should not set an invalid object from the api', async () => {
        const mock = JSON.parse(JSON.stringify(mockJsonDef));
        mock.propSetMap.timeType = 'date';
        time.jsonDef = mock;
        document.body.appendChild(time);
        const input = time.shadowRoot.querySelector('c-input');

        time.applyCallResp({ date: '01-01-2021' }, true);
        await delay(0);
        expect(input.value).toBeFalsy();
    });
});
