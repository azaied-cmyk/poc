/*************************************************************************
 *
 * VLOCITY, INC. CONFIDENTIAL
 * __________________
 *
 *  [2014] - [2020] Vlocity, Inc.
 *  All Rights Reserved.
 *
 * NOTICE:  All information contained herein is, and remains
 * the property of Vlocity, Inc. and its suppliers,
 * if any. The intellectual and technical concepts contained
 * herein are proprietary to Vlocity, Inc. and its suppliers and may be
 * covered by U.S. and Foreign Patents, patents in process, and are
 * protected by trade secret or copyright law. Dissemination of this
 * information and reproduction, modification or reverse-engineering
 * of this material, is prohibited unless prior written permission
 * is obtained from Vlocity, Inc.
 *
 * Build: v234.0.0
 */
import { createElement } from 'lwc';
import OmniscriptRadioGroup from 'c/omniscriptRadioGroup';

// silence all print statements
window.console.log = jest.fn();
// const jestPrint = console.log;

describe('c-omniscript-radio-group', () => {
    afterEach(() => {
        // The jsdom instance is shared across test cases in a single file so reset the DOM
        while (document.body.firstChild) {
            document.body.removeChild(document.body.firstChild);
        }
    });

    let jsonDef = {
        name: 'RadioGroup1',
        propSetMap: {
            label: 'RadioGroup1',
            options: [
                {
                    value: 'optlabl1',
                    name: 'optval1',
                    setAll: true,
                },
                {
                    value: 'optlabl2',
                    name: 'optval2',
                    setAll: true,
                },
                {
                    value: 'optlabl3',
                    name: 'optval3',
                    setAll: true,
                },
            ],
            radioLabels: [
                {
                    name: 'qval1',
                    value: 'this is question one.',
                },
                {
                    name: 'qval2',
                    value: 'This is question two.',
                },
                {
                    name: 'qval3',
                    value: '3',
                },
                {
                    name: 'qval4',
                    value: 'this is question 4',
                },
            ],
            radioLabelsWidth: 6,
            helpText: '',
            help: false,
            readOnly: false,
            required: false,
            controlWidth: 9,
        },
    };

    let getCheckedInputs = element => {
        let results = [...element.shadowRoot.querySelectorAll(`.slds-radio input`)].map(function(item) {
            return item.checked;
        });

        return results.join('');
    };

    let jsonDef1 = {
        name: 'RadioGroup1',
        propSetMap: {
            label: 'RadioGroup1',
            options: [
                {
                    value: 'optlabl1',
                    name: 'optval1',
                },
                {
                    value: 'optlabl2',
                    name: 'optval2',
                    setAll: true,
                },
            ],
            radioLabels: [
                {
                    name: 'qval1',
                    value: 'this is question one.',
                },
                {
                    name: 'qval2',
                    value: 'this is question two.',
                },
            ],
            radioLabelsWidth: 6,
            helpText: '',
            help: false,
            readOnly: false,
            required: false,
            controlWidth: 9,
        },
    };

    let jsonDef2 = {
        name: 'RadioGroup2',
        propSetMap: {
            label: 'RadioGroup2',
            options: [
                {
                    value: 'optlabl1',
                    name: 'optval1',
                },
                {
                    value: 'optlabl2',
                    name: 'optval2',
                    setAll: true,
                },
            ],
            radioLabels: [
                {
                    name: 'qval1',
                    value: 'this is question one.',
                },
                {
                    name: 'qval2',
                    value: 'this is question two.',
                },
            ],
            radioLabelsWidth: 6,
            helpText: '',
            help: false,
            readOnly: false,
            required: false,
            controlWidth: 9,
        },
    };
    let seedData1 = {
        qval1: 'optval1',
        qval2: 'optval1',
    };
    let seedData2 = {
        qval1: 'optval2',
        qval2: 'optval2',
    };

    it('check labels', () => {
        const element = createElement('c-omniscript-radio-group', {
            is: OmniscriptRadioGroup,
        });

        element.jsonDef = jsonDef;
        element.scriptHeaderDef = { allCustomLabels: {} };

        document.body.appendChild(element);

        let labels = element.shadowRoot.querySelectorAll('.rlabels span');
        let expected = jsonDef.propSetMap.radioLabels;

        for (let i = 0; i < expected.length; i++) {
            expect(labels[i].textContent).toEqual(expected[i].value);
        }
    });

    it('set all', () => {
        const element = createElement('c-omniscript-radio-group', {
            is: OmniscriptRadioGroup,
        });

        element.jsonDef = jsonDef;
        element.scriptHeaderDef = { allCustomLabels: {} };

        document.body.appendChild(element);

        let expected = [
            'truefalsefalsetruefalsefalsetruefalsefalsetruefalsefalse',
            'falsetruefalsefalsetruefalsefalsetruefalsefalsetruefalse',
            'falsefalsetruefalsefalsetruefalsefalsetruefalsefalsetrue',
        ];

        let lastPromise = Promise.resolve();
        let setall = element.shadowRoot.querySelectorAll('.slds-listbox__option');
        setall.forEach((item, i) => {
            lastPromise = lastPromise.then(() => {
                item.click();
                return Promise.resolve().then(() => {
                    let results = getCheckedInputs(element);
                    expect(results).toEqual(expected[i]);
                });
            });
        });
        return lastPromise;
    });

    it('select individual then set all', () => {
        const element = createElement('c-omniscript-radio-group', {
            is: OmniscriptRadioGroup,
        });
        let results, expected;

        element.jsonDef = jsonDef;
        element.scriptHeaderDef = { allCustomLabels: {} };

        document.body.appendChild(element);

        for (let i = 0; i < jsonDef.propSetMap.options.length; i++) {
            let options = element.shadowRoot.querySelectorAll(`.slds-radio input[data-row="${i}"]`);
            options[i].click();
        }

        return Promise.resolve()
            .then(() => {
                expected = 'truefalsefalsefalsetruefalsefalsefalsetruefalsefalsefalse';
                results = getCheckedInputs(element);
                expect(results).toEqual(expected);
            })
            .then(() => {
                // click the third set all button
                let index = 2;
                let setall = element.shadowRoot.querySelectorAll('.slds-listbox__option');
                setall[index].click();
            })
            .then(() => {
                expected = 'falsefalsetruefalsefalsetruefalsefalsetruefalsefalsetrue';
                results = getCheckedInputs(element);
                expect(results).toEqual(expected);
            });
    });

    it('set all button hidden', () => {
        const element = createElement('c-omniscript-radio-group', {
            is: OmniscriptRadioGroup,
        });

        element.jsonDef = jsonDef2;
        element.scriptHeaderDef = { allCustomLabels: {} };

        document.body.appendChild(element);

        // click all of the set all buttons
        let setall = element.shadowRoot.querySelectorAll('.slds-listbox__option');
        expect(setall.length).toEqual(1);

        expect(setall[0].getAttribute('data-col')).toEqual('1');
    });

    it('can prefill two different RadioGroups with the same rlabels and options', () => {
        const element1 = createElement('c-omniscript-radio-group', {
            is: OmniscriptRadioGroup,
        });
        element1.jsonDef = jsonDef1;
        element1.scriptHeaderDef = { allCustomLabels: {} };
        document.body.appendChild(element1);
        element1.applyCallResp(seedData1, true, false);

        const element2 = createElement('c-omniscript-radio-group', {
            is: OmniscriptRadioGroup,
        });
        element2.jsonDef = jsonDef2;
        element2.scriptHeaderDef = { allCustomLabels: {} };
        document.body.appendChild(element2);
        element2.applyCallResp(seedData2, true, false);

        return Promise.resolve().then(() => {
            // updates ui to render properly
            Promise.resolve().then(() => {
                // check if the prefill was applied correctly
                let expected1 = 'truefalsetruefalse';
                let results1 = getCheckedInputs(element1);
                expect(results1).toEqual(expected1);

                // check if the prefill was applied correctly
                let expected2 = 'falsetruefalsetrue';
                let results2 = getCheckedInputs(element2);
                expect(results2).toEqual(expected2);
            });
        });
    });

    it('can select options in one RadioGroup without affecting another RadioGroup in the DOM with the same rlabels and options', () => {
        const element1 = createElement('c-omniscript-radio-group', {
            is: OmniscriptRadioGroup,
        });
        element1.jsonDef = jsonDef1;
        element1.scriptHeaderDef = { allCustomLabels: {} };
        document.body.appendChild(element1);

        const element2 = createElement('c-omniscript-radio-group', {
            is: OmniscriptRadioGroup,
        });
        element2.jsonDef = jsonDef2;
        element2.scriptHeaderDef = { allCustomLabels: {} };
        document.body.appendChild(element2);

        // select first option for all radiolabels (questions)
        let optionIndex = 0;

        let rowCount1 = element1.jsonDef.propSetMap.radioLabels.length;
        for (let i = 0; i < rowCount1; i++) {
            let options = element1.shadowRoot.querySelectorAll(`.slds-radio input[data-row="${i}"]`);
            options[optionIndex].click();
        }

        let rowCount2 = element2.jsonDef.propSetMap.radioLabels.length;
        for (let i = 0; i < rowCount2; i++) {
            let options = element2.shadowRoot.querySelectorAll(`.slds-radio input[data-row="${i}"]`);
            options[optionIndex].click();
        }
        return Promise.resolve().then(() => {
            // check after clicking has occurred.
            let expected1 = 'truefalsetruefalse';
            let results1 = getCheckedInputs(element1);
            expect(results1).toEqual(expected1);

            let expected2 = 'truefalsetruefalse';
            let results2 = getCheckedInputs(element2);
            expect(results2).toEqual(expected2);
        });
    });
});
