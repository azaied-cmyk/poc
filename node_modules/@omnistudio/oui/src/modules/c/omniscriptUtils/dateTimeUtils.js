/*************************************************************************
 *
 * VLOCITY, INC. CONFIDENTIAL
 * __________________
 *
 *  [2014] - [2020] Vlocity, Inc.
 *  All Rights Reserved.
 *
 * NOTICE:  All information contained herein is, and remains
 * the property of Vlocity, Inc. and its suppliers,
 * if any. The intellectual and technical concepts contained
 * herein are proprietary to Vlocity, Inc. and its suppliers and may be
 * covered by U.S. and Foreign Patents, patents in process, and are
 * protected by trade secret or copyright law. Dissemination of this
 * information and reproduction, modification or reverse-engineering
 * of this material, is prohibited unless prior written permission
 * is obtained from Vlocity, Inc.
 *
 * Build: v234.0.0
 */
import dayjs from 'c/dayjs';

/**
 * @description Resets any timezone offsets. Date time values get processed with timezone offesets prior to getting
 *              applied to the data JSON in an ISO format.
 * @param {Date|String} date
 * @param {Integer} timezone
 */
export function resetDateTimeValue(date, timezone) {
    // No timezone or date values does not require any reset logic to be processed
    if (!timezone || !date) {
        return null;
    }

    // Calculate the original timezone offset difference
    const timezoneOffsetDiff = timezone - date.getTimezoneOffset();

    // Resets the date time value before it was processed in the data JSON
    return dayjs(date.setMinutes(date.getMinutes() + -1 * timezoneOffsetDiff)).format();
}

export function applyDateFormat(inData, options) {
    let data = JSON.parse(JSON.stringify(inData));
    for (let root in data) {
        if (typeof data[root] === 'object') {
            for (let childs in data[root]) {
                if (typeof data[root][childs] === 'object') {
                    for (let prop in data[root][childs]) {
                        if (typeof data[root][childs][prop] === 'object') {
                            for (let keys in data[root][childs][prop]) {
                                if (typeof data[root][childs][prop][keys] === 'string')
                                    data[root][childs][prop][keys] = getAsDate(data[root][childs][prop][keys], options);
                            }
                        } else if (typeof data[root][childs][prop] === 'string' && data[root][childs][prop].indexOf(':') > 0)
                            data[root][childs][prop] = getAsDate(data[root][childs][prop], options);
                    }
                } else if (typeof data[root][childs] === 'string' && data[root][childs].indexOf(':') > 0)
                    data[root][childs] = getAsDate(data[root][childs], options);
            }
        }
    }
    return data;
}

export function getAsDate(date, options) {
    if (date === null) return null;
    let returnVal = date;
    //http://stackoverflow.com/questions/3143070/javascript-regex-iso-datetime
    let matchArray = date.match(/\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d\.\d+([+-][0-2]\d:[0-5]\d|Z)/);

    if (matchArray != null) {
        // Default Date Time Formats from moment.js
        let DEFAULTS = { timeFormat: 'h:mm a', dateFormat: 'MM/DD/YYYY', dateTimeFormat: 'MM/DD/YYYY h:mm a' },
            format = 'dateTimeFormat',
            stringFormat,
            returnFormatted;
        const parsedDate = dayjs(date);

        if (parsedDate.dayOfYear() === 1 && parsedDate.year() === 1970) format = 'timeFormat';
        else if (parsedDate.hour() === 0 && parsedDate.minute() === 0 && parsedDate.second() === 0 && parsedDate.millisecond() === 0)
            format = 'dateFormat';

        stringFormat = options != null ? options[format] : null;
        if (!stringFormat) stringFormat = DEFAULTS[format];
        returnFormatted = parsedDate.format(stringFormat.toUpperCase());

        if (returnFormatted === 'Invalid Date') return date;

        returnVal = returnFormatted;
    }
    return returnVal;
}
