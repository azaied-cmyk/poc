/*************************************************************************
 *
 * VLOCITY, INC. CONFIDENTIAL
 * __________________
 *
 *  [2014] - [2020] Vlocity, Inc.
 *  All Rights Reserved.
 *
 * NOTICE:  All information contained herein is, and remains
 * the property of Vlocity, Inc. and its suppliers,
 * if any. The intellectual and technical concepts contained
 * herein are proprietary to Vlocity, Inc. and its suppliers and may be
 * covered by U.S. and Foreign Patents, patents in process, and are
 * protected by trade secret or copyright law. Dissemination of this
 * information and reproduction, modification or reverse-engineering
 * of this material, is prohibited unless prior written permission
 * is obtained from Vlocity, Inc.
 *
 * Build: v234.0.0
 */
import { createElement } from 'lwc';

import OmniscriptEmail from 'c/omniscriptEmail';

describe('c-omniscript-email', () => {
    const mockGetRecord = require('./mock.json');
    afterEach(() => {
        while (document.body.firstChild) {
            document.body.removeChild(document.body.firstChild);
        }
    });
    it('renders DOM elements', () => {
        const element = createElement('c-omniscript-email', {
            is: OmniscriptEmail,
        });
        element.key = mockGetRecord.name;
        element.jsonDef = mockGetRecord;
        element.dataOmniKey = mockGetRecord.index;
        element.jsonData = null;
        element.layout = 'newport';
        element.scriptHeaderDef = { allCustomLabels: {}, propSetMap: {} };
        document.body.appendChild(element);
        expect(element.shadowRoot.children).not.toHaveLength(0);
    });

    it('Test value is change', () => {
        const element = createElement('c-omniscript-email', {
            is: OmniscriptEmail,
        });
        element.key = mockGetRecord.name;
        element.jsonDef = mockGetRecord;
        element.dataOmniKey = mockGetRecord.index;
        element.jsonData = null;
        element.layout = 'newport';
        element.scriptHeaderDef = { allCustomLabels: {}, propSetMap: {} };
        document.body.appendChild(element);

        return new Promise(resolve => {
            const input = element.shadowRoot.querySelector('c-input');
            element.addEventListener('omniaggregate', event => {
                expect(event.detail.data).toBe('abc@vlocity.com');
                resolve();
            });
            input.value = 'abc@vlocity.com';
            input.dispatchEvent(new CustomEvent('blur', {}));
        });
    });

    it('Test if label is set', () => {
        const element = createElement('c-omniscript-email', {
            is: OmniscriptEmail,
        });
        element.key = mockGetRecord.name;
        element.jsonDef = mockGetRecord;
        element.dataOmniKey = mockGetRecord.index;
        element.jsonData = null;
        element.layout = 'newport';
        element.scriptHeaderDef = { allCustomLabels: {}, propSetMap: {} };
        document.body.appendChild(element);
        const input = element.shadowRoot.querySelector('c-input');
        expect(input.label).toBe(mockGetRecord.propSetMap.label);
    });
});
