/*************************************************************************
 *
 * VLOCITY, INC. CONFIDENTIAL
 * __________________
 *
 *  [2014] - [2020] Vlocity, Inc.
 *  All Rights Reserved.
 *
 * NOTICE:  All information contained herein is, and remains
 * the property of Vlocity, Inc. and its suppliers,
 * if any. The intellectual and technical concepts contained
 * herein are proprietary to Vlocity, Inc. and its suppliers and may be
 * covered by U.S. and Foreign Patents, patents in process, and are
 * protected by trade secret or copyright law. Dissemination of this
 * information and reproduction, modification or reverse-engineering
 * of this material, is prohibited unless prior written permission
 * is obtained from Vlocity, Inc.
 *
 * Build: v234.0.0
 */
import OmniscriptBaseElement from 'c/omniscriptBaseElement';
import { api } from 'lwc';
import { HasValidation } from 'c/omniscriptValidation';
import { showHideValidityHook } from 'c/omniscriptValidation';

/**
 * Wrapper for Custom Lightning Web Component that is embedded inside of OmniScript
 */
export default class OmniscriptCustomLwc extends HasValidation(OmniscriptBaseElement) {
    @api applyCallResp(json, bApi = false, bValidation = false) {
        window.console('do nothing ' + json + bApi + bValidation);
    }

    validityHook(newShow) {
        showHideValidityHook(newShow, this);
    }

    /**
     * Calls HasValidation's reportValidity similar to how onchange calls applyCallResp in text element
     */
    handleValidation(evt) {
        evt.stopPropagation();
        if (evt.detail.showMessage) {
            this.reportValidity();
        } else {
            this.checkValidity();
        }
    }

    constructor() {
        super();
        this.template.addEventListener('trigger_validation', this.handleValidation.bind(this));
        this.template.addEventListener('omniaggregate', this.handleOmniAggregate.bind(this));
    }

    handleOmniAggregate(evt) {
        if (evt.detail) {
            evt.stopPropagation();
            if (evt.detail.elementId === this._elementId) {
                this.elementValue = evt.detail.data;
            } else {
                this.elementValue = Object.assign({}, this.elementValue, {
                    [evt.detail.elementId]: evt.detail.data,
                });
            }
            this._aggregateOverride = evt.detail.aggregateOverride;
            this.dispatchOmniEventUtil(this, this.createAggregateNode(), 'omniaggregate');
        }
    }
}
