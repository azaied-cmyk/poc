/*************************************************************************
 *
 * VLOCITY, INC. CONFIDENTIAL
 * __________________
 *
 *  [2014] - [2020] Vlocity, Inc.
 *  All Rights Reserved.
 *
 * NOTICE:  All information contained herein is, and remains
 * the property of Vlocity, Inc. and its suppliers,
 * if any. The intellectual and technical concepts contained
 * herein are proprietary to Vlocity, Inc. and its suppliers and may be
 * covered by U.S. and Foreign Patents, patents in process, and are
 * protected by trade secret or copyright law. Dissemination of this
 * information and reproduction, modification or reverse-engineering
 * of this material, is prohibited unless prior written permission
 * is obtained from Vlocity, Inc.
 *
 * Build: v234.0.0
 */
import { createElement } from 'lwc';
import * as utils from 'c/omniscriptUtils';
import OmniscriptSaveForLaterAcknowledge from 'c/omniscriptSaveForLaterAcknowledge';

jest.mock('c/omniscriptUtils');

describe('c-omniscript-save-for-later-acknowledge', () => {
    const mockValue = require('./mockValue.json');
    let saveForLater = null;

    beforeEach(() => {
        saveForLater = createElement('c-omniscript-save-for-later-acknowledge', {
            is: OmniscriptSaveForLaterAcknowledge,
        });
        saveForLater.result = mockValue;
        saveForLater.layout = 'newport';
    });

    afterEach(() => {
        while (document.body.firstChild) {
            document.body.removeChild(document.body.firstChild);
        }
        saveForLater = null;
    });

    it('renders lightning', () => {
        saveForLater.layout = 'lightning';
        document.body.appendChild(saveForLater);

        expect(saveForLater.shadowRoot.children).not.toHaveLength(0);
        expect(saveForLater.shadowRoot.querySelector('.slds-button')).toBeTruthy();
    });

    it('renders newport', () => {
        saveForLater.layout = 'newport';
        document.body.appendChild(saveForLater);

        expect(saveForLater.shadowRoot.children).not.toHaveLength(0);
        expect(saveForLater.shadowRoot.querySelector('.nds-button')).toBeTruthy();
    });

    it('can copy a link to the clipboard', () => {
        document.body.appendChild(saveForLater);

        const buttons = saveForLater.shadowRoot.querySelectorAll('button').values();
        const copyButton = buttons.find(button => button.textContent === mockValue.allCustomLabels.OmniCopyLink);
        copyButton.click();

        const mockCopyToClipboard = jest.spyOn(utils, 'copySelectedToClipboard');
        expect(mockCopyToClipboard).toHaveBeenCalled();
    });

    it('should show a toast after copying a link to the clipboard', () => {
        document.body.appendChild(saveForLater);

        const buttons = saveForLater.shadowRoot.querySelectorAll('button').values();
        const copyButton = buttons.find(button => button.textContent === mockValue.allCustomLabels.OmniCopyLink);

        return new Promise(resolve => {
            saveForLater.addEventListener('lightning__showtoast', () => resolve());
            copyButton.click();
        });
    });
});
