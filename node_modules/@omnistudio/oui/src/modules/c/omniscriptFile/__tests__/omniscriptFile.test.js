/*************************************************************************
 *
 * VLOCITY, INC. CONFIDENTIAL
 * __________________
 *
 *  [2014] - [2020] Vlocity, Inc.
 *  All Rights Reserved.
 *
 * NOTICE:  All information contained herein is, and remains
 * the property of Vlocity, Inc. and its suppliers,
 * if any. The intellectual and technical concepts contained
 * herein are proprietary to Vlocity, Inc. and its suppliers and may be
 * covered by U.S. and Foreign Patents, patents in process, and are
 * protected by trade secret or copyright law. Dissemination of this
 * information and reproduction, modification or reverse-engineering
 * of this material, is prohibited unless prior written permission
 * is obtained from Vlocity, Inc.
 *
 * Build: v234.0.0
 */
import { createElement } from 'lwc';
import OmniscriptFile from 'c/omniscriptFile';
import * as Link from 'c/omniscriptRestApi';

let mockData = {
    versions: [
        {
            attributes: {
                type: 'ContentVersion',
                url: '/services/data/v53.0/sobjects/ContentVersion/068xx0000004CVcAAM',
            },
            Id: '068xx0000004CVcAAM',
            ContentDocumentId: '069xx0000004CVcAAM',
            ContentSize: 135188,
        },
    ],
};

describe('c-omniscript-file', () => {
    const mockGetRecord = require('./mock.json');
    let element = null;
    let linkContent = null;
    let deleteContent = null;

    beforeEach(() => {
        element = createElement('c-omniscript-file', {
            is: OmniscriptFile,
        });
        element.key = mockGetRecord.name;
        element.jsonDef = mockGetRecord;
        element.dataOmniKey = mockGetRecord.index;
        element.jsonData = null;
        element.scriptHeaderDef = {
            allCustomLabels: { OmniDeleteItem: 'OmniDeleteItem', OmniFileUploadCount: 'OmniFileUploadCount' },
            propSetMap: {},
        };

        linkContent = jest.spyOn(Link, 'LinkContentDocument');
        deleteContent = jest.spyOn(Link, 'DeleteOSContentDocument');
    });

    afterEach(() => {
        while (document.body.firstChild) {
            document.body.removeChild(document.body.firstChild);
        }

        // needed to revert LinkContentDocument() back to its original implementation
        jest.restoreAllMocks();
    });

    it('should render DOM in Lightning mode', () => {
        element.layout = 'lightning';
        document.body.appendChild(element);
        expect(element.shadowRoot.children).not.toHaveLength(0);
        expect(element.jsonDef.response).toBe(null);
        expect(element.shadowRoot.querySelector('.slds-grid.omni-file-input')).toBeTruthy();
    });

    it('should render DOM in Newport mode', () => {
        element.layout = 'newport';
        document.body.appendChild(element);
        expect(element.shadowRoot.children).not.toHaveLength(0);
        expect(element.jsonDef.response).toBe(null);
        expect(element.shadowRoot.querySelector('.nds-grid.omni-file-input')).toBeTruthy();
    });

    it('should emit omnifileuploaded add when uploading files is successful', () => {
        const mock = JSON.parse(JSON.stringify(mockGetRecord));
        mock.propSetMap.contentParentId = ['069xx0000004CVcAAM'];
        element.jsonDef = mock;

        element.layout = 'lightning';
        document.body.appendChild(element);

        return new Promise(resolve => {
            const input = element.shadowRoot.querySelector('lightning-file-upload');

            element.addEventListener('omnifileuploaded', event => {
                expect(event.detail.operation).toBe('add');
                resolve();
            });

            input.dispatchEvent(
                new CustomEvent('uploadfinished', {
                    detail: {
                        files: [
                            {
                                name: 'test.png',
                                documentId: '069xx0000004CIiAAM',
                                contentVersionId: '068xx0000004CIiAAM',
                            },
                        ],
                    },
                }),
            );
        });
    });

    it('should emit omnifileuploaded delete when deleting files is successful', () => {
        const mock = require('./mockData.json');
        element.jsonDef = mock;

        element.layout = 'lightning';
        document.body.appendChild(element);

        return new Promise(resolve => {
            const inputButton = element.shadowRoot.querySelector('button');
            expect(inputButton).toBeTruthy();

            element.addEventListener('omnifileuploaded', event => {
                expect(event.detail.operation).toBe('delete');
                resolve();
            });

            inputButton.dispatchEvent(
                new CustomEvent('click', {
                    documentId: '069xx0000004CYqAAM',
                }),
            );
        });
    });

    it('should emit omnifileuploaded add signal when uploaded files are processed', () => {
        element.layout = 'lightning';
        document.body.appendChild(element);

        linkContent.mockImplementation(() => Promise.resolve(JSON.stringify(mockData)));

        return new Promise(resolve => {
            const input = element.shadowRoot.querySelector('lightning-file-upload');

            element.addEventListener('omnifileuploaded', event => {
                expect(event.detail.operation).toBe('add');
                resolve();
            });

            input.dispatchEvent(
                new CustomEvent('uploadfinished', {
                    detail: {
                        files: [
                            {
                                name: 'test.png',
                                documentId: '069xx0000004CIiAAM',
                                contentVersionId: '068xx0000004CIiAAM',
                            },
                        ],
                    },
                }),
            );
        });
    });

    it('should emit omnimodal when there is an error in deleting files', () => {
        const mock = require('./mockData.json');
        element.jsonDef = mock;

        element.layout = 'lightning';
        document.body.appendChild(element);

        deleteContent.mockImplementation(() => {
            return Promise.reject('error message');
        });

        return new Promise(resolve => {
            const inputButton = element.shadowRoot.querySelector('button');
            expect(inputButton).toBeTruthy();

            element.addEventListener('omnimodal', event => {
                expect(event.detail.type).toBe('error');
                resolve();
            });

            inputButton.dispatchEvent(new CustomEvent('click', { contentDocumentId: '069xx0000004CYqAAM' }));
        });
    });

    it('should expect omniaggregate when uploading already uploaded files', () => {
        element.layout = 'lightning';
        element.scriptHeaderDef = {
            allCustomLabels: { OmniDeleteItem: 'OmniDeleteItem' },
            propSetMap: {},
            filesMap: {
                '069xx0000004CIiAAM': '069xx0000004CIiAAM',
            },
        };

        document.body.appendChild(element);

        return new Promise(resolve => {
            element.addEventListener('omniaggregate', event => {
                expect(event.detail.data).toStrictEqual([
                    {
                        data: '069xx0000004CIiAAM',
                    },
                ]);
                resolve();
            });

            element.applyCallResp(
                [
                    {
                        data: '069xx0000004CIiAAM',
                    },
                ],
                true,
            );
        });
    });
});
