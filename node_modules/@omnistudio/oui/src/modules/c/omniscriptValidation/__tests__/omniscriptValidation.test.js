/*************************************************************************
 *
 * VLOCITY, INC. CONFIDENTIAL
 * __________________
 *
 *  [2014] - [2020] Vlocity, Inc.
 *  All Rights Reserved.
 *
 * NOTICE:  All information contained herein is, and remains
 * the property of Vlocity, Inc. and its suppliers,
 * if any. The intellectual and technical concepts contained
 * herein are proprietary to Vlocity, Inc. and its suppliers and may be
 * covered by U.S. and Foreign Patents, patents in process, and are
 * protected by trade secret or copyright law. Dissemination of this
 * information and reproduction, modification or reverse-engineering
 * of this material, is prohibited unless prior written permission
 * is obtained from Vlocity, Inc.
 *
 * Build: v234.0.0
 */
import { createElement } from 'lwc';
import { HasValidation } from 'c/omniscriptValidation';

import OmniscriptBaseElement from 'c/omniscriptBaseElement';
import OmniscriptText from 'c/omniscriptText';

describe('hasValidation', () => {
    let text = null;

    beforeEach(() => {
        text = createElement('c-omniscript-text', {
            is: OmniscriptText,
        });
        text.jsonDef = {
            propSetMap: {
                label: 'Text1',
            },
        };
        text.jsonData = null;
        text.layout = 'newport';
        text.scriptHeaderDef = {
            allCustomLabels: {
                OmniTextRepeatAltText: '',
                OmniTextRemoveAltText: '',
            },
            propSetMap: {},
        };
    });

    afterEach(() => {
        while (document.body.firstChild) {
            document.body.removeChild(document.body.firstChild);
        }
        text = null;
    });

    it('can mix in', () => {
        class TestElement extends HasValidation(OmniscriptBaseElement) {}
        const el = createElement('c-omniscript-test-element', {
            is: TestElement,
        });
        el.jsonDef = {
            propSetMap: {
                label: 'test-label',
            },
        };
        el.jsonData = null;
        el.layout = 'newport';
        el.scriptHeaderDef = {
            allCustomLabels: {},
            propSetMap: {},
        };
        document.body.appendChild(el);
        expect(el.label).toBe('test-label');
    });

    it('can set custom validity', () => {
        document.body.appendChild(text);
        text.checkValidity();
        expect(text.reportValidity()).toBe(true);

        text.applyCallResp('custom error', false, true);
        expect(text.reportValidity()).toBe(false);
    });

    it('should clear custom validity on focusout', () => {
        document.body.appendChild(text);

        text.applyCallResp('custom error', false, true);
        expect(text.reportValidity()).toBe(false);

        // should still be invalid after focusing
        text.focus();
        expect(text.reportValidity()).toBe(false);

        // should be valid after focusout gets triggered
        const input = text.shadowRoot.querySelector('c-input');
        input.dispatchEvent(new CustomEvent('focusout', { bubbles: true }));
        expect(text.reportValidity()).toBe(true);
    });

    it('should set value after clearing custom validity', () => {
        document.body.appendChild(text);
        text.applyCallResp('custom error', false, true);
        text.focus();

        return new Promise(resolve => {
            text.addEventListener('omniaggregate', event => {
                expect(event.detail.data).toBe('testing');
                resolve();
            });
            const input = text.shadowRoot.querySelector('c-input');
            input.value = 'testing';
            input.dispatchEvent(new CustomEvent('focusout', { bubbles: true }));
        });
    });
});
