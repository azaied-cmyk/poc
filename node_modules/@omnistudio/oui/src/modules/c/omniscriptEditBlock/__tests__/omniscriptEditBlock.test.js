/*************************************************************************
 *
 * VLOCITY, INC. CONFIDENTIAL
 * __________________
 *
 *  [2014] - [2020] Vlocity, Inc.
 *  All Rights Reserved.
 *
 * NOTICE:  All information contained herein is, and remains
 * the property of Vlocity, Inc. and its suppliers,
 * if any. The intellectual and technical concepts contained
 * herein are proprietary to Vlocity, Inc. and its suppliers and may be
 * covered by U.S. and Foreign Patents, patents in process, and are
 * protected by trade secret or copyright law. Dissemination of this
 * information and reproduction, modification or reverse-engineering
 * of this material, is prohibited unless prior written permission
 * is obtained from Vlocity, Inc.
 *
 * Build: v234.0.0
 */
import { createElement } from 'lwc';
import OmniscriptEditBlock from 'c/omniscriptEditBlock';

// mocking this due to errors
jest.mock('c/oaVtag', () => ({
    __esModule: true,
    default: {},
}));

// silence all print statements
window.console.log = jest.fn(); // this is the silence
//const jestPrint = window.console.log;

describe('c-omniscript-edit-block', () => {
    // editblock json def, with text element prefilled, also ct set to 2, which means there should be
    const jsonDef = require('./jsondef.mock.json');
    let scriptHeaderDef = {
        allCustomLabels: {},
        uuid: 'asdf',
        propSetMap: {},
    };
    afterEach(() => {
        while (document.body.firstChild) {
            document.body.removeChild(document.body.firstChild);
        }
    });

    it('should have operation delete when ct (editblock count) is not equal to 1', () => {
        expect.assertions(1);

        let runTest = false;
        // currently mock json def has ct set to 2, which means there are two edit blocks

        const editBlock = createElement('c-omniscript-editblock', {
            is: OmniscriptEditBlock,
        });
        editBlock.key = jsonDef.name;
        editBlock.jsonDef = jsonDef;
        editBlock.dataOmniKey = jsonDef.index;
        editBlock.layout = 'lightning';
        editBlock.scriptHeaderDef = scriptHeaderDef;

        document.body.appendChild(editBlock);

        editBlock.addEventListener('omnirepeat', event => {
            if (runTest) {
                expect(event.detail.operation).toEqual('delete');
            }
        });

        return Promise.resolve().then(() => {
            runTest = true;
            editBlock.applyCallResp(null, true, false);
        });
    });

    it('should have operation eblastdel when ct (editblock count) is equal to 1', () => {
        expect.assertions(1);

        let runTest = false;
        let jsonDef2 = JSON.parse(JSON.stringify(jsonDef));
        jsonDef2.ct = 1;

        const editBlock = createElement('c-omniscript-editblock', {
            is: OmniscriptEditBlock,
        });
        editBlock.key = jsonDef2.name;
        editBlock.jsonDef = jsonDef2;
        editBlock.dataOmniKey = jsonDef2.index;
        editBlock.layout = 'lightning';
        editBlock.scriptHeaderDef = scriptHeaderDef;

        document.body.appendChild(editBlock);

        editBlock.addEventListener('omnirepeat', event => {
            if (runTest) {
                expect(event.detail.operation).toEqual('eblastdel');
            }
        });
        return Promise.resolve().then(() => {
            runTest = true;
            editBlock.applyCallResp(null, true, false);
        });
    });

    it('edit block cards - nds', () => {
        const element = createElement('c-omniscript-edit-block-cards', {
            is: OmniscriptEditBlock,
        });

        element.key = jsonDef.name;
        element.jsonDef = jsonDef;
        element.dataOmniKey = jsonDef.index;
        element.jsonData = null;
        element.layout = 'newport';
        element.mode = 'Cards';
        element.scriptHeaderDef = { allCustomLabels: {} };
        document.body.appendChild(element);
        return Promise.resolve().then(() => {
            const iconElement = element.shadowRoot.querySelector('.nds-edit-block_shortcards .nds-edit-block_shortcards-circle c-icon');
            expect(iconElement.iconName).toBe('utility:user');
        });
    });

    it('edit block inline - nds', () => {
        const element = createElement('c-omniscript-edit-block-inline', {
            is: OmniscriptEditBlock,
        });
        element.key = jsonDef.name;
        element.jsonDef = jsonDef;
        element.dataOmniKey = jsonDef.index;
        element.jsonData = null;
        element.layout = 'newport';
        element.mode = 'Inline';
        element.scriptHeaderDef = { allCustomLabels: {} };
        document.body.appendChild(element);
        return Promise.resolve().then(() => {
            const iconElement = element.shadowRoot.querySelector('.nds-edit-block_longcards .nds-edit-block_longcards-circle c-icon');
            expect(iconElement.iconName).toBe('utility:user');
        });
    });

    it('edit block longCards - nds', () => {
        const element = createElement('c-omniscript-edit-block-longCards', {
            is: OmniscriptEditBlock,
        });
        element.key = jsonDef.name;
        element.jsonDef = jsonDef;
        element.dataOmniKey = jsonDef.index;
        element.jsonData = null;
        element.layout = 'newport';
        element.mode = 'LongCards';
        element.scriptHeaderDef = { allCustomLabels: {} };
        document.body.appendChild(element);
        return Promise.resolve().then(() => {
            const iconElement = element.shadowRoot.querySelector('.nds-edit-block_longcards .nds-edit-block_longcards-circle c-icon');
            expect(iconElement.iconName).toBe('utility:user');
        });
    });
});
