/*************************************************************************
 *
 * VLOCITY, INC. CONFIDENTIAL
 * __________________
 *
 *  [2014] - [2020] Vlocity, Inc.
 *  All Rights Reserved.
 *
 * NOTICE:  All information contained herein is, and remains
 * the property of Vlocity, Inc. and its suppliers,
 * if any. The intellectual and technical concepts contained
 * herein are proprietary to Vlocity, Inc. and its suppliers and may be
 * covered by U.S. and Foreign Patents, patents in process, and are
 * protected by trade secret or copyright law. Dissemination of this
 * information and reproduction, modification or reverse-engineering
 * of this material, is prohibited unless prior written permission
 * is obtained from Vlocity, Inc.
 *
 * Build: v234.0.0
 */
import { createElement } from "lwc";
import Block from "c/block";

describe("c-block", () => {
  afterEach(() => {
    while (document.body.firstChild) {
      document.body.removeChild(document.body.firstChild);
    }
  });

  /* Check if the element renders */
  it("renders DOM elements", () => {
    const element = createElement("c-block", {
      is: Block
    });
    element.label = "Block";
    element.theme = "slds";
    element.collapsible = "true";
    element.collapsedByDefault = "false";
    document.body.appendChild(element);
    expect(element.shadowRoot.children).not.toHaveLength(0);
  });

  /**
   * Check if the theme is applied properly
   */
  it("Has theme set", () => {
    const element = createElement("c-block", {
      is: Block
    });
    element.label = "Block";
    element.theme = "slds";
    element.collapsible = "true";
    element.collapsedByDefault = "false";
    document.body.appendChild(element);
    const block = element.shadowRoot.querySelectorAll("div")[1];
    let index = block.className.indexOf("slds") !== -1 ? true : false;
    expect(index).toBe(true);
  });

  /**
   * Check if the Label is set properly
   */
  it("Has Label set", () => {
    const element = createElement("c-block", {
      is: Block
    });
    element.label = "Block Label";
    element.theme = "slds";
    element.collapsible = "true";
    element.collapsedByDefault = "false";
    document.body.appendChild(element);
    const block = element.shadowRoot.querySelector(".slds-text-heading_small");
    const blockHeader = element.shadowRoot.querySelector(".block-header");
    expect(blockHeader).not.toBe(undefined);
    expect(block.textContent).toBe("Block Label");
  });

  /**
   * Check if the collapsible is set properly
   */
  it("Has collapsible set", () => {
    const element = createElement("c-block", {
      is: Block
    });
    element.label = "Block Label";
    element.theme = "slds";
    element.collapsible = false;
    element.collapsedByDefault = "false";
    document.body.appendChild(element);
    const block = element.shadowRoot.querySelector(".block-header");
    expect(block).toBe(null);
  });

  /**
   * Check if the collapsedByDefault is set properly
   */
  it("Has collapsedByDefault set", () => {
    const element = createElement("c-block", {
      is: Block
    });
    element.label = "Block Label";
    element.theme = "slds";
    element.collapsible = true;
    element.collapsedByDefault = true;
    document.body.appendChild(element);
    const block = element.shadowRoot.querySelector(".blockSlot");
    expect(block).not.toBe(null);
  });
});
