/*************************************************************************
 *
 * VLOCITY, INC. CONFIDENTIAL
 * __________________
 *
 *  [2014] - [2020] Vlocity, Inc.
 *  All Rights Reserved.
 *
 * NOTICE:  All information contained herein is, and remains
 * the property of Vlocity, Inc. and its suppliers,
 * if any. The intellectual and technical concepts contained
 * herein are proprietary to Vlocity, Inc. and its suppliers and may be
 * covered by U.S. and Foreign Patents, patents in process, and are
 * protected by trade secret or copyright law. Dissemination of this
 * information and reproduction, modification or reverse-engineering
 * of this material, is prohibited unless prior written permission
 * is obtained from Vlocity, Inc.
 *
 * Build: v234.0.0
 */
import { LightningElement, api, track } from "lwc";
import sldsTemplate from "./block_slds.html";
import ndsTemplate from "./block_nds.html";
import { get } from "c/lodash";
import { BaseFlexElementMixin } from "c/baseFlexElementMixin";
import { lwcPropertyNameConversion } from "c/utility";

export default class Block extends BaseFlexElementMixin(LightningElement) {
  //List of api variables
  @api label;
  @api record;
  @api theme = "slds";
  @api extraclass;
  //List of track variables
  @track iconName = "utility:chevrondown";

  //List of private variables
  hideSlot = false;
  _collapsible = false;
  _styles;
  labelStyle;
  // Getter and setter functions
  @api get collapsible() {
    return this._collapsible;
  }
  set collapsible(val) {
    this._collapsible = val === "true" || val === true ? true : false;
  }

  @api get collapsedByDefault() {
    return this._collapsedByDefault;
  }
  set collapsedByDefault(val) {
    this.iconName =
      val === "true" || val === true
        ? "utility:chevronright"
        : "utility:chevrondown";
    this.hideSlot = val === "true" || val === true ? true : false;
    this._collapsedByDefault = val ? val : false;
    if (this.blockEle) {
      this.blockEle.classList.toggle(`${this.theme}-hide`, this.hideSlot);
    }
    if (this.labelEle) {
      this.labelEle.classList.toggle("label-color-onexpand", this.hideSlot);
    }
  }

  @api get styles() {
    return this._styles;
  }
  set styles(val) {
    if (val) {
      this._styles = val;
      this.setStyles();
    }
  }

  get showSlot() {
    return !this.hideSlot;
  }

  render() {
    if (this.theme === "nds") {
      return ndsTemplate;
    }
    return sldsTemplate;
  }

  renderedCallback() {
    this.labelEle = this.template.querySelector(".blockLabel");
    this.blockEle = this.template.querySelector(".blockSlot");
    if (this.blockEle && !this.isBlockRendered && this.hideSlot) {
      this.isBlockRendered = true;
      this.blockEle.classList.toggle(`${this.theme}-hide`, this.hideSlot);
    }
    if (this.labelEle && !this.isLabelRendered) {
      this.isLabelRendered = true;
      this.labelEle.classList.toggle("label-color-onexpand", this.hideSlot);
    }
  }

  //Method to toggle the block on click of icon.
  toggleBlock(event) {
    this.hideSlot = !this.hideSlot;
    this.blockEle.classList.toggle(`${this.theme}-hide`, this.hideSlot);
    this.iconName = this.hideSlot
      ? "utility:chevronright"
      : "utility:chevrondown";
    if (this.labelEle) {
      this.labelEle.classList.toggle("label-color-onexpand", this.hideSlot);
    }
    event.stopPropagation();
  }

  //To get interpolated label value
  get interpolatedLabel() {
    if (
      this.label &&
      this.label.indexOf("{") !== -1 &&
      (this.record || this._allMergeFields)
    ) {
      let stringToInterpolate =
        this.label.charAt(0) === "\\" ? this.label.substring(1) : this.label;
      return stringToInterpolate.replace(/\{(.*?)\}/g, (match, expr) => {
        let fieldValue = get(this.record, expr);
        if (this._allMergeFields && !fieldValue) {
          fieldValue = get(this._allMergeFields, expr);
        }
        return typeof fieldValue !== "undefined" ? fieldValue : match;
      });
    }
    return this.label;
  }

  setStyles() {
    if (typeof this._styles === "string") {
      this._styles = JSON.parse(this._styles);
    }
    if (this._styles && this._styles.label) {
      this.labelStyle = "";
      let keys = Object.keys(this._styles.label);
      keys.forEach(key => {
        if (this._styles.label[key]) {
          this.labelStyle += `${lwcPropertyNameConversion(key)}:${
            this._styles.label[key]
          };`;
        }
      });
    }
  }

  /**
   * This method gets triggered whenever slot of this block changes and help us to update style and conditions accordingly
   */
  handleSlotChange() {
    this.updateCardStyle();
  }

  updateCardStyle() {
    this.dispatchEvent(
      new CustomEvent("updatestyle", {
        bubbles: true,
        composed: true,
        detail: {}
      })
    );
  }
}
