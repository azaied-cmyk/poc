/*************************************************************************
 *
 * VLOCITY, INC. CONFIDENTIAL
 * __________________
 *
 *  [2014] - [2020] Vlocity, Inc.
 *  All Rights Reserved.
 *
 * NOTICE:  All information contained herein is, and remains
 * the property of Vlocity, Inc. and its suppliers,
 * if any. The intellectual and technical concepts contained
 * herein are proprietary to Vlocity, Inc. and its suppliers and may be
 * covered by U.S. and Foreign Patents, patents in process, and are
 * protected by trade secret or copyright law. Dissemination of this
 * information and reproduction, modification or reverse-engineering
 * of this material, is prohibited unless prior written permission
 * is obtained from Vlocity, Inc.
 *
 * Build: v234.0.0
 */
import { api } from "lwc";
import Img from "c/img";
import { interpolateWithRegex } from "c/flexCardUtility";
import { BaseFlexElementMixin } from "c/baseFlexElementMixin";

export default class FlexImg extends BaseFlexElementMixin(Img) {
  @api get stateImg() {
    return this._stateImg;
  }
  set stateImg(val) {
    const validObj = value => {
      try {
        if (value.charAt(0) === "\\") {
          value = value.substring(1);
        }
        return JSON.parse(value);
      } catch (e) {
        return {};
      }
    };
    if (val) {
      this._stateImg = typeof val === "string" ? validObj(val) : val;
      this._uninterpolatedStateImg = { ...this._stateImg };
      this.interpolateImgObj();
    }
  }

  @api get record() {
    return this._record;
  }
  set record(val) {
    this._record = val;
    this.triggerRender();
  }

  triggerRender() {
    if (this._stateImg) {
      this._stateImg = this._uninterpolatedStateImg;
      this.interpolateImgObj();
    }
  }

  interpolateImgObj() {
    let regexPattern = /\{([a-zA-Z.0-9_]*)\}/g;

    if (this.record) {
      this._stateImg = interpolateWithRegex(
        this._stateImg,
        this.record,
        regexPattern
      );
    }
    if (this._allMergeFields) {
      this._stateImg = interpolateWithRegex(
        this._stateImg,
        this._allMergeFields,
        regexPattern
      );
    }

    for (let property in this._stateImg) {
      if (
        this._stateImg.hasOwnProperty(property) &&
        this._stateImg[property] &&
        JSON.stringify(this._stateImg[property]).indexOf("{") === -1
      ) {
        let isValueSame =
          this[property] && this[property] === this._stateImg[property];
        if (!isValueSame) this[property] = this._stateImg[property];
      }
    }
  }
}
