/*************************************************************************
 *
 * VLOCITY, INC. CONFIDENTIAL
 * __________________
 *
 *  [2014] - [2020] Vlocity, Inc.
 *  All Rights Reserved.
 *
 * NOTICE:  All information contained herein is, and remains
 * the property of Vlocity, Inc. and its suppliers,
 * if any. The intellectual and technical concepts contained
 * herein are proprietary to Vlocity, Inc. and its suppliers and may be
 * covered by U.S. and Foreign Patents, patents in process, and are
 * protected by trade secret or copyright law. Dissemination of this
 * information and reproduction, modification or reverse-engineering
 * of this material, is prohibited unless prior written permission
 * is obtained from Vlocity, Inc.
 *
 * Build: v234.0.0
 */
let card;
let fields;
let selectSingleCard;
let selectableField;
let records;
let defi;
function setValueOfRecords(data, index, obj, type) {
  records = data ? (Array.isArray(data) ? data : [data]) : null;
  let recordObj = records && records[index] ? { ...records[index] } : {};
  let response = {};
  fields = obj.fields;
  let singleSelect = obj.single;
  selectSingleCard = false;
  selectableField = obj.selectableField
    ? obj.selectableField
    : "_flex.isSelected";
  card = obj.card;
  defi = obj.data;
  if (type === "childcard") {
    let updateParentData = false;
    fields.forEach(item => {
      let key = item.fieldName;
      let mergeFieldKey = isMergeField(key);
      if (mergeFieldKey) {
        response.card = updatedCardsObj(
          key,
          mergeFieldKey,
          item.fieldValue,
          card,
          recordObj
        );
        response.data = updatedCardsObj(
          key,
          mergeFieldKey,
          item.fieldValue,
          defi,
          recordObj
        );
      } else {
        updateParentData = true;
        recordObj[item.fieldName] = item.fieldValue;
        if (singleSelect && !selectSingleCard) {
          selectSingleCard = selectableField === item.fieldName;
        }
      }
    });
    if (updateParentData) {
      if (selectSingleCard) {
        records = updateRecord(recordObj, index, records);
        response.parentData = {
          records: Array.isArray(records) ? [...records] : [{ ...records }]
        };
      } else {
        response.parentData = {
          record: { ...recordObj },
          index: index
        };
      }
    }
    return response;
  }
  let updatedSelectedRecord = false;
  if (fields) {
    fields.forEach(item => {
      let fieldVal = item.fieldValue;
      let key = item.fieldName;
      switch (key) {
        case "records":
          records = validObj(fieldVal, "array");
          response.records = [...records];
          break;
        case "record":
          if (records) {
            records[index] = validObj(fieldVal);
            response.records = [...records];
          }
          break;
        default:
          // eslint-disable-next-line no-case-declarations
          let mergeFieldKey = isMergeField(key);
          if (mergeFieldKey) {
            response.card = updatedCardsObj(
              key,
              mergeFieldKey,
              fieldVal,
              card,
              recordObj
            );
            response.data = updatedCardsObj(
              key,
              mergeFieldKey,
              fieldVal,
              defi,
              recordObj
            );
          } else if (records) {
            updatedSelectedRecord = true;
            if (item.fieldName === "_flex.isSelected") {
              recordObj._flex = recordObj._flex ? { ...recordObj._flex } : {};
              recordObj._flex.isSelected = fieldVal;
            } else {
              recordObj[item.fieldName] = fieldVal;
            }
            if (singleSelect && !selectSingleCard) {
              selectSingleCard = selectableField === item.fieldName;
            }
          }
          break;
      }
    });
  }
  if (updatedSelectedRecord && records) {
    records = updateRecord(recordObj, index, records);
    response.records = records;
  }
  return response;
}

function updateRecord(recordObj, index, rec) {
  let recordsArr = [...rec];
  if (selectSingleCard) {
    recordsArr = recordsArr.map((record, rindex) => {
      if (rindex.toString() !== index) {
        if (selectableField === "_flex.isSelected") {
          record._flex = record._flex ? { ...record._flex } : {};
          record._flex.isSelected = false;
        } else {
          record[selectableField] = false;
        }
      } else {
        return recordObj ? { ...recordObj } : record;
      }
      return record;
    });
  } else {
    recordsArr[index] = { ...recordObj };
  }
  return [...recordsArr];
}

function validObj(val, type) {
  if (typeof val === "string") {
    try {
      if (val.charAt(0) === "\\") {
        val = val.substring(1);
      }
      let obj = JSON.parse(val);
      return !Array.isArray(obj) && type === "array" ? [obj] : obj;
    } catch (e) {
      return type === "array" ? [] : {};
    }
  }
  return val;
}

function isMergeField(name) {
  let mergeFieldKeys = [
    "Params.",
    "User.",
    "Label.",
    "Session.",
    "Parent.",
    "Flex."
  ];
  return mergeFieldKeys.find(str => {
    return name.indexOf(str) !== -1;
  });
}

function updatedCardsObj(
  fieldName,
  mergeFieldKey,
  fieldVal,
  cardObj,
  recordObj
) {
  let key = fieldName.replace(mergeFieldKey, "");
  mergeFieldKey = mergeFieldKey.slice(0, -1);
  let cardArr = { ...cardObj };

  if (mergeFieldKey === "Flex") {
    //Special case to handle internal private variable i.e. "Flex.<name>"
    cardArr.Flex[key] = cardArr.Flex[key] || {};
    cardArr.Flex[key][recordObj.uniqueKey] = fieldVal; //This makes it store and compare value unique for each record.
  } else {
    cardArr[mergeFieldKey][key] = fieldVal;
  }
  cardObj = { ...cardArr };
  return cardObj;
}

export { setValueOfRecords };
