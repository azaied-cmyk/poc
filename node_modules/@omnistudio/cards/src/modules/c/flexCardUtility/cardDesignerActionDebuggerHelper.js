/*************************************************************************
 *
 * VLOCITY, INC. CONFIDENTIAL
 * __________________
 *
 *  [2014] - [2020] Vlocity, Inc.
 *  All Rights Reserved.
 *
 * NOTICE:  All information contained herein is, and remains
 * the property of Vlocity, Inc. and its suppliers,
 * if any. The intellectual and technical concepts contained
 * herein are proprietary to Vlocity, Inc. and its suppliers and may be
 * covered by U.S. and Foreign Patents, patents in process, and are
 * protected by trade secret or copyright law. Dissemination of this
 * information and reproduction, modification or reverse-engineering
 * of this material, is prohibited unless prior written permission
 * is obtained from Vlocity, Inc.
 *
 * Build: v234.0.0
 */
function getActionDebugEventObj(key, arg1, arg2, arg3) {
  let eventObj = {};
  switch (key) {
    case "Datasource":
      eventObj.type = arg2 ? arg2.type : "onload";
      if (eventObj.type === "updateDS" && arg1?.dataSource) {
        eventObj.obj = {
          detail: {
            title: "Update Datasource",
            config: { ...arg1.dataSource }
          }
        };
      } else if (eventObj.type === "reload") {
        eventObj.obj = {
          detail: {
            title: "Reload"
          }
        };
      } else {
        eventObj.obj = {
          detail: {
            title: "Datasource",
            isDatasource: true,
            config: arg1?.dataSource ? { ...arg1.dataSource } : {}
          }
        };
      }

      if (arg2?.detail?.name) {
        eventObj.obj.detail.name = arg2.name;
      }
      break;
    case "Remove":
      eventObj = {
        detail: {
          title: "Remove",
          removedRecordIndex: arg1,
          response: arg2 ? (Array.isArray(arg2) ? arg2 : [arg2]) : []
        }
      };
      if (arg3?.displayName) eventObj.detail.name = arg3.displayName;
      break;
    case "Data Action":
      let obj = {
        title: "Data Action",
        response: arg1?.response
          ? Array.isArray(arg1.response)
            ? arg1.response
            : [arg1.response]
          : null
      };
      if (arg1) {
        if (arg1.data) {
          obj.records = Array.isArray(arg1.data) ? arg1.data : [arg1.data];
        }
        if (arg1.node) {
          obj.node = arg1.node;
        }
        if (arg1.ignoreResponse) {
          obj.ignoreResponse = arg1.ignoreResponse;
        }
      }
      eventObj = {
        detail: obj
      };
      if (arg2?.detail?.displayName) {
        eventObj.detail.name = arg2.detail.displayName;
      }
      break;
    case "Set Value":
      eventObj = {
        detail: {
          title: "Set Value",
          fields: arg1 ? [...arg1] : [],
          response: arg2 ? (Array.isArray(arg2) ? arg2 : [arg2]) : []
        }
      };
      if (arg3.detail.displayName)
        eventObj.detail.name = arg3.detail.displayName;
      break;
    case "Select Cards":
      eventObj = {
        detail: {
          title: "Select Cards"
        }
      };
      eventObj.detail[arg1] = arg2;
      if (arg3.displayName) eventObj.detail.name = arg3.displayName;
      break;
    default:
      break;
  }
  return eventObj;
}

function formatActionDebugEventObj(event, status, response, card) {
  let data;
  let actionType;
  if (event?.obj?.detail) {
    data = event.obj.detail ? { ...event.obj.detail } : {};
    actionType = event.type;
  } else {
    data = event.detail ? { ...event.detail } : {};
  }
  data.timestamp = new Date().toISOString();
  data.id = data.title + "-" + data.timestamp;
  if (card && card.title) {
    data = { Flex_Card_Name: card.title, ...data };
  }
  if (status === "Success") {
    data.status = actionType === "reload" ? "Reloaded Successfully" : status;
    if (response) data.response = response;
  } else if (status === "Error") {
    data.status = status;
    data.error = "Error: " + JSON.stringify(response);
  }
  return data;
}

export { getActionDebugEventObj, formatActionDebugEventObj };
