/*************************************************************************
 *
 * VLOCITY, INC. CONFIDENTIAL
 * __________________
 *
 *  [2014] - [2020] Vlocity, Inc.
 *  All Rights Reserved.
 *
 * NOTICE:  All information contained herein is, and remains
 * the property of Vlocity, Inc. and its suppliers,
 * if any. The intellectual and technical concepts contained
 * herein are proprietary to Vlocity, Inc. and its suppliers and may be
 * covered by U.S. and Foreign Patents, patents in process, and are
 * protected by trade secret or copyright law. Dissemination of this
 * information and reproduction, modification or reverse-engineering
 * of this material, is prohibited unless prior written permission
 * is obtained from Vlocity, Inc.
 *
 * Build: v234.0.0
 */
import { get } from "c/lodash";

const reserverFlexVariables = ["Flex.index"];

function groupFilter(group, obj, context) {
  var evalString = "";
  group.forEach(condition => {
    condition = { ...condition };
    if (
      condition.operator === "===" &&
      condition.field === "$scope.data.status"
    ) {
      if (condition.value && condition.value.indexOf("active") !== -1) {
        evalString = obj && Object.keys(obj).length ? "true" : "false";
      } else if (
        condition.value &&
        condition.value.indexOf("non-existent") !== -1
      ) {
        evalString = !obj || !Object.keys(obj).length ? "true" : "false";
      } else if (
        condition.value &&
        condition.value.indexOf("edit-mode") !== -1
      ) {
        evalString = "true";
      }
      return;
    }
    if (condition.group) {
      if (condition.logicalOperator) {
        evalString += " " + condition.logicalOperator + " ";
      }
      evalString += groupFilter(condition.group, obj, context);
      return;
    }
    if (condition.operator) {
      //Special case to compare Flex private variable for each record within card. Make sure we dont update reserved variables.
      if (
        condition.field.indexOf("Flex.") === 0 &&
        reserverFlexVariables.indexOf(condition.field) === -1
      ) {
        // For eg: Flex.expand
        condition.field = condition.field + "." + obj.uniqueKey; //This makes it store and compare value unique for each record.
      }
      let realVal =
        condition.field.indexOf("{") === -1 && condition.hasMergeField
          ? condition.field
          : get(obj, condition.field);
      if (condition.field.indexOf("$scope") > -1) {
        realVal =
          get(context, condition.field.substr(7)) ||
          context[condition.field.substr(7)];
      }
      if (condition.logicalOperator) {
        evalString += " " + condition.logicalOperator + " ";
      }

      //Special cases
      realVal = typeof realVal === "boolean" ? realVal.toString() : realVal;
      realVal = typeof realVal === "undefined" ? "undefined" : realVal;
      condition.value =
        condition.value && condition.value.toLowerCase() === "null"
          ? null
          : condition.value;

      // End Special cases
      let flag;
      if (condition && condition.value && !isNaN(condition.value)) {
        condition.value = parseFloat(condition.value);
      }
      switch (condition.operator) {
        case "==":
          // eslint-disable-next-line eqeqeq
          flag = realVal == condition.value;
          break;
        case ">":
          // eslint-disable-next-line eqeqeq
          flag = realVal !== "undefined" && realVal > condition.value;
          break;
        case "<":
          // eslint-disable-next-line eqeqeq
          flag = realVal !== "undefined" && realVal < condition.value;
          break;
        case ">=":
          // eslint-disable-next-line eqeqeq
          flag = realVal !== "undefined" && realVal >= condition.value;
          break;
        case "<=":
          // eslint-disable-next-line eqeqeq
          flag = realVal !== "undefined" && realVal <= condition.value;
          break;
        case "!=":
          // eslint-disable-next-line eqeqeq
          flag = realVal != condition.value;
          break;
        default:
          break;
      }
      evalString += ` ${flag} `;
    }
  });
  // eslint-disable-next-line no-eval
  return eval(evalString);
}

export { groupFilter };
