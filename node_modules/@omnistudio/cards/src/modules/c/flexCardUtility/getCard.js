/*************************************************************************
 *
 * VLOCITY, INC. CONFIDENTIAL
 * __________________
 *
 *  [2014] - [2020] Vlocity, Inc.
 *  All Rights Reserved.
 *
 * NOTICE:  All information contained herein is, and remains
 * the property of Vlocity, Inc. and its suppliers,
 * if any. The intellectual and technical concepts contained
 * herein are proprietary to Vlocity, Inc. and its suppliers and may be
 * covered by U.S. and Foreign Patents, patents in process, and are
 * protected by trade secret or copyright law. Dissemination of this
 * information and reproduction, modification or reverse-engineering
 * of this material, is prohibited unless prior written permission
 * is obtained from Vlocity, Inc.
 *
 * Build: v234.0.0
 */
import {
  getCardById,
  getCardsByNames,
  getActiveCardByName
} from "c/flexCardUtils";
import { getCardObjectFields } from "./getCardObjectFields";

let _cardData = [];
let getCardsPromise = {};
let promiseArray = {};

function getCardDataById(Id, nocache) {
  if (!_cardData[Id] || nocache) {
    getCardsPromise = new Promise(resolve => {
      if (!promiseArray[Id] || nocache) {
        promiseArray[Id] = getCardById({ Id: Id }).then(data => {
          if (data) {
            let cardObject = getCardObjectFields(data);
            let def = data[cardObject.PropertySetConfig];
            if (def && def.indexOf('"element":"flexAction"')) {
              data[cardObject.PropertySetConfig] = def.replace(
                /"element":"flexAction"/g,
                '"element":"action"'
              );
            }
          }
          _cardData[Id] = data;
          return data;
        });
      }
      resolve(promiseArray[Id]);
    });
  } else {
    getCardsPromise = new Promise(resolve => {
      resolve(_cardData[Id]);
    });
  }
  return getCardsPromise;
}

function getCardsByName(name) {
  return new Promise(resolve => {
    getCardsByNames({ cardNames: Array.isArray(name) ? name : [name] }).then(
      data => {
        resolve(data);
      }
    );
  });
}

function getActiveCardByNameFn(name) {
  if (!_cardData[name]) {
    getCardsPromise = new Promise(resolve => {
      if (!promiseArray[name]) {
        promiseArray[name] = getActiveCardByName({ Name: name }).then(data => {
          _cardData[name] = data;
          return data;
        });
      }
      resolve(promiseArray[name]);
    });
  } else {
    getCardsPromise = new Promise(resolve => {
      resolve(_cardData[name]);
    });
  }
  return getCardsPromise;
}

function setCardById(Id, card) {
  _cardData[Id] = card;
}

export { getCardDataById, setCardById, getCardsByName, getActiveCardByNameFn };
