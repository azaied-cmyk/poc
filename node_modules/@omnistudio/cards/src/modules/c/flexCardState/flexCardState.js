/*************************************************************************
 *
 * VLOCITY, INC. CONFIDENTIAL
 * __________________
 *
 *  [2014] - [2020] Vlocity, Inc.
 *  All Rights Reserved.
 *
 * NOTICE:  All information contained herein is, and remains
 * the property of Vlocity, Inc. and its suppliers,
 * if any. The intellectual and technical concepts contained
 * herein are proprietary to Vlocity, Inc. and its suppliers and may be
 * covered by U.S. and Foreign Patents, patents in process, and are
 * protected by trade secret or copyright law. Dissemination of this
 * information and reproduction, modification or reverse-engineering
 * of this material, is prohibited unless prior written permission
 * is obtained from Vlocity, Inc.
 *
 * Build: v234.0.0
 */
import { LightningElement, api, track } from "lwc";
import vtag from "c/oaVtag";
import { get } from "c/lodash";
import {
  Logger,
  extractCardMergeFields,
  getCardObjectFields,
  getErrorMessage
} from "c/flexCardUtility";
export default class FlexCard extends LightningElement {
  @api selectedState;
  @api set record(val) {
    if (val) {
      this._record = val;
    }
  }
  get record() {
    return this._record;
  }

  @api state;
  @api card;
  @api get cardObj() {
    return this._cardObj;
  }
  set cardObj(val) {
    if (val) {
      this._cardObj = val;
      this._allMergeFields = extractCardMergeFields(val);
    }
  }

  @api trackingObj;
  @track _cardObj;
  @track _record;
  @track _oaObj = {};
  @track _isPreview;
  @track _allMergeFields;

  // eslint-disable-next-line lwc/no-rest-parameter
  log(...args) {
    if (this.debug === "true" || this.debug === true) {
      Logger.log(...args);
    }
  }

  renderedCallback() {
    if (!this._oaObj.StartTime) this._oaObj.StartTime = Date.now();

    if (this.state && this.card) {
      this._isPreview =
        this.card.Params && this.card.Params.isPreview
          ? this.card.Params.isPreview === true ||
            this.card.Params.isPreview === "true"
          : false;
      this.setOaObj("State Load");
    }
  }

  setOaObj(eventName) {
    if (this._isPreview || !this.selectedState || this._oaObj.ReadyTime) return;

    if (
      !(
        this.state &&
        this.card &&
        this.card.Id &&
        this.trackingObj &&
        this.trackingObj.isParentCardTrackingEnabled
      )
    )
      return;

    let cardobj = getCardObjectFields(this.card);
    if (!this._oaObj.CardState) {
      this._oaObj.ActionContainerComponent = "Card";
      this._oaObj.ActionElementType = "FlexCards";
      this._oaObj.TrackingCategory = "UI";
      this._oaObj.RequestUrl = window.location.href;
      this._oaObj.ComponentId = this.trackingObj.containerId;
      this._oaObj.ActionContainerId = this._oaObj.ComponentId;
      this._oaObj.ActionContainerGlobalKey = this.trackingObj.containerGlobalKey;
      this._oaObj.InstanceIdentifier = this.trackingObj.containerInstanceIdentifier;

      if (
        ("IsChildCard" in cardobj && !this.card[cardobj.IsChildCard]) ||
        (this.card[cardobj.Type] &&
          this.card[cardobj.Type].toLowerCase() !== "child")
      )
        this._oaObj.ComponentState = this.state.name;

      // -- Custom/Data__c Fields
      this._oaObj.CardId = this.card.Id;
      this._oaObj.CardGlobalKey = this.card[cardobj.OmniUiCardKey];
      this._oaObj.CardInstanceIdentifier = this.trackingObj.parentCardInstanceIdentifier;
      this._oaObj.CardStateName = this.state.name;
      this._oaObj.CardStateInstanceIdentifier = `${
        this.state.name
      }/${Date.now()}${Math.floor(Math.random() * 1000)}`;

      if (this.card.tracking) {
        if (this.card.tracking.businessEvent) {
          let businessEvent = this.interpolateValue(
            this.card.tracking.businessEvent
          );
          if (businessEvent) this._oaObj.BusinessEvent = businessEvent;
        }
        if (this.card.tracking.businessCategory) {
          let businessCategory = this.interpolateValue(
            this.card.tracking.businessCategory
          );
          if (businessCategory) this._oaObj.BusinessCategory = businessCategory;
        }
        if (this.card.tracking.customFields) {
          let customFields = this.card.tracking.customFields;
          customFields.forEach(customField => {
            let fieldValue = this.interpolateValue(customField.val);
            if (fieldValue) this._oaObj[customField.name] = fieldValue;
          });
        }
      }
    }

    if (eventName === "State Load" && !this._oaObj.ReadyTime) {
      this._oaObj.Name = eventName;
      this._oaObj.ReadyTime = Date.now();
      this._oaObj.LoadDuration = this._oaObj.ReadyTime - this._oaObj.StartTime;
      vtag.track(eventName, this._oaObj);
    }
  }

  interpolateValue(val) {
    if (val.indexOf("{") !== -1) {
      let stringToInterpolate = val;
      return stringToInterpolate.replace(/\{(.*?)\}/g, (match, expr) => {
        let fieldValue = get(this.record, expr);
        if (this._allMergeFields && !fieldValue) {
          fieldValue = get(this._allMergeFields, expr);
        }
        return typeof fieldValue !== "undefined" ? fieldValue : "";
      });
    }
    return val;
  }

  handleSlotChange() {
    if (this.selectedState) {
      this.updateCardStyle();
    }
  }

  updateCardStyle() {
    this.dispatchEvent(
      new CustomEvent("updatestyle", {
        bubbles: true,
        composed: true,
        detail: {}
      })
    );
  }

  errorCallback(error) {
    let msg = getErrorMessage(error);
    this.dispatchEvent(
      new CustomEvent("showtoast", { bubbles: true, detail: { error: msg } })
    );
  }
}
