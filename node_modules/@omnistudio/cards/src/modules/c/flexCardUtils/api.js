/*************************************************************************
 *
 * VLOCITY, INC. CONFIDENTIAL
 * __________________
 *
 *  [2014] - [2020] Vlocity, Inc.
 *  All Rights Reserved.
 *
 * NOTICE:  All information contained herein is, and remains
 * the property of Vlocity, Inc. and its suppliers,
 * if any. The intellectual and technical concepts contained
 * herein are proprietary to Vlocity, Inc. and its suppliers and may be
 * covered by U.S. and Foreign Patents, patents in process, and are
 * protected by trade secret or copyright law. Dissemination of this
 * information and reproduction, modification or reverse-engineering
 * of this material, is prohibited unless prior written permission
 * is obtained from Vlocity, Inc.
 *
 * Build: v234.0.0
 */
//Offplatform support methods
//Some need to be replaced with SDK methods
import { getDatahandlerOut } from "c/sdkUtility";

function handleData(data) {
  return getDatahandlerOut(data.dataSourceMap);
}

function getCustomLabels(data) {
  return Promise.reject("Not implemented");
}

function getUserProfile(data) {
  return Promise.reject("Not implemented");
}

function doEncryptedDatasourceFlex(key, param, dataSource) {
  return getDatahandlerOut(dataSource);
}

function checkPermission(data) {
  return Promise.resolve(true);
}

function getCardObjectName(data) {
  return Promise.reject("Not implemented");
}

function createFlexCard(data) {
  return Promise.reject("Not implemented");
}

function generateRestRequest(data) {
  return Promise.reject("Not implemented");
}

function getLWCBundles(data) {
  return Promise.reject("Not implemented");
}

function getAllFlexCardDefinitions(data) {
  return Promise.reject("Not implemented");
}

function getAllCardsByRecordTypeMethod(data) {
  return Promise.reject("Not implemented");
}

function getAllCardsDetailsByRecordTypeMethod(data) {
  return Promise.reject("Not implemented");
}

function getAllObjects(data) {
  return Promise.reject("Not implemented");
}

function getFieldsForObject(data) {
  return Promise.reject("Not implemented");
}

function getApexClasses(data) {
  return Promise.reject("Not implemented");
}

function getCardById(data) {
  return Promise.reject("Not implemented");
}

function getCardsByNames(data) {
  return Promise.reject("Not implemented");
}

function getActiveCardByName(data) {
  return Promise.reject("Not implemented");
}

function getCardsByGlobalKeys(data) {
  return Promise.reject("Not implemented");
}

function getAllLWC(data) {
  return Promise.reject("Not implemented");
}

function foundation(data) {
  return Promise.resolve(false);
}

function saveCard(data) {
  return Promise.reject("Not implemented");
}

function setCardStatus(data) {
  return Promise.reject("Not implemented");
}

function getLwcBundleById(data) {
  return Promise.reject("Not implemented");
}

function getVisualforceDomain(data) {
  return Promise.reject("Not implemented");
}

function isRemoteSiteSettingExists(data) {
  return Promise.reject("Not implemented");
}

function isOmniStudio(data) {
  return Promise.reject("Not implemented");
}

function isPilotTriggersOn(data) {
  return Promise.reject("Not implemented");
}

function getAllOmniscripts(data) {
  return Promise.reject("Not implemented");
}

function logUsageEvent(componentName, componentId) {
  return Promise.reject("Not implemented");
}

function logUsageEvents(data) {
  return Promise.reject("Not implemented");
}

function firstOmniPkgNamespacePrefix() {
  return Promise.reject("Not implemented");
}

export {
  handleData,
  getCustomLabels,
  getUserProfile,
  doEncryptedDatasourceFlex,
  checkPermission,
  getCardObjectName,
  createFlexCard,
  generateRestRequest,
  getLWCBundles,
  getAllFlexCardDefinitions,
  getAllCardsByRecordTypeMethod,
  getAllCardsDetailsByRecordTypeMethod,
  getAllObjects,
  getFieldsForObject,
  getApexClasses,
  getCardById,
  getCardsByNames,
  getActiveCardByName,
  getCardsByGlobalKeys,
  getAllLWC,
  foundation,
  saveCard,
  setCardStatus,
  getLwcBundleById,
  getVisualforceDomain,
  isRemoteSiteSettingExists,
  isOmniStudio,
  isPilotTriggersOn,
  getAllOmniscripts,
  logUsageEvent,
  logUsageEvents,
  firstOmniPkgNamespacePrefix
};
