/*************************************************************************
 *
 * VLOCITY, INC. CONFIDENTIAL
 * __________________
 *
 *  [2014] - [2020] Vlocity, Inc.
 *  All Rights Reserved.
 *
 * NOTICE:  All information contained herein is, and remains
 * the property of Vlocity, Inc. and its suppliers,
 * if any. The intellectual and technical concepts contained
 * herein are proprietary to Vlocity, Inc. and its suppliers and may be
 * covered by U.S. and Foreign Patents, patents in process, and are
 * protected by trade secret or copyright law. Dissemination of this
 * information and reproduction, modification or reverse-engineering
 * of this material, is prohibited unless prior written permission
 * is obtained from Vlocity, Inc.
 *
 * Build: v234.0.0
 */
// eslint-disable-next-line eslint-comments/disable-enable-pair
/* eslint-disable lwc/no-inner-html */
let vlocTxtarea;

export { dsObj, isPilotTriggersOn, getLwcBundleById } from "c/flexCardUtils";

export {
  extractCustomLabelUsed,
  extractCardMergeFields
} from "c/flexCardUtility";

export {
  getAllCards,
  getAllChildCards,
  getAllParentCards,
  getAllCardsByRecordType,
  getAllCardsDetailsByRecordType
} from "./getAllCards";
export { getCardsByKeys, setCardData } from "./getCardsByGlobalKeys";
export {
  getAllsObjects,
  getObjectFields,
  getAllApexClasses
} from "./getAllsObject";
export { getAllOmniscriptsWrapper } from "./getAllOmniscripts";
export {
  removeNamespace,
  getParsedSampleData,
  convertNameToValidLWCCase,
  convertLWCBundleNameToValidHTMLElementName,
  removeKeys,
  evalMultipleConditionsToString,
  getParsedProperty,
  getCurrentFormFactor,
  getAllFields,
  setLocalSampleDataSourceResponse,
  getLocalSampleDataSourceResponse,
  setCardDefAndSave,
  copySelectedToClipboard,
  generateUniqueKey
} from "./commonUtil";
export { default as saveCard } from "./saveCard";
export {
  generateStateHtml,
  generateCardHtml,
  generateCardJs,
  generateInActiveHtml,
  generateDefinition,
  generateLWCFiles,
  getMetaData,
  defaultXmlConfig
} from "./componentGenerator";
export {
  createLwcBundle,
  getAllLwcBundles,
  addLwcBundle,
  updateResources,
  updateCardResource,
  checkIfChangeInSource,
  updateLocalResource,
  isRemoteSiteSetting,
  addRemoteSiteSetting,
  getLwcBundleByName
} from "./deployment";
export {
  getLwcResourceByName,
  setLwcResourceData,
  lwcResources
} from "./getLwcResource";
export {
  getCardDataById,
  setCardById,
  getCardsByName,
  getActiveCardByNameFn
} from "./getCard";

export function unEscape(value) {
  if (!vlocTxtarea) {
    vlocTxtarea = document.createElement("textarea");
  }

  // eslint-disable-next-line @lwc/lwc/no-inner-html
  vlocTxtarea.innerHTML = value;
  return vlocTxtarea.value;
}
export { setCardActivationStatus } from "./setCardStatus";
export {
  FLEX_DESIGNER_STYLE_OBJECT,
  getDefaultStyleForElement
} from "./flexDesignerStyleUtils";
export { default as createNewRecord } from "./createRecord";
export { getHelpPageForElement, getTooltipsForElement } from "./helppage";
export { getOsLwcName, getOsComponentTag } from "./oslwcsupport";
export { getCardObjectFields } from "./getCardObjectFields";
export { isFoundationPkg } from "./isFoundationPkg.js";
export { getTooltips } from "c/vlocityDocsUtil";
export { convertMetatoJSON, convertJSONtoXML } from "./xmlProcessor";
