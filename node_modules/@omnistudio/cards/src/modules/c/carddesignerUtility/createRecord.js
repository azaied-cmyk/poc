/*************************************************************************
 *
 * VLOCITY, INC. CONFIDENTIAL
 * __________________
 *
 *  [2014] - [2020] Vlocity, Inc.
 *  All Rights Reserved.
 *
 * NOTICE:  All information contained herein is, and remains
 * the property of Vlocity, Inc. and its suppliers,
 * if any. The intellectual and technical concepts contained
 * herein are proprietary to Vlocity, Inc. and its suppliers and may be
 * covered by U.S. and Foreign Patents, patents in process, and are
 * protected by trade secret or copyright law. Dissemination of this
 * information and reproduction, modification or reverse-engineering
 * of this material, is prohibited unless prior written permission
 * is obtained from Vlocity, Inc.
 *
 * Build: v234.0.0
 */
import { getCardObjectName, createFlexCard } from "c/flexCardUtils";
import { getCardObject } from "./getCardObjectFields";

let createNewRecord = function(record) {
  let {
    name,
    title,
    author,
    theme,
    isChildCard,
    dataSource,
    sampleData,
    description
  } = {
    ...record
  };
  const definedActions = {
    states: [
      {
        fields: [],
        conditions: {
          id: "state-condition-object",
          isParent: true,
          group: []
        },
        definedActions: {
          actions: []
        },
        name: "Active",
        isSmartAction: false,
        smartAction: {},
        styleObject: {
          padding: [
            {
              type: "around",
              size: "x-small"
            }
          ],
          margin: [
            {
              type: isChildCard ? "around" : "bottom",
              size: isChildCard ? "none" : "x-small"
            }
          ],
          container: {
            class: `${theme}-card`
          },
          size: {
            isResponsive: false,
            default: "12"
          },
          sizeClass: `${theme}-size_12-of-12`,
          class: `${theme}-card ${theme}-p-around_x-small ${theme}-m-bottom_x-small`
        }
      }
    ],
    dataSource: dataSource,
    title: title,
    enableLwc: true,
    isFlex: true,
    theme: theme,
    selectableMode: "Multi"
  };
  return getCardObjectName().then(objName => {
    let cardObjFields = getCardObject(objName);
    const recordInput = {
      Name: name,
      [cardObjFields.AuthorName]: author,
      [cardObjFields.PropertySetConfig]: JSON.stringify(definedActions),
      [cardObjFields.VersionNumber]: 1,
      [cardObjFields.DataSourceConfig]: JSON.stringify(dataSource),
      [cardObjFields.SampleDataSourceResponse]: sampleData ? sampleData : "",
      [cardObjFields.Description]: description ? description : ""
    };
    if ("IsChildCard" in cardObjFields) {
      recordInput[cardObjFields.IsChildCard] = isChildCard;
      recordInput[cardObjFields.CardType] = "flex";
    } else {
      recordInput[cardObjFields.Type] = isChildCard ? "child" : "parent";
    }
    return createFlexCard({ cardObject: recordInput });
  });
};

export default createNewRecord;
