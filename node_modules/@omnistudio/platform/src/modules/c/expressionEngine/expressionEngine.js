/*************************************************************************
 *
 * VLOCITY, INC. CONFIDENTIAL
 * __________________
 *
 *  [2014] - [2020] Vlocity, Inc.
 *  All Rights Reserved.
 *
 * NOTICE:  All information contained herein is, and remains
 * the property of Vlocity, Inc. and its suppliers,
 * if any. The intellectual and technical concepts contained
 * herein are proprietary to Vlocity, Inc. and its suppliers and may be
 * covered by U.S. and Foreign Patents, patents in process, and are
 * protected by trade secret or copyright law. Dissemination of this
 * information and reproduction, modification or reverse-engineering
 * of this material, is prohibited unless prior written permission
 * is obtained from Vlocity, Inc.
 *
 * Build: v234.0.0
 */
import { Parser } from 'c/nearley';
import grammar from './expressionEngineGrammar';
import { setTemplateResolverFn, setRandomGenerator } from './expressionEngineGrammar';
export { default as EXPRESSIONS } from './expressions.js';

export function evaluate(expression, templateResolverFn, reportErrors, randomGeneratorFn) {
    const p = new Parser(grammar.ParserRules, grammar.ParserStart);
    setTemplateResolverFn(templateResolverFn);
    if (typeof randomGeneratorFn === 'function') {
        setRandomGenerator(randomGeneratorFn);
    } else {
        setRandomGenerator(null);
    }
    p.feed(expression);
    if (p.results.length > 1 && reportErrors) {
        let previousResult = p.results[0];
        p.results.forEach(function(result) {
            if (previousResult !== result) {
                console.warn(JSON.stringify(p.results, null, 2));
            }
            previousResult = result;
        });
        throw new Error('Ambiguous Grammar: \n' + p.results.length);
    } else if (expression && expression.trim() && p.results.length === 0) {
        throw new Error('Unexpected end of expression');
    }
    let result = p.results[0];
    if (typeof result == 'undefined' || Number.isNaN(result) || result === Infinity) {
        return null;
    }
    return result;
}
