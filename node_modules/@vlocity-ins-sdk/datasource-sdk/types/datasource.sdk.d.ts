import "jsforce/lib/api/apex";
import { BaseSDK } from "../common";
import { ApexRemoteDataSource, ApexRemoteInput } from "./apexremote";
import { ApexRestDataSource, ApexRestInput } from "./apexrest";
import { DataRaptor, DataRaptorInput } from "./dataraptor";
import IDataSource from "./DataSource.interface";
import DataSourceSDKConfig from "./DataSourceSDKConfig";
import { IntegrationProcedure, IntegrationProcedureInput } from "./integrationprocedure";
import { RestDataSource } from "./rest";
import { RestInput } from "./rest/RestInput";
import { SoqlDataSource, SoqlInput } from "./soql";
import { SoslDataSource, SoslInput } from "./sosl";
/**
 * DataSource SDK
 * This SDK handles the connection with SalesForce and provide convenient ways to access Vlocity integration including
 * DataRaptor, Integration Procedure, Apex REST API etc.
 *
 * How to create a Datasource?
 *
 * @example Getting an instance of the DataSource
 * ```typescript
 * // Obtain a singleton dataSourceService
 * const dataSourceService = DataSource.getInstance({
 *   salesforceUrl: "https://www.salesforce.com",
 *   sessionId: "123",
 *   create: false,
 *   userId: "test" //additional data
 * });
 * ```
 *
 * @example Creating a custom datasource at runtime
 * ```typescript
 * const newDataSource = {
 *  oracle: () => {
 *   return "I'm a Custom implementation";
 *  },
 *  siebel: () => {
 *    return "I'm a Custom implementation";
 *  }
 * };
 *
 * dataSourceService.create(newDataSource, isNewInstance);
 *
 * // Create function implementation looks like this
 * // uses prototype to add methods to dataSourceService
 *
 * DataSource.mixin(DataSource, newDataSource, isNewInstance);
 * // call
 * dataSourceService
 *  .siebel()
 *  .execute(input)
 *  .then()
 *  .catch();
 * ```
 *
 * @example Using ApexRest
 * ```typescript
 * datasource
 *  .apexRest(new ApexRestInput({
 *   method: "get",
 *   url:
 *     "/vlocity_cmt/v2/cpq/carts/80137000000WlMP/products?hierarchy=1&pagesize=10&fields=IsActive,Id,Name,UnitPrice,ProductCode,jraju_card__RecurringPrice__c&includeIneligible=true"
 *  }))
 *   .execute()
 *   .then(resp => Logger.log("resp from thenable", resp))
 *   .catch(error => Logger.log("response from catch thenable", error));
 * ```
 *
 * @example Using Rest
 * ```typescript
 * const input1: RestInput = new RestInput({ url: "/test.json" });
 * datasource
 *   .rest(input1)
 *   .execute()
 *   .then(response => {
 *     Logger.log("call ", response);
 *   })
 *   .catch(error => {
 *     Logger.log("fail", error);
 *   });
 * ```
 * @example Using SOQL
 * ```typescript
 * datasource
 *   .soql(new SoqlInput({
 *    query: "SELECT Id, Name FROM Account LIMIT 10"
 *   })
 *   .execute()
 *   .then(response => {
 *     Logger.log("soql call ", response.records);
 *   })
 *   .catch(error => {
 *    Logger.log("soql fail", error);
 *   });
 * ```
 * @example SOSL call
 * ```typescript
 * datasource
 *   .sosl(new SoslInput({
 *    query: "FIND {Un*} IN ALL FIELDS RETURNING Account LIMIT 10"
 *   }))
 *   .execute()
 *   .then(response => {
 *     Logger.log("sosl call " + response.searchRecords);
 *   })
 *  .catch(error => {
 *     Logger.log("sosl fail" + error);
 *  });
 * ```
 *
 */
export default class DataSource extends BaseSDK {
    /**
     * Get an instance of DataSource if it exists. Otherwise, create a new one with the given config.
     * @param {config} Configuration to initialize DataSource.
     * @returns DataSource instance.
     */
    static getInstance(config: DataSourceSDKConfig): DataSource;
    /**
     * Private singleton instance of this SDK. There should always be only 1 instance.
     */
    private static instance;
    /**
     * Config for this SDK.
     */
    config: DataSourceSDKConfig;
    connection: any;
    private dataSourceDB;
    /**
     * Create a new DataSource.
     * @param {config} Configuration for DataSource.
     */
    constructor(config: any);
    /**
     * Create a new ApexRemote wrapper
     */
    apexRemote(input: ApexRemoteInput): ApexRemoteDataSource;
    /**
     * Create a new ApexRest wrapper
     */
    apexRest(input: ApexRestInput): ApexRestDataSource;
    /**
     * Create a new Rest wrapper
     */
    rest(input: RestInput): RestDataSource;
    /**
     * Create a new Soql wrapper
     */
    soql(input: SoqlInput): SoqlDataSource;
    /**
     * Create a new Sosl wrapper
     * @param  {SoslInput} input
     */
    sosl(input: SoslInput): SoslDataSource;
    /**
     * Create a new dataRaptor wrapper
     */
    dataRaptor(input: DataRaptorInput): DataRaptor;
    /**
     * Create a new integrationProcedure wrapper
     */
    integrationProcedure(input: IntegrationProcedureInput): IntegrationProcedure;
    /**
     * Create a dual data source that will automatically switch between Apex Rest or Apex Remote (if available).
     *
     * @param apexRestInput Apex Rest API Input.
     * @param apexRemoteInput Apex Remote Input.
     * @returns a instance of DualDataSource.
     */
    dual(apexRestInput: ApexRestInput, apexRemoteInput: ApexRemoteInput): IDataSource;
    /**
     * set a deafault retry count at datasource level
     * @param retryCount
     */
    setRetryCount(retryCount: number): void;
    /**
     * set a deafault timeout at datasource level
     * @param timeout
     */
    setRequestTimeout(timeout: number): void;
    /**
     * Get the cached response for the given cache key as generated from input object.
     * @param key is the generated from input object. For example, the key for ApexRestInput will be:
     * ```typescript
     * const key = apexRestInput.digest();
     * ```
     * @param cacheType is a optional parameter. It is the type of cache to be used. It will be of the type CacheType Enum. If not specified it will be indexed db
     */
    getCacheData(key: any, cacheType?: any): Promise<import("./common/CacheResult").CacheResult>;
    /**
     * sets the response for the given cache key as generated from input object.
     * @param key is the generated from input object. For example, the key for ApexRestInput will be:
     * ```typescript
     * const key = apexRestInput.digest();
     * ```
     * @param response is the data which needs to be cached.
     * @param cacheType is a optional parameter. It is the type of cache to be used. It will be of the type CacheType Enum. If not specified it will be indexed db
     */
    setCacheData(key: any, response: any, cacheType?: any): Promise<void>;
    /**
     * deletes the cached response for the given cache key as generated from input object.
     * @param key is the generated from input object. For example, the key for ApexRestInput will be:
     * ```typescript
     * const key = apexRestInput.digest();
     * ```
     * @param cacheType is a optional parameter. It is the type of cache to be used. It will be of the type CacheType Enum. If not specified it will be indexed db
     */
    deleteCacheData(key: any, cacheType?: any): Promise<void>;
    /**
     * gets all keys for the given DB and store
     */
    getCachedKeys(): Promise<IDBValidKey[]>;
    /**
     * clears the cache store
     */
    clearCache(): Promise<void>;
    /**
     * gets cached Data if current Date time is within expiration time
     * @param key is generated from input object. For example, the key for ApexRestInput will be:
     * ```typescript
     * const key = apexRestInput.digest();
     * ```
     * @param type is a optional parameter. It is the type of cache to be used. It will be of the type CacheType Enum. If not specified it will be indexed db
     */
    getCachedResults(key: any, type?: any): Promise<any>;
    /**
     * sets results the cache based on the optional parameter value
     * @param key is generated from input object. For example, the key for ApexRestInput will be:
     * ```typescript
     * const key = apexRestInput.digest();
     * ```
     * @param value is the data which needs to be cached
     * @param cacheExpiraion
     * @param type is a optional parameter. It is the type of cache to be used. It will be of the type CacheType Enum. If not specified it will be indexed db
     */
    setCachedResults(key: any, value: any, cacheExpiraion: any, type?: any): Promise<void>;
    /**
     * Create a DatasourceSDKConfig object.
     * @example
     * ```typescript
     *
     * // Instantiate DatasourceSDKConfig for login user
     * const datasourceSDKConfig = VlocitySDK.datasource.createConfigForDatasourceUser(salesforceUrl, sessionToken);
     *
     * // Instantiate the SDK itself
     * const datasource = VlocitySDK.datasource.getInstance(datasourceSDKConfig);
     * ```
     * @param {string} salesforceUrl
     * @param {string} sessionToken
     * @return {DataSourceSDKConfig} Configuration object to instantiate SDK.
     */
    static createConfigForDatasourceUser(salesforceUrl: string, sessionToken: string, inPlatformData?: Promise<Object>): DataSourceSDKConfig;
    /**
     * creates new  apexRemoteInput
     *
     *@example
     * ```
     * // ApexRemoteInput
     * const apexRemoteInput = VlocitySDK.datasource.apexRemoteInput({
     * className:"className",
     * "methodName":"methodName"
     * });
     *```
     * @param parameters
     * {
     * cacheable:false
     * retryCount:0,
     *timeoutInMillis:20000,
     * reload:false,
     *className:"className",
     *methodName:"methodName",
     * paramsArray:paramsArray;
     *config:config;
     * }
     */
    apexRemoteInput(parameters: Object): ApexRemoteInput;
    /**
     * creates new  apexRestInput
     *
     *@example
     * ```
     * // ApexRestInput
     * const apexRestInput = VlocitySDK.datasource.apexRestInput({
     * path:"path",
     * method:"methodName"
     * });
     *```
     * @param parameters
     * {
     * cacheable:false
     * retryCount:0,
     * timeoutInMillis:20000,
     * reload:false,
     * path:"path",
     * method:"method",
     * body:body;
     * }
     */
    apexRestInput(parameters: Object): ApexRestInput;
    /**
     * creates new  dataRaptorInput
     *
     *@example
     * ```
     * // DataraptorInput
     * const dataRaptorInput = VlocitySDK.datasource.dataRaptorInput({
     * bundleName:"name",
     * inputParamsString:"name=vlocity&state=ca"
     * });
     *```
     * @param parameters
     * {
     * inputParamsString:"name=vlocity&state=ca",
     * bundleName:"name"
     * cacheable:false
     * retryCount:0,
     * timeoutInMillis:20000,
     * reload:false,
     * }
     */
    dataRaptorInput(parameters: Object): DataRaptorInput;
    /**
     * creates new  integrationProcedureInput
     *
     *@example
     * ```
     * // integrationProcedureInput
     * const integrationProcedureInput = VlocitySDK.datasource.integrationProcedureInput({
     * input: {},
     * optionsMap: {},
     * procedureKey: "TEST_SDK"
     * });
     *```
     * @param parameters
     * {
     *input: {},
     * optionsMap: {},
     * procedureKey: "TEST_SDK",
     * cacheable:false
     * retryCount:0,
     * timeoutInMillis:20000,
     * reload:false,
     * }
     */
    integrationProcedureInput(parameters: Object): IntegrationProcedureInput;
    /**
     * creates new restInput
     *
     *@example
     * ```
     * // restInput
     * const restInput = VlocitySDK.datasource.restInput({
     * url: "/test"
     * });
     *```
     * @param parameters
     * {
     * url: "/test",
     *
     * cacheable:false,
     * retryCount:0,
     * timeoutInMillis:20000,
     * reload:false,
     * }
     */
    restInput(parameters: Object): RestInput;
    /**
     * creates new soqlInput
     *
     *@example
     * ```
     * // soqlInput
     * const restInput = VlocitySDK.datasource.soqlInput({
     * query: "SELECT id from Account LIMIT 5"
     * });
     *```
     * @param parameters
     * {
     * query: "SELECT id from Account LIMIT 5",
     * cacheable:false,
     * retryCount:0,
     * timeoutInMillis:20000,
     * reload:false,
     * }
     */
    soqlInput(parameters: Object): SoqlInput;
    /**
     * creates new soslInput
     *
     *@example
     * ```
     * // soslInput
     * const restInput = VlocitySDK.datasource.soslInput({
     * query: "FIND{ M1-5} IN ALL FIELDS RETURNING Account(Id, Name)"
     * });
     *```
     * @param parameters
     * {
     * query: "FIND{ M1-5} IN ALL FIELDS RETURNING Account(Id, Name)",
     * cacheable:false,
     * retryCount:0,
     * timeoutInMillis:20000,
     * reload:false,
     * }
     */
    soslInput(parameters: Object): SoslInput;
    /**
     * Create a DatasourceSDKConfig object.
     * @example
     * ```typescript
     *
     * // Instantiate DatasourceSDKConfig for login user
     * const datasourceSDKConfig = VlocitySDK.datasource.createConfigForLoginUser(salesforceUrl, sessionToken);
     *
     * // Instantiate the SDK itself
     * const datasource = VlocitySDK.datasource.getInstance(datasourceSDKConfig);
     * ```
     * @param {string} salesforceUrl
     * @param {string} sessionToken
     * @return {DataSourceSDKConfig} Configuration object to instantiate SDK.
     */
    static createConfigForLoginUser(salesforceUrl: string, sessionToken: string, inPlatformData?: Promise<Object>): DataSourceSDKConfig;
    /**
     * returns data from Apex remote call
     *
     *@example
     * ```
     *
     * VlocitySDK.datasource.handleApexRemoteCall({
     * className:"className",
     * "methodName":"methodName"
     * })
     *```
     * @param parameters
     * {
     * cacheable:false
     * retryCount:0,
     *timeoutInMillis:20000,
     * reload:false,
     *className:"className",
     *methodName:"methodName",
     * paramsArray:paramsArray;
     *config:config;
     * }
     */
    handleApexRemoteCall(parameters: Object): Promise<any>;
    /**
     *returns data from Apex Rest call
     *
     *@example
     * ```
     * VlocitySDK.datasource.handleApexRestCall({
     * path:"path",
     * method:"methodName"
     * });
     *```
     * @param parameters
     * {
     * cacheable:false
     * retryCount:0,
     * timeoutInMillis:20000,
     * reload:false,
     * path:"path",
     * method:"method",
     * body:body;
     * }
     */
    handleApexRestCall(parameters: Object): Promise<any>;
    /**
     * returns data from a dataRaptor call
     *@example
     * ```
     * VlocitySDK.datasource.handleDataRaptorCall({
     * bundleName:"name",
     * inputParamsString:"name=vlocity&state=ca"
     * });
     *```
     * @param parameters
     * {
     * inputParamsString:"name=vlocity&state=ca",
     * bundleName:"name"
     * cacheable:false
     * retryCount:0,
     * timeoutInMillis:20000,
     * reload:false,
     * }
     */
    handleDataRaptorCall(parameters: Object): Promise<any>;
    /**
     *
     *@example
     * ```
     * returns data from a IntegrationProcedure
     * VlocitySDK.datasource.handleIntegrationProcedureCall({
     * input: {},
     * optionsMap: {},
     * procedureKey: "TEST_SDK"
     * });
     *```
     * @param parameters
     * {
     *input: {},
     * optionsMap: {},
     * procedureKey: "TEST_SDK",
     * cacheable:false
     * retryCount:0,
     * timeoutInMillis:20000,
     * reload:false,
     * }
     */
    handleIntegrationProcedureCall(parameters: Object): Promise<any>;
    /**
     * returns a rest Data
     *
     *@example
     * ```
     * VlocitySDK.datasource.handleRestCall({
     * url: "/test"
     * });
     *```
     * @param parameters
     * {
     * url: "/test",
     *
     * cacheable:false,
     * retryCount:0,
     * timeoutInMillis:20000,
     * reload:false,
     * }
     */
    handleRestCall(parameters: Object): Promise<any>;
    /**
     * returns SOQL data
     *
     *@example
     * ```
     * // soqlInput
     * VlocitySDK.datasource.handleSoqlCall({
     * query: "SELECT id from Account LIMIT 5"
     * });
     *```
     * @param parameters
     * {
     * query: "SELECT id from Account LIMIT 5",
     * cacheable:false,
     * retryCount:0,
     * timeoutInMillis:20000,
     * reload:false,
     * }
     */
    handleSoqlCall(parameters: Object): Promise<any>;
    /**
     * handles sosl call
     *
     *@example
     * ```
     * VlocitySDK.datasource.handleSoslCall({
     * query: "FIND{ M1-5} IN ALL FIELDS RETURNING Account(Id, Name)"
     * });
     *```
     * @param parameters
     * {
     * query: "FIND{ M1-5} IN ALL FIELDS RETURNING Account(Id, Name)",
     * cacheable:false,
     * retryCount:0,
     * timeoutInMillis:20000,
     * reload:false,
     * }
     */
    handleSoslCall(parameters: Object): Promise<any>;
}
