import { CacheType } from "../../common/cacheType";
export declare abstract class BaseDataSourceInput {
    private static DEFAULT_CACHE_EXPIRATION;
    /**
     * Flag to indicate if this datasource call should be cached.
     */
    cacheable?: boolean;
    /**
     * Expiration Date time of the cached item.
     * Default is current time plus 5 minutes.
     */
    cacheExpiration?: Date;
    /**
     * retryCount defines the number of retry for datasource.execute() to be called
     * if a failure is encountered.
     */
    retryCount?: number;
    /**
     * timeoutInMillis defines the timeout for API requests.
     */
    timeoutInMillis?: number;
    /**
     * reload defines if the data should be retrive from the cache or not.
     * Default is false.
     * set reload to true when fresh data needs to fetched from the API
     */
    reload?: boolean;
    /**
     * cacheType defines where the response data should be stored.
     * Default is IndexedBB.
     * set cacheType storageType.INDEXEDDB/storageType.LOCALSTORAGE/storageType.SESSIONSTORAGE
     */
    cacheType?: CacheType;
    constructor(cacheable?: boolean, cacheExpiration?: Date, retryCount?: number, timeoutInMillis?: number, reload?: boolean, cacheType?: CacheType);
    abstract digest(): Promise<string>;
    /**
     * This function generates a unique digest value for this input.
     * Subclass needs to provide the unique data to be digested to ensure the uniqueness.
     * @param data unique data to be digested.
     * @returns Promise filled with hex string representation of the digested value. This hex string can be used for comparison and display.
     */
    protected digestData(...data: string[]): Promise<string>;
    /**
     * This will convert a non empty ArrayBuffer to hex string.
     * @param buffer ArrayBuffer to convert to hex string representation.
     * @returns hexString string representation of buffer.
     */
    private hexString;
}
