import { BaseDataSourceInput } from "../common/";
/**
 * Apex Remote Input Object.
 * This is used for invoking Apex RemoteAction.
 *
 * @example
 * ```typescript
 *
 *  // Sample Apex Class - ProductConsoleControllerV2.cls
 *  @RemoteAction
 *    global static Object invokeMethod(String methodName, String serializedInputs) {
 *        return retObj;
 *    }
 *
 *  // Sample IApexRemoteInput
 *  const apexRemoteInput = {
 *    className: "ProductConsoleControllerV2",
 *    methodName: "invokeMethod",
 *    paramsArray: [
 *     // first arg corresponds to first arg in Apex invokeMethod(methodName, ...)
 *     "getCustomLabels",
 *     // second arg corresponds to second arg in Apex invokeMethod(. , serializedInputs)
 *     JSON.stringify({
 *         "labelNames": this.uriEncodedTextToTranslate(),
 *         "language": this.language
 *       })
 *    ]
 *  }
 *
 *  // Using IApexRemoteInput in DataSource
 *  dataSourceService.apexRemote(apexRemoteInput).execute().then(...);
 *
 * ```
 */
/**
 * Class that defines input for ApexRemoteInput  .
 * @extends BaseDataSourceInput
 */
export declare class ApexRemoteInput extends BaseDataSourceInput {
    /**
     * className of the Apex Remote service
     */
    className: string;
    /**
     * methodName of the Apex Remote Request
     */
    methodName: string;
    /**
     * Array of parameters for the Apex Remote Request
     */
    paramsArray?: any[];
    /**
     * config as an object
     */
    config?: object;
    /**
     * input params as an object- format: {"name": "vlocity", "state":"ca"}
     */
    inputMap?: any;
    optionsMap?: any;
    constructor(apexRemoteInput: any);
    /**
     * This function generates a unique digest value for this input.
     * Subclass needs to provide the unique data to be digested to ensure the uniqueness.
     * @param data unique data to be digested.
     * @returns Promise filled with hex string representation of the digested value. This hex string can be used for comparison and display.
     */
    digest(): Promise<string>;
}
